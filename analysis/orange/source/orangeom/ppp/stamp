(dp0
S'TComputeDomainContingency_ImputeWithClassifier'
p1
(i__main__
ClassDefinition
p2
(dp3
S'extended'
p4
I1
sS'imported'
p5
I01
sS'name'
p6
g1
sS'parent'
p7
S'TComputeDomainContingency'
p8
sS'abstract'
p9
I00
sS'components'
p10
(lp11
sS'properties'
p12
(lp13
(S'TLearner'
p14
S'learnerForDiscrete'
p15
S'learner_for_discrete'
p16
S'constructs a classifier for imputation of discrete values'
p17
I0
I0
I00
Ntp18
a(S'TLearner'
p19
S'learnerForContinuous'
p20
S'learner_for_continuous'
p21
S'constructs a classifier for imputation of continuous values'
p22
I0
I0
I00
Ntp23
a(S'bool'
p24
S'classIsOuter'
p25
S'class_is_outer'
p26
S'tells whether the class is the outer variable in contingencies'
p27
I0
I0
I01
Ntp28
asS'constants'
p29
(dp30
sbsS'TRuleDataStoppingCriteria_NoPositives'
p31
(i__main__
ClassDefinition
p32
(dp33
g4
I1
sg5
I01
sg6
g31
sg7
S'TRuleDataStoppingCriteria'
p34
sg9
I00
sg10
(lp35
sg12
(lp36
sg29
(dp37
sbsS'TExampleCluster'
p38
(i__main__
ClassDefinition
p39
(dp40
g4
I1
sg5
I01
sg6
g38
sg7
S'TOrange'
p41
sg9
I00
sg10
(lp42
sg12
(lp43
(S'TExampleCluster'
p44
S'left'
p45
g45
S"'left' cluster"
p46
I0
I0
I00
Ntp47
a(S'TExampleCluster'
p48
S'right'
p49
g49
S"'right' cluster"
p50
I0
I0
I00
Ntp51
a(S'float'
p52
S'distance'
p53
g53
S'distance between the two clusters (not defined for leaves)'
p54
I0
I0
I01
Ntp55
a(S'TExample'
p56
S'centroid'
p57
g57
S"cluster's centroid (always defined for leaves)"
p58
I0
I0
I00
Ntp59
asg29
(dp60
sbsS'TClassifierByLookupTableN'
p61
(i__main__
ClassDefinition
p62
(dp63
g4
I1
sg5
I01
sg6
g61
sg7
S'TClassifierByLookupTable'
p64
sg9
I00
sg10
(lp65
sg12
(lp66
(S'TVarList'
p67
S'variables'
p68
g68
S'attributes'
p69
I01
I0
I00
Ntp70
a(S'TIntList'
p71
S'noOfValues'
p72
S'no_of_values'
p73
S'number of values for each attribute'
p74
I01
I0
I00
Ntp75
a(S'TEFMDataDescription'
p76
S'dataDescription'
p77
S'data_description'
p78
S'data description'
p79
I0
I0
I00
Ntp80
a(S'TValueList'
p81
S'lookupTable'
p82
S'lookup_table'
p83
S'a list of class values, one for each attribute value'
p84
I01
I0
I00
Ntp85
a(S'TDistributionList'
p86
S'distributions'
p87
g87
S'a list of class distributions, one for each attribute value'
p88
I01
I0
I00
Ntp89
a(S'TVariable'
p90
S'classVar'
p91
S'class_var'
p92
S'class variable'
p93
I0
I0
I00
Ntp94
a(S'bool'
p95
S'computesProbabilities'
p96
S'computes_probabilities'
p97
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p98
I0
I0
I01
Ntp99
asg29
(dp100
sbsS'TLearner_Python'
p101
(i__main__
ClassDefinition
p102
(dp103
g4
I1
sg5
I01
sg6
g101
sg7
S'TLearner'
p104
sg9
I00
sg10
(lp105
sg12
(lp106
(S'int'
p107
S'needs'
p108
g108
S'the kind of data that learner needs'
p109
I01
I0
I01
Ntp110
asg29
(dp111
sbsS'TSammonStress'
p112
(i__main__
ClassDefinition
p113
(dp114
S'extended'
p115
I1
sS'imported'
p116
I0
sS'name'
p117
g112
sS'parent'
p118
S'TStressFunc'
p119
sS'abstract'
p120
I00
sS'components'
p121
(lp122
sS'properties'
p123
(lp124
sS'constants'
p125
(dp126
sbsS'TConditionalProbabilityEstimator_FromDistribution'
p127
(i__main__
ClassDefinition
p128
(dp129
g4
I1
sg5
I01
sg6
g127
sg7
S'TConditionalProbabilityEstimator'
p130
sg9
I00
sg10
(lp131
sg12
(lp132
(S'TContingency'
p133
S'probabilities'
p134
g134
S'Contingency that stores conditional probabilities'
p135
I0
I0
I00
Ntp136
a(S'bool'
p137
S'supportsDiscrete'
p138
S'supports_discrete'
p139
S'can estimate probabilities of discrete attributes'
p140
I01
I0
I01
Ntp141
a(S'bool'
p142
S'supportsContinuous'
p143
S'supports_continuous'
p144
S'can estimate probabilities of continuous attributes'
p145
I01
I0
I01
Ntp146
asg29
(dp147
sbsS'THeatmapList'
p148
(ipyprops
ClassDefinition
p149
(dp150
S'extended'
p151
I0
sS'imported'
p152
I01
sS'name'
p153
g148
sS'parent'
p154
S'TOrange'
p155
sS'abstract'
p156
I0
sS'components'
p157
(lp158
sS'properties'
p159
(lp160
sS'constants'
p161
(dp162
sbsS'TFeatureInducer'
p163
(i__main__
ClassDefinition
p164
(dp165
g4
I1
sg5
I01
sg6
g163
sg7
S'TOrange'
p166
sg9
I01
sg10
(lp167
sg12
(lp168
sg29
(dp169
sbsS'TImputerConstruct_Python'
p170
(i__main__
ClassDefinition
p171
(dp172
g4
I1
sg5
I01
sg6
g170
sg7
S'TImputerConstructor'
p173
sg9
I00
sg10
(lp174
sg12
(lp175
(S'bool'
p176
S'imputeClass'
p177
S'impute_class'
p178
S'tells whether to impute the class value (default: true)'
p179
I0
I0
I01
Ntp180
asg29
(dp181
sbsS'TExampleGeneratorList'
p182
(ipyprops
ClassDefinition
p183
(dp184
g151
I0
sg152
I01
sg153
g182
sg154
g155
sg156
I0
sg157
(lp185
sg159
(lp186
sg161
(dp187
sbsS'TIMByRowsConstructor'
p188
(i__main__
ClassDefinition
p189
(dp190
g4
I1
sg5
I01
sg6
g188
sg7
S'TOrange'
p191
sg9
I01
sg10
(lp192
sg12
(lp193
sg29
(dp194
sbsS'TSubsetsGenerator_withRestrictions'
p195
(i__main__
ClassDefinition
p196
(dp197
g4
I1
sg5
I01
sg6
g195
sg7
S'TSubsetsGenerator'
p198
sg9
I00
sg10
(lp199
sg12
(lp200
(S'TSubsetsGenerator'
p201
S'subGenerator'
p202
S'sub_generator'
p203
S'subset generator'
p204
I0
I0
I00
Ntp205
a(S'TVarList'
p206
S'required'
p207
g207
S'set of required attributes'
p208
I0
I0
I00
Ntp209
a(S'TVarList'
p210
S'forbidden'
p211
g211
S'set of forbidden attributes'
p212
I0
I0
I00
Ntp213
a(S'TVarListList'
p214
S'forbiddenSubSubsets'
p215
S'forbidden_sub_subsets'
p216
S'set of forbidden subsets (attributes that must not occur together)'
p217
I0
I0
I00
Ntp218
a(S'TVarList'
p219
S'varList'
p220
S'var_list'
p221
S'a set of attributes from which subsets are generated'
p222
I0
I0
I00
Ntp223
asg29
(dp224
sbsS'TEVDistList'
p225
(ipyprops
ClassDefinition
p226
(dp227
g151
I0
sg152
I01
sg153
g225
sg154
g155
sg156
I0
sg157
(lp228
sg159
(lp229
sg161
(dp230
sbsS'TValueFilterList'
p231
(ipyprops
ClassDefinition
p232
(dp233
g151
I0
sg152
I01
sg153
g231
sg154
g155
sg156
I0
sg157
(lp234
sg159
(lp235
sg161
(dp236
sbsS'TRuleBeamFilter_Python'
p237
(i__main__
ClassDefinition
p238
(dp239
g4
I1
sg5
I01
sg6
g237
sg7
S'TRuleBeamFilter'
p240
sg9
I00
sg10
(lp241
sg12
(lp242
sg29
(dp243
sbsS'TTreeExampleSplitter'
p244
(i__main__
ClassDefinition
p245
(dp246
g4
I1
sg5
I01
sg6
g244
sg7
S'TOrange'
p247
sg9
I01
sg10
(lp248
sg12
(lp249
sg29
(dp250
sbsS'TSVMClassifier'
p251
(i__main__
ClassDefinition
p252
(dp253
g4
I1
sg5
I01
sg6
g251
sg7
S'TClassifierFD'
p254
sg9
I00
sg10
(lp255
sg12
(lp256
(S'TIntList'
p257
S'nSV'
p258
S'n_SV'
p259
S'nSV'
p260
I0
I0
I00
Ntp261
a(S'TFloatList'
p262
S'rho'
p263
g263
S'rho'
p264
I0
I0
I00
Ntp265
a(S'TFloatListList'
p266
S'coef'
p267
g267
S'coef'
p268
I0
I0
I00
Ntp269
a(S'TFloatList'
p270
S'probA'
p271
S'prob_a'
p272
S'probA - pairwise probability information'
p273
I0
I0
I00
Ntp274
a(S'TFloatList'
p275
S'probB'
p276
S'prob_b'
p277
S'probB - pairwise probability information'
p278
I0
I0
I00
Ntp279
a(S'TExampleTable'
p280
S'supportVectors'
p281
S'support_vectors'
p282
S'support vectors'
p283
I0
I0
I00
Ntp284
a(S'TExampleTable'
p285
S'examples'
p286
g286
S'examples used to train the classifier'
p287
I0
I0
I00
Ntp288
a(S'TKernelFunc'
p289
S'kernelFunc'
p290
S'kernel_func'
p291
S'custom kernel function'
p292
I0
I0
I00
Ntp293
a(S'int'
p294
S'svm_type'
p295
g295
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p296
I0
I0
I01
S'SVMLearner_SVMType'
p297
tp298
a(S'int'
p299
S'kernel_type'
p300
g300
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p301
I0
I0
I01
S'SVMLearner_Kernel'
p302
tp303
a(S'TDomain'
p304
S'domain'
p305
g305
S'domain'
p306
I0
I0
I00
Ntp307
ag94
ag99
asg29
(dp308
sbsS'TFilteredGenerator'
p309
(i__main__
ClassDefinition
p310
(dp311
g4
I1
sg5
I01
sg6
g309
sg7
S'TAdapterGenerator'
p312
sg9
I00
sg10
(lp313
sg12
(lp314
(S'TFilter'
p315
S'filter'
p316
g316
S'decides which examples are skipped'
p317
I0
I0
I00
Ntp318
a(S'TDomain'
p319
S'domain'
p320
g320
S'domain'
p321
I0
I0
I00
Ntp322
a(S'int'
p323
S'version'
p324
g324
S'unique version identifier'
p325
I01
I0
I01
Ntp326
asg29
(dp327
sbsS'TPythonVariable'
p328
(i__main__
ClassDefinition
p329
(dp330
g4
I1
sg5
I01
sg6
g328
sg7
S'TVariable'
p331
sg9
I00
sg10
(lp332
sg12
(lp333
(S'bool'
p334
S'usePickle'
p335
S'use_pickle'
p336
S'tells whether to use pickle for saving to/loading from files'
p337
I0
I0
I01
Ntp338
a(S'bool'
p339
S'useSomeValue'
p340
S'use_some_value'
p341
S'tells whether the Variable will operate on Value or SomeValue (default)'
p342
I0
I0
I01
Ntp343
a(S'int'
p344
S'varType'
p345
S'var_type'
p346
S' variable type'
p347
I0
I0
I01
S'Variable_Type'
p348
tp349
a(S'bool'
p350
S'ordered'
p351
g351
S'variable values are ordered'
p352
I0
I0
I01
Ntp353
a(S'bool'
p354
S'distributed'
p355
g355
S'variable values are distributions'
p356
I0
I0
I01
Ntp357
a(S'int'
p358
S'defaultMetaId'
p359
S'default_meta_id'
p360
S'default (proposed, suggested...) meta id for this variable'
p361
I0
I0
I01
Ntp362
a(S'TRandomGenerator'
p363
S'randomGenerator'
p364
S'random_generator'
p365
S'random generator for random values (initialized when first needed)'
p366
I0
I0
I00
Ntp367
a(S'TVariable'
p368
S'sourceVariable'
p369
S'source_variable'
p370
S'The attribute that this attribute is computed from (when applicable)'
p371
I0
I0
I00
Ntp372
a(S'TClassifier'
p373
S'getValueFrom'
p374
S'get_value_from'
p375
S'Function to compute the value from values of other variables'
p376
I0
I0
I00
Ntp377
asg29
(dp378
sbsS'TTreeLearner'
p379
(i__main__
ClassDefinition
p380
(dp381
g4
I1
sg5
I01
sg6
g379
sg7
S'TLearner'
p382
sg9
I00
sg10
(lp383
sg12
(lp384
(S'TTreeSplitConstructor'
p385
S'split'
p386
g386
S'split criterion'
p387
I0
I0
I00
Ntp388
a(S'TTreeStopCriteria'
p389
S'stop'
p390
g390
S'stop criterion'
p391
I0
I0
I00
Ntp392
a(S'TComputeDomainContingency'
p393
S'contingencyComputer'
p394
S'contingency_computer'
p395
S'computes contingency matrix'
p396
I0
I0
I00
Ntp397
a(S'TLearner'
p398
S'nodeLearner'
p399
S'node_learner'
p400
S'node learner'
p401
I0
I0
I00
Ntp402
a(S'TTreeExampleSplitter'
p403
S'exampleSplitter'
p404
S'example_splitter'
p405
S'splits examples to branches'
p406
I0
I0
I00
Ntp407
a(S'int'
p408
S'maxDepth'
p409
S'max_depth'
p410
S'maximal tree depth (0 = root only, -1 = no limit)'
p411
I0
I0
I01
Ntp412
a(S'bool'
p413
S'storeExamples'
p414
S'store_examples'
p415
S'if true (default: false), learning examples in nodes are stored'
p416
I0
I0
I01
Ntp417
a(S'bool'
p418
S'storeDistributions'
p419
S'store_distributions'
p420
S'if true (default), class distributions of learning examples in nodes are stored'
p421
I0
I0
I01
Ntp422
a(S'bool'
p423
S'storeContingencies'
p424
S'store_contingencies'
p425
S'if true (default), contingency matrices for examples are stored'
p426
I0
I0
I01
Ntp427
a(S'bool'
p428
S'storeNodeClassifier'
p429
S'store_node_classifier'
p430
S'if true (default), the internal nodes have classifiers; needed for pruning'
p431
I0
I0
I01
Ntp432
a(S'TTreeDescender'
p433
S'descender'
p434
g434
S'descends down the tree'
p435
I0
I0
I00
Ntp436
ag110
asg29
(dp437
sbsS'TPreprocessor_shuffle'
p438
(i__main__
ClassDefinition
p439
(dp440
g4
I1
sg5
I01
sg6
g438
sg7
S'TPreprocessor'
p441
sg9
I00
sg10
(lp442
sg12
(lp443
(S'TVarList'
p444
S'attributes'
p445
g445
S'tells which attributes to shuffle'
p446
I0
I0
I00
Ntp447
a(S'TRandomGenerator'
p448
S'randomGenerator'
p449
S'random_generator'
p450
S'random number generator'
p451
I0
I0
I00
Ntp452
asg29
(dp453
sbsS'TLearner'
p454
(i__main__
ClassDefinition
p455
(dp456
g4
I1
sg5
I01
sg6
g454
sg7
S'TOrange'
p457
sg9
I00
sg10
(lp458
sg12
(lp459
g110
asg29
(dp460
sbsS'TExamplesDistance_Maximal'
p461
(i__main__
ClassDefinition
p462
(dp463
g4
I1
sg5
I01
sg6
g461
sg7
S'TExamplesDistance_Normalized'
p464
sg9
I00
sg10
(lp465
sg12
(lp466
(S'TAttributedFloatList'
p467
S'normalizers'
p468
g468
S'normalizing factors for attributes'
p469
I0
I0
I00
Ntp470
a(S'TAttributedFloatList'
p471
S'bases'
p472
g472
S'lowest values for attributes'
p473
I0
I0
I00
Ntp474
a(S'TAttributedFloatList'
p475
S'averages'
p476
g476
S'average values for continuous attribute values'
p477
I0
I0
I00
Ntp478
a(S'TAttributedFloatList'
p479
S'variances'
p480
g480
S'variations for continuous attribute values'
p481
I0
I0
I00
Ntp482
a(S'int'
p483
S'domainVersion'
p484
S'domain_version'
p485
S'version of domain on which the ranges were computed'
p486
I0
I0
I01
Ntp487
a(S'bool'
p488
S'normalize'
p489
g489
S'tells whether to normalize distances between attributes'
p490
I0
I0
I01
Ntp491
a(S'bool'
p492
S'ignoreUnknowns'
p493
S'ignore_unknowns'
p494
S'if true (default: false) unknown values are ignored in computation'
p495
I0
I0
I01
Ntp496
asg29
(dp497
sbsS'TSubsetsGenerator_withRestrictions_iterator'
p498
(i__main__
ClassDefinition
p499
(dp500
g4
I1
sg5
I01
sg6
g498
sg7
S'TSubsetsGenerator_iterator'
p501
sg9
I00
sg10
(lp502
sg12
(lp503
(S'TSubsetsGenerator_iterator'
p504
S'subGenerator_iterator'
p505
S'sub_generator_iterator'
p506
S'subset generator'
p507
I0
I0
I00
Ntp508
a(S'TVarList'
p509
S'required'
p510
g510
S'set of required attributes'
p511
I0
I0
I00
Ntp512
a(S'TVarList'
p513
S'forbidden'
p514
g514
S'set of forbidden attributes'
p515
I0
I0
I00
Ntp516
a(S'TVarListList'
p517
S'forbiddenSubSubsets'
p518
S'forbidden_sub_subsets'
p519
S'set of forbidden subsets (attributes that must not occur together)'
p520
I0
I0
I00
Ntp521
a(S'TVarList'
p522
S'varList'
p523
S'var_list'
p524
S'a set of attributes from which subsets are generated'
p525
I0
I0
I00
Ntp526
asg29
(dp527
sbsS'TPreprocessor_discretize'
p528
(i__main__
ClassDefinition
p529
(dp530
g4
I1
sg5
I01
sg6
g528
sg7
S'TPreprocessor'
p531
sg9
I00
sg10
(lp532
sg12
(lp533
(S'TVarList'
p534
S'attributes'
p535
g535
S'attributes to be discretized (all, if not defined or empty)'
p536
I0
I0
I00
Ntp537
a(S'bool'
p538
S'discretizeClass'
p539
S'discretize_class'
p540
S'also discretize the class attribute (default: false)'
p541
I0
I0
I01
Ntp542
a(S'TDiscretization'
p543
S'method'
p544
g544
S'discretization method'
p545
I0
I0
I00
Ntp546
asg29
(dp547
sbsS'TRuleClassifier_logit'
p548
(i__main__
ClassDefinition
p549
(dp550
g4
I1
sg5
I01
sg6
g548
sg7
S'TRuleClassifier'
p551
sg9
I00
sg10
(lp552
sg12
(lp553
(S'TDistribution'
p554
S'prior'
p555
g555
S'prior distribution'
p556
I0
I0
I00
Ntp557
a(S'TDomain'
p558
S'domain'
p559
g559
S'Domain'
p560
I0
I0
I00
Ntp561
a(S'TFloatList'
p562
S'ruleBetas'
p563
S'rule_betas'
p564
S'Rule betas'
p565
I0
I0
I00
Ntp566
a(S'float'
p567
S'minSignificance'
p568
S'min_significance'
p569
S'minimum requested significance for betas. '
p570
I0
I0
I01
Ntp571
a(S'float'
p572
S'minBeta'
p573
S'min_beta'
p574
S'minimum beta by rule to be included in the model. '
p575
I0
I0
I01
Ntp576
a(S'bool'
p577
S'setPrefixRules'
p578
S'set_prefix_rules'
p579
S'should we order prefix rules ? '
p580
I0
I0
I01
Ntp581
a(S'bool'
p582
S'optimizeBetasFlag'
p583
S'optimize_betas_flag'
p584
S'should we assign betas to rules ? '
p585
I0
I0
I01
Ntp586
a(S'float'
p587
S'penalty'
p588
g588
S''
p589
I0
I0
I01
Ntp590
a(S'TClassifier'
p591
S'priorClassifier'
p592
S'prior_classifier'
p593
S'prior classifier used if provided'
p594
I0
I0
I00
Ntp595
a(S'TLogitClassifierState'
p596
S'currentState'
p597
S'current_state'
p598
g589
I0
I0
I00
Ntp599
a(S'TFloatList'
p600
S'wsd'
p601
g601
g589
I0
I0
I00
Ntp602
a(S'TFloatList'
p603
S'wavgCov'
p604
S'wavg_cov'
p605
g589
I0
I0
I00
Ntp606
a(S'TFloatList'
p607
S'wSatQ'
p608
S'w_sat_q'
p609
g589
I0
I0
I00
Ntp610
a(S'TFloatList'
p611
S'wsig'
p612
g612
g589
I0
I0
I00
Ntp613
a(S'TRuleList'
p614
S'prefixRules'
p615
S'prefix_rules'
p616
S'rules that trigger before logit sum.'
p617
I0
I0
I00
Ntp618
a(S'TRuleList'
p619
S'rules'
p620
g620
g589
I0
I0
I00
Ntp621
a(S'TExampleTable'
p622
S'examples'
p623
g623
g589
I0
I0
I00
Ntp624
a(S'int'
p625
S'weightID'
p626
S'weight_ID'
p627
g589
I0
I0
I01
Ntp628
ag94
ag99
asg29
(dp629
sbsS'TProgressCallback_Python'
p630
(i__main__
ClassDefinition
p631
(dp632
g4
I1
sg5
I01
sg6
g630
sg7
S'TProgressCallback'
p633
sg9
I00
sg10
(lp634
sg12
(lp635
sg29
(dp636
sbsS'TImputeClassifier'
p637
(i__main__
ClassDefinition
p638
(dp639
g4
I1
sg5
I01
sg6
g637
sg7
S'TClassifier'
p640
sg9
I00
sg10
(lp641
sg12
(lp642
(S'TClassifierFromVar'
p643
S'classifierFromVar'
p644
S'classifier_from_var'
p645
S'ClassifierFromVar that is used to retrieve defined values'
p646
I0
I0
I00
Ntp647
a(S'TClassifier'
p648
S'imputer'
p649
g649
S'classifier that is used to determine the missing values '
p650
I0
I0
I00
Ntp651
ag94
ag99
asg29
(dp652
sbsS'TRuleCovererAndRemover'
p653
(i__main__
ClassDefinition
p654
(dp655
g4
I1
sg5
I01
sg6
g653
sg7
S'TOrange'
p656
sg9
I01
sg10
(lp657
sg12
(lp658
sg29
(dp659
sbsS'TFilterList'
p660
(ipyprops
ClassDefinition
p661
(dp662
g151
I0
sg152
I01
sg153
g660
sg154
g155
sg156
I0
sg157
(lp663
sg159
(lp664
sg161
(dp665
sbsS'TPythonValue'
p666
(i__main__
ClassDefinition
p667
(dp668
g4
I1
sg5
I01
sg6
g666
sg7
S'TSomeValue'
p669
sg9
I00
sg10
(lp670
sg12
(lp671
sg29
(dp672
sbsS'TAssociationRulesSparseInducer'
p673
(i__main__
ClassDefinition
p674
(dp675
g4
I1
sg5
I01
sg6
g673
sg7
S'TOrange'
p676
sg9
I00
sg10
(lp677
sg12
(lp678
(S'int'
p679
S'maxItemSets'
p680
S'max_item_sets'
p681
S'maximal number of itemsets (increase if you want)'
p682
I0
I0
I01
Ntp683
a(S'float'
p684
S'confidence'
p685
g685
S'required confidence'
p686
I0
I0
I01
Ntp687
a(S'float'
p688
S'support'
p689
g689
S'required support'
p690
I0
I0
I01
Ntp691
a(S'bool'
p692
S'storeExamples'
p693
S'store_examples'
p694
S'stores examples corresponding to rules'
p695
I0
I0
I01
Ntp696
asg29
(dp697
sbsS'TFilter_sameExample'
p698
(i__main__
ClassDefinition
p699
(dp700
g4
I1
sg5
I01
sg6
g698
sg7
S'TFilter'
p701
sg9
I00
sg10
(lp702
sg12
(lp703
(S'TExample'
p704
S'example'
p705
g705
S'example with which examples are compared'
p706
I0
I0
I00
Ntp707
a(S'bool'
p708
S'negate'
p709
g709
S'if true, filter output should be negated.'
p710
I0
I0
I01
Ntp711
a(S'TDomain'
p712
S'domain'
p713
g713
S'domain to which the examples are converted (if needed)'
p714
I0
I0
I00
Ntp715
asg29
(dp716
sbsS'TRuleClassifierConstructor'
p717
(i__main__
ClassDefinition
p718
(dp719
g4
I1
sg5
I01
sg6
g717
sg7
S'TOrange'
p720
sg9
I01
sg10
(lp721
sg12
(lp722
sg29
(dp723
sbsS'TMakeRandomIndicesMultiple'
p724
(i__main__
ClassDefinition
p725
(dp726
g4
I1
sg5
I01
sg6
g724
sg7
S'TMakeRandomIndices'
p727
sg9
I00
sg10
(lp728
sg12
(lp729
(S'int'
p730
S'stratified'
p731
g731
S' requests stratified distributions'
p732
I0
I0
I01
S'MakeRandomIndices_Stratification'
p733
tp734
a(S'int'
p735
S'randseed'
p736
g736
S'a seed for random generator'
p737
I0
I0
I01
Ntp738
a(S'TRandomGenerator'
p739
S'randomGenerator'
p740
S'random_generator'
p741
S'a random generator'
p742
I0
I0
I00
Ntp743
asg29
(dp744
sbsS'TLearnerFD'
p745
(i__main__
ClassDefinition
p746
(dp747
g4
I1
sg5
I01
sg6
g745
sg7
S'TLearner'
p748
sg9
I00
sg10
(lp749
sg12
(lp750
(S'TDomain'
p751
S'domain'
p752
g752
S'domain'
p753
I0
I0
I00
Ntp754
ag110
asg29
(dp755
sbsS'TP2NN'
p756
(i__main__
ClassDefinition
p757
(dp758
g4
I1
sg5
I01
sg6
g756
sg7
S'TPNN'
p759
sg9
I00
sg10
(lp760
sg12
(lp761
(S'int'
p762
S'dimensions'
p763
g763
S'the number of dimensions'
p764
I01
I0
I01
Ntp765
a(S'TFloatList'
p766
S'offsets'
p767
g767
S'offsets to subtract from the attribute values'
p768
I0
I0
I00
Ntp769
a(S'TFloatList'
p770
S'normalizers'
p771
g771
S'number to divide the values by'
p772
I0
I0
I00
Ntp773
a(S'TFloatList'
p774
S'averages'
p775
g775
S'numbers to use instead of the missing'
p776
I0
I0
I00
Ntp777
a(S'bool'
p778
S'normalizeExamples'
p779
S'normalize_examples'
p780
S'if true, attribute values are divided to sum up to 1'
p781
I0
I0
I01
Ntp782
a(S'int'
p783
S'nExamples'
p784
S'n_examples'
p785
S'the number of examples'
p786
I01
I0
I01
Ntp787
a(S'int'
p788
S'law'
p789
g789
S'law'
p790
I0
I0
I01
Ntp791
ag307
ag94
ag99
asg29
(dp792
sbsS'TTreeSplitConstructor'
p793
(i__main__
ClassDefinition
p794
(dp795
g4
I1
sg5
I01
sg6
g793
sg7
S'TOrange'
p796
sg9
I01
sg10
(lp797
sg12
(lp798
(S'float'
p799
S'minSubset'
p800
S'min_subset'
p801
S'minimal number of examples in a subset'
p802
I0
I0
I01
Ntp803
asg29
(dp804
sbsS'TMultiClassifier'
p805
(i__main__
ClassDefinition
p806
(dp807
g4
I1
sg5
I01
sg6
g805
sg7
S'TOrange'
p808
sg9
I00
sg10
(lp809
sg12
(lp810
(S'TVarList'
p811
S'classVars'
p812
S'class_vars'
p813
S'class variables'
p814
I0
I0
I00
Ntp815
a(S'TDomain'
p816
S'domain'
p817
g817
S'domain'
p818
I0
I0
I00
Ntp819
a(S'bool'
p820
S'computesProbabilities'
p821
S'computes_probabilities'
p822
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p823
I0
I0
I01
Ntp824
asg29
(dp825
sbsS'TMapIntValue'
p826
(i__main__
ClassDefinition
p827
(dp828
g4
I1
sg5
I01
sg6
g826
sg7
S'TTransformValue'
p829
sg9
I00
sg10
(lp830
sg12
(lp831
(S'TIntList'
p832
S'mapping'
p833
g833
S'a lookup table'
p834
I0
I0
I00
Ntp835
a(S'TTransformValue'
p836
S'subTransform'
p837
S'sub_transform'
p838
S'transformation executed prior to this'
p839
I0
I0
I00
Ntp840
asg29
(dp841
sbsS'TDistributionAssessor_Kramer'
p842
(i__main__
ClassDefinition
p843
(dp844
g4
I1
sg5
I01
sg6
g842
sg7
S'TDistributionAssessor'
p845
sg9
I00
sg10
(lp846
sg12
(lp847
sg29
(dp848
sbsS'TTreeExampleSplitter_UnknownsToBranch'
p849
(i__main__
ClassDefinition
p850
(dp851
g4
I1
sg5
I01
sg6
g849
sg7
S'TTreeExampleSplitter'
p852
sg9
I00
sg10
(lp853
sg12
(lp854
sg29
(dp855
sbsS'TMajorityLearner'
p856
(i__main__
ClassDefinition
p857
(dp858
g4
I1
sg5
I01
sg6
g856
sg7
S'TLearner'
p859
sg9
I00
sg10
(lp860
sg12
(lp861
(S'TProbabilityEstimatorConstructor'
p862
S'estimatorConstructor'
p863
S'estimator_constructor'
p864
S'constructs probability estimator'
p865
I0
I0
I00
Ntp866
a(S'TDistribution'
p867
S'aprioriDistribution'
p868
S'apriori_distribution'
p869
S'apriori class distribution'
p870
I0
I0
I00
Ntp871
ag110
asg29
(dp872
sbsS'TEVDistGetter_Standard'
p873
(i__main__
ClassDefinition
p874
(dp875
g4
I1
sg5
I01
sg6
g873
sg7
S'TEVDistGetter'
p876
sg9
I00
sg10
(lp877
sg12
(lp878
(S'TEVDistList'
p879
S'dists'
p880
g880
S'EVC distribution (sorted by rule length, 0 = for rules without conditions)'
p881
I0
I0
I00
Ntp882
asg29
(dp883
sbsS'TFeatureByIM'
p884
(i__main__
ClassDefinition
p885
(dp886
g4
I1
sg5
I01
sg6
g884
sg7
S'TFeatureInducer'
p887
sg9
I00
sg10
(lp888
sg12
(lp889
(S'TIMConstructor'
p890
S'IMconstructor'
p891
g891
S'incompatibility matrix constructor'
p892
I0
I0
I00
Ntp893
a(S'TClustersFromIM'
p894
S'clustersFromIM'
p895
S'clusters_from_IM'
p896
S'clustering algorithm'
p897
I0
I0
I00
Ntp898
a(S'int'
p899
S'completion'
p900
g900
S' decides how to determine the class for points not covered by any cluster'
p901
I0
I0
I01
S'FeatureByIM_Completion'
p902
tp903
asg29
(dp904
S'Completion'
p905
(lp906
(S'NoCompletion'
p907
S'completion_no'
p908
tp909
a(S'CompletionByDefault'
p910
S'completion_default'
p911
tp912
a(S'CompletionByBayes'
p913
S'completion_bayes'
p914
tp915
assbsS'TMeasureAttributeFromProbabilities'
p916
(i__main__
ClassDefinition
p917
(dp918
g4
I1
sg5
I01
sg6
g916
sg7
S'TMeasureAttribute'
p919
sg9
I01
sg10
(lp920
sg12
(lp921
(S'TProbabilityEstimatorConstructor'
p922
S'estimatorConstructor'
p923
S'estimator_constructor'
p924
S'probability estimator (none by default)'
p925
I0
I0
I00
Ntp926
a(S'TConditionalProbabilityEstimatorConstructor'
p927
S'conditionalEstimatorConstructor'
p928
S'conditional_estimator_constructor'
p929
S'conditional probability estimator (none by default)'
p930
I0
I0
I00
Ntp931
a(S'int'
p932
S'unknownsTreatment'
p933
S'unknowns_treatment'
p934
S' treatment of unknown values'
p935
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p936
tp937
a(S'int'
p938
S'needs'
p939
g939
S' describes what kind of data is needed for computation'
p940
I0
I0
I01
S'MeasureAttribute_Needs'
p941
tp942
a(S'bool'
p943
S'handlesDiscrete'
p944
S'handles_discrete'
p945
S'tells whether the measure can handle discrete attributes'
p946
I0
I0
I01
Ntp947
a(S'bool'
p948
S'handlesContinuous'
p949
S'handles_continuous'
p950
S'tells whether the measure can handle continuous attributes'
p951
I0
I0
I01
Ntp952
a(S'bool'
p953
S'computesThresholds'
p954
S'computes_thresholds'
p955
S'tells whether the measure can compute threshold functions/maxima for continuous attributes'
p956
I0
I0
I01
Ntp957
asg29
(dp958
sbsS'TProbabilityEstimatorConstructor_relative'
p959
(i__main__
ClassDefinition
p960
(dp961
g4
I1
sg5
I01
sg6
g959
sg7
S'TProbabilityEstimatorConstructor'
p962
sg9
I00
sg10
(lp963
sg12
(lp964
sg29
(dp965
sbsS'TClassifierByLookupTable3'
p966
(i__main__
ClassDefinition
p967
(dp968
g4
I1
sg5
I01
sg6
g966
sg7
S'TClassifierByLookupTable'
p969
sg9
I00
sg10
(lp970
sg12
(lp971
(S'TVariable'
p972
S'variable1'
p973
g973
S'the first attribute used for classification'
p974
I01
I0
I00
Ntp975
a(S'TVariable'
p976
S'variable2'
p977
g977
S'the second attribute used for classification'
p978
I01
I0
I00
Ntp979
a(S'TVariable'
p980
S'variable3'
p981
g981
S'the third attribute used for classification'
p982
I01
I0
I00
Ntp983
a(S'int'
p984
S'noOfValues1'
p985
S'no_of_values1'
p986
S'number of values of the first attribute'
p987
I01
I0
I01
Ntp988
a(S'int'
p989
S'noOfValues2'
p990
S'no_of_values2'
p991
S'number of values of the second attribute'
p992
I01
I0
I01
Ntp993
a(S'int'
p994
S'noOfValues3'
p995
S'no_of_values3'
p996
S'number of values of the third attribute'
p997
I01
I0
I01
Ntp998
a(S'TEFMDataDescription'
p999
S'dataDescription'
p1000
S'data_description'
p1001
S'data description'
p1002
I0
I0
I00
Ntp1003
ag85
ag89
ag94
ag99
asg29
(dp1004
sbsS'TImputerConstructor_maximal'
p1005
(i__main__
ClassDefinition
p1006
(dp1007
g4
I1
sg5
I01
sg6
g1005
sg7
S'TImputerConstructor'
p1008
sg9
I00
sg10
(lp1009
sg12
(lp1010
g180
asg29
(dp1011
sbsS'TRuleBeamRefiner'
p1012
(i__main__
ClassDefinition
p1013
(dp1014
g4
I1
sg5
I01
sg6
g1012
sg7
S'TOrange'
p1015
sg9
I01
sg10
(lp1016
sg12
(lp1017
sg29
(dp1018
sbsS'TSubsetsGenerator_iterator'
p1019
(i__main__
ClassDefinition
p1020
(dp1021
g4
I1
sg5
I01
sg6
g1019
sg7
S'TOrange'
p1022
sg9
I01
sg10
(lp1023
sg12
(lp1024
g526
asg29
(dp1025
sbsS'TEquiDistDiscretizer'
p1026
(i__main__
ClassDefinition
p1027
(dp1028
g4
I1
sg5
I01
sg6
g1026
sg7
S'TDiscretizer'
p1029
sg9
I00
sg10
(lp1030
sg12
(lp1031
(S'int'
p1032
S'numberOfIntervals'
p1033
(g1033
S'n'
p1034
tp1035
S' number of intervals'
p1036
I0
I0
I01
Ntp1037
a(S'float'
p1038
S'firstCut'
p1039
S'first_cut'
p1040
S'the first cut-off point'
p1041
I0
I0
I01
Ntp1042
a(S'float'
p1043
S'step'
p1044
g1044
S'step (width of interval)'
p1045
I0
I0
I01
Ntp1046
ag840
asg29
(dp1047
sbsS'TValueFilter_string'
p1048
(i__main__
ClassDefinition
p1049
(dp1050
g4
I1
sg5
I01
sg6
g1048
sg7
S'TValueFilter'
p1051
sg9
I00
sg10
(lp1052
sg12
(lp1053
(S'string'
p1054
S'min'
p1055
(g1055
S'ref'
p1056
tp1057
S' reference value (lower bound for interval operators)'
p1058
I0
I0
I01
Ntp1059
a(S'string'
p1060
S'max'
p1061
g1061
S'upper bound for interval operators'
p1062
I0
I0
I01
Ntp1063
a(S'int'
p1064
S'oper'
p1065
g1065
S' operator'
p1066
I0
I0
I01
S'ValueFilter_Operator'
p1067
tp1068
a(S'bool'
p1069
S'caseSensitive'
p1070
S'case_sensitive'
p1071
S'if true (default), the operator is case sensitive'
p1072
I0
I0
I01
Ntp1073
a(S'int'
p1074
S'position'
p1075
g1075
S"attribute's position in domain"
p1076
I0
I0
I01
Ntp1077
a(S'int'
p1078
S'acceptSpecial'
p1079
S'accept_special'
p1080
S'tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)'
p1081
I0
I0
I01
Ntp1082
asg29
(dp1083
sbsS'TFindNearest_BruteForce'
p1084
(i__main__
ClassDefinition
p1085
(dp1086
g4
I1
sg5
I01
sg6
g1084
sg7
S'TFindNearest'
p1087
sg9
I00
sg10
(lp1088
sg12
(lp1089
(S'TExamplesDistance'
p1090
S'distance'
p1091
g1091
S'metrics'
p1092
I0
I0
I00
Ntp1093
a(S'TExampleGenerator'
p1094
S'examples'
p1095
g1095
S'a list of stored examples'
p1096
I0
I0
I00
Ntp1097
a(S'int'
p1098
S'weightID'
p1099
S'weight_ID'
p1100
S'weight to use when counting examples'
p1101
I0
I0
I01
Ntp1102
a(S'int'
p1103
S'distanceID'
p1104
S'distance_ID'
p1105
S'id of meta attribute where the distance should be stored (0 = no storing)'
p1106
I0
I0
I01
Ntp1107
a(S'bool'
p1108
S'includeSame'
p1109
S'include_same'
p1110
S'tells whether to include examples that are same as the reference example'
p1111
I0
I0
I01
Ntp1112
asg29
(dp1113
sbsS'TRuleBeamInitializer'
p1114
(i__main__
ClassDefinition
p1115
(dp1116
g4
I1
sg5
I01
sg6
g1114
sg7
S'TOrange'
p1117
sg9
I01
sg10
(lp1118
sg12
(lp1119
sg29
(dp1120
sbsS'TMeasureAttribute_relevance'
p1121
(i__main__
ClassDefinition
p1122
(dp1123
g4
I1
sg5
I01
sg6
g1121
sg7
S'TMeasureAttributeFromProbabilities'
p1124
sg9
I00
sg10
(lp1125
sg12
(lp1126
g926
ag931
ag937
ag942
ag947
ag952
ag957
asg29
(dp1127
sbsS'TFilter_hasSpecial'
p1128
(i__main__
ClassDefinition
p1129
(dp1130
g4
I1
sg5
I01
sg6
g1128
sg7
S'TFilter'
p1131
sg9
I00
sg10
(lp1132
sg12
(lp1133
g711
ag715
asg29
(dp1134
sbsS'TDiscDistribution'
p1135
(i__main__
ClassDefinition
p1136
(dp1137
g4
I1
sg5
I01
sg6
g1135
sg7
S'TDistribution'
p1138
sg9
I00
sg10
(lp1139
sg12
(lp1140
(S'TFloatList'
p1141
S'variances'
p1142
g1142
S'variances'
p1143
I0
I0
I00
Ntp1144
a(S'TVariable'
p1145
S'variable'
p1146
g1146
S'attribute descriptor (optional)'
p1147
I0
I0
I00
Ntp1148
a(S'float'
p1149
S'unknowns'
p1150
g1150
S'number of unknown values'
p1151
I0
I0
I01
Ntp1152
a(S'float'
p1153
S'abs'
p1154
g1154
S'sum of frequencies (not including unknown values!)'
p1155
I0
I0
I01
Ntp1156
a(S'float'
p1157
S'cases'
p1158
g1158
S"number of cases; as abs, but doesn't change at *= and normalize()"
p1159
I0
I0
I01
Ntp1160
a(S'bool'
p1161
S'normalized'
p1162
g1162
S'distribution is normalized'
p1163
I0
I0
I01
Ntp1164
a(S'bool'
p1165
S'supportsDiscrete'
p1166
S'supports_discrete'
p1167
S'distribution supports discrete interface'
p1168
I01
I0
I01
Ntp1169
a(S'bool'
p1170
S'supportsContinuous'
p1171
S'supports_continuous'
p1172
S'distribution supports continuous interface'
p1173
I01
I0
I01
Ntp1174
a(S'TRandomGenerator'
p1175
S'randomGenerator'
p1176
S'random_generator'
p1177
S'random generator; initialized when needed, if not given earlier'
p1178
I0
I0
I00
Ntp1179
asg29
(dp1180
sbsS'TBayesLearner'
p1181
(i__main__
ClassDefinition
p1182
(dp1183
g4
I1
sg5
I01
sg6
g1181
sg7
S'TLearner'
p1184
sg9
I00
sg10
(lp1185
sg12
(lp1186
(S'TProbabilityEstimatorConstructor'
p1187
S'estimatorConstructor'
p1188
S'estimator_constructor'
p1189
S'constructs a probability estimator for P(C)'
p1190
I0
I0
I00
Ntp1191
a(S'TConditionalProbabilityEstimatorConstructor'
p1192
S'conditionalEstimatorConstructor'
p1193
S'conditional_estimator_constructor'
p1194
S'constructs a probability estimator for P(C|A) '
p1195
I0
I0
I00
Ntp1196
a(S'TConditionalProbabilityEstimatorConstructor'
p1197
S'conditionalEstimatorConstructorContinuous'
p1198
S'conditional_estimator_constructor_continuous'
p1199
S'constructs a probability estimator for P(C|A) for continuous attributes'
p1200
I0
I0
I00
Ntp1201
a(S'bool'
p1202
S'normalizePredictions'
p1203
S'normalize_predictions'
p1204
S'instructs learner to construct a classifier that normalizes probabilities'
p1205
I0
I0
I01
Ntp1206
a(S'bool'
p1207
S'adjustThreshold'
p1208
S'adjust_threshold'
p1209
S'adjust probability thresholds (for binary classes only)'
p1210
I0
I0
I01
Ntp1211
ag110
asg29
(dp1212
sbsS'TIMByRelief'
p1213
(i__main__
ClassDefinition
p1214
(dp1215
g4
I1
sg5
I01
sg6
g1213
sg7
S'TIMConstructor'
p1216
sg9
I00
sg10
(lp1217
sg12
(lp1218
(S'TExamplesDistance_Relief'
p1219
S'distance'
p1220
g1220
S'distance measure'
p1221
I0
I0
I00
Ntp1222
a(S'float'
p1223
S'k'
p1224
g1224
S'number of neighbours'
p1225
I0
I0
I01
Ntp1226
a(S'float'
p1227
S'm'
p1228
g1228
S'number of reference examples'
p1229
I0
I0
I01
Ntp1230
a(S'float'
p1231
S'kFromColumns'
p1232
S'k_from_columns'
p1233
S'if positive, number of neighbours is #columns*kFromColumns'
p1234
I0
I0
I01
Ntp1235
a(S'bool'
p1236
S'ignoreSameExample'
p1237
S'ignore_same_example'
p1238
S'does not put reference example into M'
p1239
I0
I0
I01
Ntp1240
a(S'bool'
p1241
S'convertToBinary'
p1242
S'convert_to_binary'
p1243
S'convert to binary class (hit-miss)'
p1244
I0
I0
I01
Ntp1245
a(S'bool'
p1246
S'correctClassFirst'
p1247
S'correct_class_first'
p1248
S'puts the correct class proportion to the first place'
p1249
I0
I0
I01
Ntp1250
a(S'bool'
p1251
S'allExamples'
p1252
S'all_examples'
p1253
S'uses all examples for reference examples'
p1254
I0
I0
I01
Ntp1255
a(S'bool'
p1256
S'allSameNeighbours'
p1257
S'all_same_neighbours'
p1258
S'uses all the examples same to the reference as neighbours'
p1259
I0
I0
I01
Ntp1260
a(S'bool'
p1261
S'recordRowExamples'
p1262
S'record_row_examples'
p1263
S'enables creation of rowExample list'
p1264
I0
I0
I01
Ntp1265
asg29
(dp1266
sbsNNsS'TConditionalProbabilityEstimator'
p1267
(i__main__
ClassDefinition
p1268
(dp1269
g4
I1
sg5
I01
sg6
g1267
sg7
S'TOrange'
p1270
sg9
I01
sg10
(lp1271
sg12
(lp1272
g141
ag146
asg29
(dp1273
sbsS'TColumnAssessor_Laplace'
p1274
(i__main__
ClassDefinition
p1275
(dp1276
g4
I1
sg5
I01
sg6
g1274
sg7
S'TColumnAssessor'
p1277
sg9
I00
sg10
(lp1278
sg12
(lp1279
sg29
(dp1280
sbsS'TPreprocessor_addGaussianNoise'
p1281
(i__main__
ClassDefinition
p1282
(dp1283
g4
I1
sg5
I01
sg6
g1281
sg7
S'TPreprocessor'
p1284
sg9
I00
sg10
(lp1285
sg12
(lp1286
(S'TVariableFloatMap'
p1287
S'deviations'
p1288
g1288
S'deviations individual attribute values'
p1289
I0
I0
I00
Ntp1290
a(S'float'
p1291
S'defaultDeviation'
p1292
S'default_deviation'
p1293
S'default deviation'
p1294
I0
I0
I01
Ntp1295
a(S'TRandomGenerator'
p1296
S'randomGenerator'
p1297
S'random_generator'
p1298
S'random number generator'
p1299
I0
I0
I00
Ntp1300
asg29
(dp1301
sbsS'TRuleStoppingCriteria_NegativeDistribution'
p1302
(i__main__
ClassDefinition
p1303
(dp1304
g4
I1
sg5
I01
sg6
g1302
sg7
S'TRuleStoppingCriteria'
p1305
sg9
I00
sg10
(lp1306
sg12
(lp1307
sg29
(dp1308
sbsS'TTreeSplitConstructor_ExhaustiveBinary'
p1309
(i__main__
ClassDefinition
p1310
(dp1311
g4
I1
sg5
I01
sg6
g1309
sg7
S'TTreeSplitConstructor_Measure'
p1312
sg9
I00
sg10
(lp1313
sg12
(lp1314
(S'TMeasureAttribute'
p1315
S'measure'
p1316
g1316
S'attribute quality measure'
p1317
I0
I0
I00
Ntp1318
a(S'float'
p1319
S'worstAcceptable'
p1320
S'worst_acceptable'
p1321
S'the worst acceptable quality of the attribute'
p1322
I0
I0
I01
Ntp1323
ag803
asg29
(dp1324
sbsS'TTreeClassifier'
p1325
(i__main__
ClassDefinition
p1326
(dp1327
g4
I1
sg5
I01
sg6
g1325
sg7
S'TClassifierFD'
p1328
sg9
I00
sg10
(lp1329
sg12
(lp1330
(S'TTreeNode'
p1331
S'tree'
p1332
g1332
S'decision tree'
p1333
I0
I0
I00
Ntp1334
a(S'TTreeDescender'
p1335
S'descender'
p1336
g1336
S'object that descends down the tree'
p1337
I0
I0
I00
Ntp1338
ag307
ag94
ag99
asg29
(dp1339
sbsS'TFilter_compatibleExample'
p1340
(i__main__
ClassDefinition
p1341
(dp1342
g4
I1
sg5
I01
sg6
g1340
sg7
S'TFilter'
p1343
sg9
I00
sg10
(lp1344
sg12
(lp1345
(S'TExample'
p1346
S'example'
p1347
g1347
S'example with which examples are compared'
p1348
I0
I0
I00
Ntp1349
ag711
ag715
asg29
(dp1350
sbsS'TRemoveRedundant'
p1351
(i__main__
ClassDefinition
p1352
(dp1353
g4
I1
sg5
I01
sg6
g1351
sg7
S'TOrange'
p1354
sg9
I01
sg10
(lp1355
sg12
(lp1356
(S'bool'
p1357
S'keepValues'
p1358
S'keep_values'
p1359
S'keep an attribute if number values is only smaller, not one'
p1360
I0
I0
I01
Ntp1361
asg29
(dp1362
sbsS'TExamplesDistanceConstructor_Hamming'
p1363
(i__main__
ClassDefinition
p1364
(dp1365
g4
I1
sg5
I01
sg6
g1363
sg7
S'TExamplesDistanceConstructor'
p1366
sg9
I00
sg10
(lp1367
sg12
(lp1368
(S'bool'
p1369
S'ignoreClass'
p1370
S'ignore_class'
p1371
S'if true (default), class value is ignored when computing distances'
p1372
I0
I0
I01
Ntp1373
a(S'bool'
p1374
S'ignoreUnknowns'
p1375
S'ignore_unknowns'
p1376
S'if true (default: false) unknown values are ignored in computation'
p1377
I0
I0
I01
Ntp1378
a(S'bool'
p1379
S'ignoreClass'
p1380
S'ignore_class'
p1381
S'if true (default), class value is ignored when computing distances'
p1382
I0
I0
I01
Ntp1383
asg29
(dp1384
sbsS'TSomeValue'
p1385
(i__main__
ClassDefinition
p1386
(dp1387
g4
I1
sg5
I01
sg6
g1385
sg7
S'TOrange'
p1388
sg9
I01
sg10
(lp1389
sg12
(lp1390
sg29
(dp1391
sbsS'TRuleClassifierConstructor_firstRule'
p1392
(i__main__
ClassDefinition
p1393
(dp1394
g4
I1
sg5
I01
sg6
g1392
sg7
S'TRuleClassifierConstructor'
p1395
sg9
I00
sg10
(lp1396
sg12
(lp1397
sg29
(dp1398
sbsS'TStressFunc'
p1399
(i__main__
ClassDefinition
p1400
(dp1401
g115
I1
sg116
I0
sg117
g1399
sg118
S'TOrange'
p1402
sg120
I01
sg121
(lp1403
sg123
(lp1404
sg125
(dp1405
sbsS'TStopDistributionClustering_noProfit'
p1406
(i__main__
ClassDefinition
p1407
(dp1408
g4
I1
sg5
I01
sg6
g1406
sg7
S'TStopDistributionClustering'
p1409
sg9
I00
sg10
(lp1410
sg12
(lp1411
(S'float'
p1412
S'minProfitProportion'
p1413
S'min_profit_proportion'
p1414
S'minimal allowable profit proportion'
p1415
I0
I0
I01
Ntp1416
asg29
(dp1417
sbsS'TBiModalDiscretization'
p1418
(i__main__
ClassDefinition
p1419
(dp1420
g4
I1
sg5
I01
sg6
g1418
sg7
S'TDiscretization'
p1421
sg9
I00
sg10
(lp1422
sg12
(lp1423
(S'bool'
p1424
S'splitInTwo'
p1425
S'split_in_two'
p1426
S'if true (default), flanks are merged into a single interval'
p1427
I0
I0
I01
Ntp1428
asg29
(dp1429
sbsS'TColoredIG'
p1430
(i__main__
ClassDefinition
p1431
(dp1432
g4
I1
sg5
I01
sg6
g1430
sg7
S'TGeneralExampleClustering'
p1433
sg9
I00
sg10
(lp1434
sg12
(lp1435
(S'TIG'
p1436
S'ig'
p1437
g1437
S'incompatibility graph'
p1438
I0
I0
I00
Ntp1439
a(S'TIntList'
p1440
S'colors'
p1441
g1441
S'colors (one element corresponding to each ig node)'
p1442
I0
I0
I00
Ntp1443
asg29
(dp1444
sbsS'TMeasureAttribute'
p1445
(i__main__
ClassDefinition
p1446
(dp1447
g4
I1
sg5
I01
sg6
g1445
sg7
S'TOrange'
p1448
sg9
I00
sg10
(lp1449
sg12
(lp1450
g942
ag947
ag952
ag957
asg29
(dp1451
S'Needs'
p1452
(lp1453
(S'Contingency_Class'
p1454
I0
tp1455
a(S'DomainContingency'
p1456
I1
tp1457
a(S'Generator'
p1458
I2
tp1459
asS'UnknownsTreatment'
p1460
(lp1461
(S'IgnoreUnknowns'
p1462
I0
tp1463
a(S'ReduceByUnknowns'
p1464
I1
tp1465
a(S'UnknownsToCommon'
p1466
I2
tp1467
a(S'UnknownsAsValue'
p1468
I3
tp1469
assbsS'TRuleEvaluator'
p1470
(i__main__
ClassDefinition
p1471
(dp1472
g4
I1
sg5
I01
sg6
g1470
sg7
S'TOrange'
p1473
sg9
I01
sg10
(lp1474
sg12
(lp1475
sg29
(dp1476
sbsS'TStringVariable'
p1477
(i__main__
ClassDefinition
p1478
(dp1479
g4
I1
sg5
I01
sg6
g1477
sg7
S'TVariable'
p1480
sg9
I00
sg10
(lp1481
sg12
(lp1482
g349
ag353
ag357
ag362
ag367
ag372
ag377
asg29
(dp1483
sbsS'TAssessIMQuality'
p1484
(i__main__
ClassDefinition
p1485
(dp1486
g4
I1
sg5
I01
sg6
g1484
sg7
S'TOrange'
p1487
sg9
I00
sg10
(lp1488
sg12
(lp1489
(S'TColumnAssessor'
p1490
S'columnAssessor'
p1491
S'column_assessor'
p1492
S'column quality assessor'
p1493
I0
I0
I00
Ntp1494
asg29
(dp1495
sbsS'TGraphAsTree'
p1496
(i__main__
ClassDefinition
p1497
(dp1498
g4
I1
sg5
I01
sg6
g1496
sg7
S'TGraph'
p1499
sg9
I00
sg10
(lp1500
sg12
(lp1501
(S'int'
p1502
S'nVertices'
p1503
S'n_vertices'
p1504
S'the number of vertices'
p1505
I01
I0
I01
Ntp1506
a(S'int'
p1507
S'nEdgeTypes'
p1508
S'n_edge_types'
p1509
S'the number of edge types'
p1510
I01
I0
I01
Ntp1511
a(S'bool'
p1512
S'directed'
p1513
g1513
S'directed'
p1514
I01
I0
I01
Ntp1515
asg29
(dp1516
sbsS'TTreeExampleSplitter_IgnoreUnknowns'
p1517
(i__main__
ClassDefinition
p1518
(dp1519
g4
I1
sg5
I01
sg6
g1517
sg7
S'TTreeExampleSplitter'
p1520
sg9
I00
sg10
(lp1521
sg12
(lp1522
sg29
(dp1523
sbsS'TProbabilityEstimator_FromDistribution'
p1524
(i__main__
ClassDefinition
p1525
(dp1526
g4
I1
sg5
I01
sg6
g1524
sg7
S'TProbabilityEstimator'
p1527
sg9
I00
sg10
(lp1528
sg12
(lp1529
(S'TDistribution'
p1530
S'probabilities'
p1531
g1531
S'probabilities'
p1532
I0
I0
I00
Ntp1533
a(S'bool'
p1534
S'supportsDiscrete'
p1535
S'supports_discrete'
p1536
S'can estimate probabilities of discrete attributes'
p1537
I01
I0
I01
Ntp1538
a(S'bool'
p1539
S'supportsContinuous'
p1540
S'supports_continuous'
p1541
S'can estimate probabilities of continuous attributes'
p1542
I01
I0
I01
Ntp1543
asg29
(dp1544
sbsS'TC45TreeNode'
p1545
(i__main__
ClassDefinition
p1546
(dp1547
g4
I1
sg5
I01
sg6
g1545
sg7
S'TOrange'
p1548
sg9
I00
sg10
(lp1549
sg12
(lp1550
(S'int'
p1551
S'nodeType'
p1552
S'node_type'
p1553
S' 0 = leaf,  1 = branch,  2 = cut,  3 = subset'
p1554
I0
I0
I01
S'C45TreeNode_NodeType'
p1555
tp1556
a(S'TValue'
p1557
S'leaf'
p1558
g1558
S'most frequent class at this node'
p1559
I0
I0
I01
Ntp1560
a(S'float'
p1561
S'items'
p1562
g1562
S'no of items at this node'
p1563
I0
I0
I01
Ntp1564
a(S'TDiscDistribution'
p1565
S'classDist'
p1566
S'class_dist'
p1567
S'class distribution of items'
p1568
I0
I0
I00
Ntp1569
a(S'TVariable'
p1570
S'tested'
p1571
g1571
S'attribute referenced in test'
p1572
I0
I0
I00
Ntp1573
a(S'float'
p1574
S'cut'
p1575
g1575
S'threshold for continuous attribute'
p1576
I0
I0
I01
Ntp1577
a(S'float'
p1578
S'lower'
p1579
g1579
S'lower limit of soft threshold'
p1580
I0
I0
I01
Ntp1581
a(S'float'
p1582
S'upper'
p1583
g1583
S'upper limit of soft threshold'
p1584
I0
I0
I01
Ntp1585
a(S'TIntList'
p1586
S'mapping'
p1587
g1587
S'mapping for discrete value'
p1588
I0
I0
I00
Ntp1589
a(S'TC45TreeNodeList'
p1590
S'branch'
p1591
g1591
S'branch[x] = (sub)tree for outcome x */'
p1592
I0
I0
I00
Ntp1593
asg29
(dp1594
S'NodeType'
p1595
(lp1596
(S'Leaf'
p1597
S'0'
p1598
tp1599
a(S'Branch'
p1600
I1
tp1601
a(S'Cut'
p1602
I2
tp1603
a(S'Subset'
p1604
I3
tp1605
assbsS'TDistributionList'
p1606
(ipyprops
ClassDefinition
p1607
(dp1608
g151
I0
sg152
I01
sg153
g1606
sg154
g155
sg156
I0
sg157
(lp1609
sg159
(lp1610
sg161
(dp1611
sbsS'TTreeDescender_UnknownMergeAsBranchSizes'
p1612
(i__main__
ClassDefinition
p1613
(dp1614
g4
I1
sg5
I01
sg6
g1612
sg7
S'TTreeDescender'
p1615
sg9
I0
sg10
(lp1616
sg12
(lp1617
sg29
(dp1618
sbsS'THierarchicalClusterOrdering'
p1619
(i__main__
ClassDefinition
p1620
(dp1621
g4
I1
sg5
I01
sg6
g1619
sg7
S'TOrange'
p1622
sg9
I00
sg10
(lp1623
sg12
(lp1624
(S'TProgressCallback'
p1625
S'progress_callback'
p1626
g1626
S'progress callback function'
p1627
I0
I0
I00
Ntp1628
asg29
(dp1629
sbsS'TLogitClassifierState'
p1630
(i__main__
ClassDefinition
p1631
(dp1632
g4
I1
sg5
I01
sg6
g1630
sg7
S'TOrange'
p1633
sg9
I00
sg10
(lp1634
sg12
(lp1635
(S'TRuleList'
p1636
S'rules'
p1637
g1637
g589
I0
I0
I00
Ntp1638
a(S'TExampleTable'
p1639
S'examples'
p1640
g1640
g589
I0
I0
I00
Ntp1641
a(S'TFloatList'
p1642
S'avgProb'
p1643
S'avg_prob'
p1644
g589
I0
I0
I00
Ntp1645
a(S'TFloatList'
p1646
S'avgPriorProb'
p1647
S'avg_prior_prob'
p1648
g589
I0
I0
I00
Ntp1649
a(S'TIntList'
p1650
S'prefixRules'
p1651
S'prefix_rules'
p1652
g589
I0
I0
I00
Ntp1653
asg29
(dp1654
sbsS'TExamplesDistance'
p1655
(i__main__
ClassDefinition
p1656
(dp1657
g4
I1
sg5
I01
sg6
g1655
sg7
S'TOrange'
p1658
sg9
I01
sg10
(lp1659
sg12
(lp1660
sg29
(dp1661
sbsS'TFileExampleGenerator'
p1662
(i__main__
ClassDefinition
p1663
(dp1664
g4
I1
sg5
I01
sg6
g1662
sg7
S'TExampleGenerator'
p1665
sg9
I01
sg10
(lp1666
sg12
(lp1667
(S'string'
p1668
S'filename'
p1669
g1669
S'filename'
p1670
I0
I0
I01
Ntp1671
a(S'int'
p1672
S'startDataPos'
p1673
S'start_data_pos'
p1674
S'starting position of the data in file'
p1675
I0
I0
I01
Ntp1676
a(S'int'
p1677
S'startDataLine'
p1678
S'start_data_line'
p1679
S'line in the file where the data starts'
p1680
I0
I0
I01
Ntp1681
ag322
ag326
asg29
(dp1682
sbsS'TMeasureAttribute_gainRatio'
p1683
(i__main__
ClassDefinition
p1684
(dp1685
g4
I1
sg5
I01
sg6
g1683
sg7
S'TMeasureAttributeFromProbabilities'
p1686
sg9
I00
sg10
(lp1687
sg12
(lp1688
g926
ag931
ag937
ag942
ag947
ag952
ag957
asg29
(dp1689
sbsS'TContingencyClassAttr'
p1690
(i__main__
ClassDefinition
p1691
(dp1692
g4
I1
sg5
I01
sg6
g1690
sg7
S'TContingencyClass'
p1693
sg9
I00
sg10
(lp1694
sg12
(lp1695
(S'TVariable'
p1696
S'outerVariable'
p1697
S'outer_variable'
p1698
S'outer attribute'
p1699
I0
I0
I00
Ntp1700
a(S'TVariable'
p1701
S'innerVariable'
p1702
S'inner_variable'
p1703
S'inner attribute'
p1704
I0
I0
I00
Ntp1705
a(S'int'
p1706
S'varType'
p1707
S'var_type'
p1708
S' outer attribute type'
p1709
I0
I0
I01
S'Variable_Type'
p1710
tp1711
a(S'TDistribution'
p1712
S'outerDistribution'
p1713
S'outer_distribution'
p1714
S'distribution of values of outer attributes'
p1715
I0
I0
I00
Ntp1716
a(S'TDistribution'
p1717
S'innerDistribution'
p1718
S'inner_distribution'
p1719
S'distribution of values of inner attributes'
p1720
I0
I0
I00
Ntp1721
a(S'TDistribution'
p1722
S'innerDistributionUnknown'
p1723
S'inner_distribution_unknown'
p1724
S'distribution of inner variable for examples where the outer value was unknown'
p1725
I0
I0
I00
Ntp1726
asg29
(dp1727
sbsS'TMissValuesGenerator'
p1728
(i__main__
ClassDefinition
p1729
(dp1730
g4
I1
sg5
I01
sg6
g1728
sg7
S'TChangeExampleGenerator'
p1731
sg9
I00
sg10
(lp1732
sg12
(lp1733
(S'TIntFloatList'
p1734
S'replaceProbabilities'
p1735
S'replace_probabilities'
p1736
S"probabilities for replacing attributes' values"
p1737
I0
I0
I00
Ntp1738
a(S'TRandomGenerator'
p1739
S'randomGenerator'
p1740
S'random_generator'
p1741
S'random generator'
p1742
I0
I0
I00
Ntp1743
ag322
ag326
asg29
(dp1744
sbsS'TLogRegClassifier'
p1745
(i__main__
ClassDefinition
p1746
(dp1747
g4
I1
sg5
I01
sg6
g1745
sg7
S'TClassifierFD'
p1748
sg9
I00
sg10
(lp1749
sg12
(lp1750
(S'TDomain'
p1751
S'continuizedDomain'
p1752
S'continuized_domain'
p1753
S'if absent, there is no continuous attributes in original domain'
p1754
I0
I0
I00
Ntp1755
a(S'TEFMDataDescription'
p1756
S'dataDescription'
p1757
S'data_description'
p1758
S'Data needed for classification in presence of undefined values'
p1759
I0
I0
I00
Ntp1760
a(S'TAttributedFloatList'
p1761
S'beta'
p1762
g1762
S'estimated beta coefficients for logistic regression'
p1763
I0
I0
I00
Ntp1764
a(S'TAttributedFloatList'
p1765
S'beta_se'
p1766
g1766
S'estimated standard errors for beta coefficients'
p1767
I0
I0
I00
Ntp1768
a(S'TAttributedFloatList'
p1769
S'wald_Z'
p1770
g1770
S'Wald Z statstic for beta coefficients'
p1771
I0
I0
I00
Ntp1772
a(S'TAttributedFloatList'
p1773
S'P'
p1774
g1774
S'estimated significances for beta coefficients'
p1775
I0
I0
I00
Ntp1776
a(S'float'
p1777
S'likelihood'
p1778
g1778
S"Likelihood: The likelihood function is the function which specifies the probability of the sample observed on the basis of a known model, as a function of the model's parameters. "
p1779
I0
I0
I01
Ntp1780
a(S'int'
p1781
S'fit_status'
p1782
g1782
S"Tells how the model fitting ended - either regularly (LogRegFitter.OK), or it was interrupted due to one of beta coefficients escaping towards infinity (LogRegFitter.Infinity) or since the values didn't converge (LogRegFitter.Divergence)."
p1783
I0
I0
I01
Ntp1784
a(S'TImputer'
p1785
S'imputer'
p1786
g1786
S'if present, it imputes unknown values'
p1787
I0
I0
I00
Ntp1788
ag307
ag94
ag99
asg29
(dp1789
sbsS'TEquiDistDiscretization'
p1790
(i__main__
ClassDefinition
p1791
(dp1792
g4
I1
sg5
I01
sg6
g1790
sg7
S'TDiscretization'
p1793
sg9
I00
sg10
(lp1794
sg12
(lp1795
(S'int'
p1796
S'numberOfIntervals'
p1797
(g1797
g1034
tp1798
S' number of intervals'
p1799
I0
I0
I01
Ntp1800
asg29
(dp1801
sbsS'TPreprocessor_select'
p1802
(i__main__
ClassDefinition
p1803
(dp1804
g4
I1
sg5
I01
sg6
g1802
sg7
S'TPreprocessor'
p1805
sg9
I00
sg10
(lp1806
sg12
(lp1807
(S'TVarList'
p1808
S'attributes'
p1809
g1809
S'tells which attributes to select'
p1810
I0
I0
I00
Ntp1811
asg29
(dp1812
sbsS'TSVMClassifierSparse'
p1813
(i__main__
ClassDefinition
p1814
(dp1815
g4
I1
sg5
I01
sg6
g1813
sg7
S'TSVMClassifier'
p1816
sg9
I00
sg10
(lp1817
sg12
(lp1818
(S'bool'
p1819
S'useNonMeta'
p1820
S'use_non_meta'
p1821
S'include non meta attributes'
p1822
I0
I0
I01
Ntp1823
ag261
ag265
ag269
ag274
ag279
ag284
ag288
ag293
ag298
ag303
ag307
ag94
ag99
asg29
(dp1824
sbsS'TFilter_disjunction'
p1825
(i__main__
ClassDefinition
p1826
(dp1827
g4
I1
sg5
I01
sg6
g1825
sg7
S'TFilter'
p1828
sg9
I00
sg10
(lp1829
sg12
(lp1830
(S'TFilterList'
p1831
S'filters'
p1832
g1832
S'a list of filters;'
p1833
I0
I0
I00
Ntp1834
ag711
ag715
asg29
(dp1835
sbsS'TMeasureAttribute_gini'
p1836
(i__main__
ClassDefinition
p1837
(dp1838
g4
I1
sg5
I01
sg6
g1836
sg7
S'TMeasureAttributeFromProbabilities'
p1839
sg9
I00
sg10
(lp1840
sg12
(lp1841
g926
ag931
ag937
ag942
ag947
ag952
ag957
asg29
(dp1842
sbsS'TAttributedFloatList'
p1843
(ipyprops
ClassDefinition
p1844
(dp1845
g151
I0
sg152
I01
sg153
g1843
sg154
S'TFloatList'
p1846
sg156
I0
sg157
(lp1847
sg159
(lp1848
sg161
(dp1849
sbsS'TIMByRowsByRelief'
p1850
(i__main__
ClassDefinition
p1851
(dp1852
g4
I1
sg5
I01
sg6
g1850
sg7
S'TIMByRowsConstructor'
p1853
sg9
I00
sg10
(lp1854
sg12
(lp1855
(S'float'
p1856
g1224
g1224
S'number of neighbours'
p1857
I0
I0
I01
Ntp1858
a(S'float'
p1859
g1228
g1228
S'number of reference examples'
p1860
I0
I0
I01
Ntp1861
a(S'float'
p1862
S'kFromColumns'
p1863
S'k_from_columns'
p1864
S'if positive, number of neighbours is #columns*kFromColumns'
p1865
I0
I0
I01
Ntp1866
a(S'bool'
p1867
S'ignoreSameExample'
p1868
S'ignore_same_example'
p1869
S'does not put reference example into M'
p1870
I0
I0
I01
Ntp1871
a(S'bool'
p1872
S'convertToBinary'
p1873
S'convert_to_binary'
p1874
S'convert to binary class (hit-miss)'
p1875
I0
I0
I01
Ntp1876
a(S'bool'
p1877
S'correctClassFirst'
p1878
S'correct_class_first'
p1879
S'puts the correct class proportion to the first place'
p1880
I0
I0
I01
Ntp1881
a(S'bool'
p1882
S'allExamples'
p1883
S'all_examples'
p1884
S'uses all examples for reference examples'
p1885
I0
I0
I01
Ntp1886
a(S'bool'
p1887
S'allSameNeighbours'
p1888
S'all_same_neighbours'
p1889
S'uses all the examples same to the reference as neighbours'
p1890
I0
I0
I01
Ntp1891
asg29
(dp1892
sbsS'TFindNearestConstructor'
p1893
(i__main__
ClassDefinition
p1894
(dp1895
g4
I1
sg5
I01
sg6
g1893
sg7
S'TOrange'
p1896
sg9
I01
sg10
(lp1897
sg12
(lp1898
(S'TExamplesDistanceConstructor'
p1899
S'distanceConstructor'
p1900
S'distance_constructor'
p1901
S'metrics'
p1902
I0
I0
I00
Ntp1903
a(S'bool'
p1904
S'includeSame'
p1905
S'include_same'
p1906
S'tells whether to include examples that are same as the reference example'
p1907
I0
I0
I01
Ntp1908
asg29
(dp1909
sbsS'TRuleClassifier_firstRule'
p1910
(i__main__
ClassDefinition
p1911
(dp1912
g4
I1
sg5
I01
sg6
g1910
sg7
S'TRuleClassifier'
p1913
sg9
I00
sg10
(lp1914
sg12
(lp1915
(S'TDistribution'
p1916
S'prior'
p1917
g1917
S'prior distribution'
p1918
I0
I0
I00
Ntp1919
ag621
ag624
ag628
ag94
ag99
asg29
(dp1920
sbsS'TColumnAssessor'
p1921
(i__main__
ClassDefinition
p1922
(dp1923
g4
I1
sg5
I01
sg6
g1921
sg7
S'TOrange'
p1924
sg9
I01
sg10
(lp1925
sg12
(lp1926
sg29
(dp1927
sbsS'TTableAverager'
p1928
(i__main__
ClassDefinition
p1929
(dp1930
g4
I1
sg5
I01
sg6
g1928
sg7
S'TOrange'
p1931
sg9
I00
sg10
(lp1932
sg12
(lp1933
sg29
(dp1934
sbsS'TComputeDomainContingency_Preprocessor'
p1935
(i__main__
ClassDefinition
p1936
(dp1937
g4
I1
sg5
I01
sg6
g1935
sg7
S'TComputeDomainContingency'
p1938
sg9
I00
sg10
(lp1939
sg12
(lp1940
(S'TPreprocessor'
p1941
S'preprocessor'
p1942
g1942
S'preprocesses the exmaples (see the manual for restrictions!)'
p1943
I0
I0
I00
Ntp1944
a(S'bool'
p1945
S'resultInOriginalDomain'
p1946
S'result_in_original_domain'
p1947
S'tells whether the resulting DomainContingency should consist of original attributes'
p1948
I0
I0
I01
Ntp1949
ag28
asg29
(dp1950
sbsS'TFloatFloatList'
p1951
(ipyprops
ClassDefinition
p1952
(dp1953
g151
I0
sg152
I01
sg153
g1951
sg154
g155
sg156
I0
sg157
(lp1954
sg159
(lp1955
sg161
(dp1956
sbsS'TMeasureAttribute_MSE'
p1957
(i__main__
ClassDefinition
p1958
(dp1959
g4
I1
sg5
I01
sg6
g1957
sg7
S'TMeasureAttribute'
p1960
sg9
I00
sg10
(lp1961
sg12
(lp1962
(S'float'
p1963
g1228
g1228
S'm for m-estimate'
p1964
I0
I0
I01
Ntp1965
a(S'int'
p1966
S'unknownsTreatment'
p1967
S'unknowns_treatment'
p1968
S' treatment of unknown values'
p1969
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p1970
tp1971
ag942
ag947
ag952
ag957
asg29
(dp1972
sbsS'TRuleList'
p1973
(ipyprops
ClassDefinition
p1974
(dp1975
g151
I0
sg152
I01
sg153
g1973
sg154
g155
sg156
I0
sg157
(lp1976
sg159
(lp1977
sg161
(dp1978
sbsS'TClusteringTreeClassifier'
p1979
(i__main__
ClassDefinition
p1980
(dp1981
g4
I1
sg5
I01
sg6
g1979
sg7
S'TMultiClassifier'
p1982
sg9
I00
sg10
(lp1983
sg12
(lp1984
g815
ag819
ag824
asg29
(dp1985
sbsS'TStopIMClusteringByAssessor_noBigChange'
p1986
(i__main__
ClassDefinition
p1987
(dp1988
g4
I1
sg5
I01
sg6
g1986
sg7
S'TStopIMClusteringByAssessor'
p1989
sg9
I00
sg10
(lp1990
sg12
(lp1991
sg29
(dp1992
sbsS'TItemsetsSparseInducer'
p1993
(i__main__
ClassDefinition
p1994
(dp1995
g4
I1
sg5
I01
sg6
g1993
sg7
S'TOrange'
p1996
sg9
I00
sg10
(lp1997
sg12
(lp1998
(S'int'
p1999
S'maxItemSets'
p2000
S'max_item_sets'
p2001
S'maximal number of itemsets (increase if you want)'
p2002
I0
I0
I01
Ntp2003
a(S'float'
p2004
S'support'
p2005
g2005
S'required support'
p2006
I0
I0
I01
Ntp2007
a(S'bool'
p2008
S'storeExamples'
p2009
S'store_examples'
p2010
S'stores examples corresponding to itemsets'
p2011
I0
I0
I01
Ntp2012
asg29
(dp2013
sbsS'TPreprocessor_dropMissing'
p2014
(i__main__
ClassDefinition
p2015
(dp2016
g4
I1
sg5
I01
sg6
g2014
sg7
S'TPreprocessor'
p2017
sg9
I00
sg10
(lp2018
sg12
(lp2019
sg29
(dp2020
sbsS'TDomainContinuizer'
p2021
(i__main__
ClassDefinition
p2022
(dp2023
g4
I1
sg5
I01
sg6
g2021
sg7
S'TOrange'
p2024
sg9
I00
sg10
(lp2025
sg12
(lp2026
(S'bool'
p2027
S'zeroBased'
p2028
S'zero_based'
p2029
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p2030
I0
I0
I01
Ntp2031
a(S'int'
p2032
S'continuousTreatment'
p2033
S'continuous_treatment'
p2034
S' 0-leave as they are, 1-divide by span, 1-normalize'
p2035
I0
I0
I01
S'DomainContinuizer_ContinuousTreatment'
p2036
tp2037
a(S'int'
p2038
S'multinomialTreatment'
p2039
S'multinomial_treatment'
p2040
S' 0-lowest value, 1-most frequent (or baseValue), 2-n binary, 3-ignore, 4-ignore all discrete, 5-error, 6-convert as ordinal, 7-ordinal,normalized'
p2041
I0
I0
I01
S'DomainContinuizer_MultinomialTreatment'
p2042
tp2043
a(S'int'
p2044
S'classTreatment'
p2045
S'class_treatment'
p2046
S' 3-leave as is unless target is given, 5-error if not continuous nor binary nor target given, 6-convert as ordinal (unless target given)'
p2047
I0
I0
I01
S'DomainContinuizer_ClassTreatment'
p2048
tp2049
asg29
(dp2050
S'MultinomialTreatment'
p2051
(lp2052
(S'LowestIsBase'
p2053
I0
tp2054
a(S'FrequentIsBase'
p2055
I1
tp2056
a(S'NValues'
p2057
I2
tp2058
a(S'Ignore'
p2059
I3
tp2060
a(S'IgnoreAllDiscrete'
p2061
I4
tp2062
a(S'ReportError'
p2063
I5
tp2064
a(S'AsOrdinal'
p2065
I6
tp2066
a(S'AsNormalizedOrdinal'
p2067
I7
tp2068
asS'ClassTreatment'
p2069
(lp2070
(S'LeaveUnlessTarget'
p2071
S'3'
p2072
tp2073
a(S'ErrorIfCannotHandle'
p2074
S'5'
p2075
tp2076
a(S'AsOrdinal'
p2077
S'6'
p2078
tp2079
asS'ContinuousTreatment'
p2080
(lp2081
(S'Leave'
p2082
I0
tp2083
a(S'NormalizeBySpan'
p2084
I1
tp2085
a(S'NormalizeByVariance'
p2086
I2
tp2087
assbsS'TNormalizeContinuous'
p2088
(i__main__
ClassDefinition
p2089
(dp2090
g4
I1
sg5
I01
sg6
g2088
sg7
S'TTransformValue'
p2091
sg9
I00
sg10
(lp2092
sg12
(lp2093
(S'float'
p2094
S'average'
p2095
g2095
S'the average value'
p2096
I0
I0
I01
Ntp2097
a(S'float'
p2098
S'span'
p2099
g2099
S'the value span'
p2100
I0
I0
I01
Ntp2101
ag840
asg29
(dp2102
sbsS'TSimpleTreeClassifier'
p2103
(i__main__
ClassDefinition
p2104
(dp2105
g4
I1
sg5
I01
sg6
g2103
sg7
S'TClassifier'
p2106
sg9
I00
sg10
(lp2107
sg12
(lp2108
g94
ag99
asg29
(dp2109
sbsS'TStressFunc_Python'
p2110
(i__main__
ClassDefinition
p2111
(dp2112
g115
I1
sg116
I0
sg117
g2110
sg118
S'TStressFunc'
p2113
sg120
I00
sg121
(lp2114
sg123
(lp2115
sg125
(dp2116
sbsS'TBiModalDiscretizer'
p2117
(i__main__
ClassDefinition
p2118
(dp2119
g4
I1
sg5
I01
sg6
g2117
sg7
S'TDiscretizer'
p2120
sg9
I00
sg10
(lp2121
sg12
(lp2122
(S'float'
p2123
S'low'
p2124
g2124
S'low threshold'
p2125
I0
I0
I01
Ntp2126
a(S'float'
p2127
S'high'
p2128
g2128
S'high threshold'
p2129
I0
I0
I01
Ntp2130
ag840
asg29
(dp2131
sbsS'TExamplesDistanceConstructor_Euclidean'
p2132
(i__main__
ClassDefinition
p2133
(dp2134
g4
I1
sg5
I01
sg6
g2132
sg7
S'TExamplesDistanceConstructor_Normalized'
p2135
sg9
I00
sg10
(lp2136
sg12
(lp2137
(S'bool'
p2138
S'normalize'
p2139
g2139
S'tells whether to normalize distances between attributes'
p2140
I0
I0
I01
Ntp2141
a(S'bool'
p2142
S'ignoreUnknowns'
p2143
S'ignore_unknowns'
p2144
S'if true (default: false) unknown values are ignored in computation'
p2145
I0
I0
I01
Ntp2146
ag1383
asg29
(dp2147
sbsS'TContingencyAttrAttr'
p2148
(i__main__
ClassDefinition
p2149
(dp2150
g4
I1
sg5
I01
sg6
g2148
sg7
S'TContingency'
p2151
sg9
I00
sg10
(lp2152
sg12
(lp2153
g1700
ag1705
ag1711
ag1716
ag1721
ag1726
asg29
(dp2154
sbsS'TRuleBeamRefiner_Selector'
p2155
(i__main__
ClassDefinition
p2156
(dp2157
g4
I1
sg5
I01
sg6
g2155
sg7
S'TRuleBeamRefiner'
p2158
sg9
I00
sg10
(lp2159
sg12
(lp2160
(S'TDiscretization'
p2161
S'discretization'
p2162
g2162
S'discretization for continuous attributes'
p2163
I0
I0
I00
Ntp2164
asg29
(dp2165
sbsS'TProbabilityEstimatorConstructor_Laplace'
p2166
(i__main__
ClassDefinition
p2167
(dp2168
g4
I1
sg5
I01
sg6
g2166
sg7
S'TProbabilityEstimatorConstructor'
p2169
sg9
I00
sg10
(lp2170
sg12
(lp2171
(S'float'
p2172
S'l'
p2173
g2173
S'number of examples added to each class (default: 1)'
p2174
I0
I0
I01
Ntp2175
a(S'bool'
p2176
S'renormalize'
p2177
g2177
S'computes the estimate on the original (not the normalized) distribution'
p2178
I0
I0
I01
Ntp2179
asg29
(dp2180
sbsS'TExamplesDistance_Relief'
p2181
(i__main__
ClassDefinition
p2182
(dp2183
g4
I1
sg5
I01
sg6
g2181
sg7
S'TExamplesDistance'
p2184
sg9
I00
sg10
(lp2185
sg12
(lp2186
(S'TDomainDistributions'
p2187
S'distributions'
p2188
g2188
S"distributions of attributes' values"
p2189
I0
I0
I00
Ntp2190
a(S'TAttributedFloatList'
p2191
S'averages'
p2192
g2192
S'average values of attributes'
p2193
I0
I0
I00
Ntp2194
a(S'TAttributedFloatList'
p2195
S'normalizations'
p2196
g2196
S"ranges of attributes' values"
p2197
I0
I0
I00
Ntp2198
a(S'TAttributedFloatList'
p2199
S'bothSpecial'
p2200
S'both_special'
p2201
S'distance if both values of both attributes are undefined'
p2202
I0
I0
I00
Ntp2203
asg29
(dp2204
sbsS'TExamplesDistance_Manhattan'
p2205
(i__main__
ClassDefinition
p2206
(dp2207
g4
I1
sg5
I01
sg6
g2205
sg7
S'TExamplesDistance_Normalized'
p2208
sg9
I00
sg10
(lp2209
sg12
(lp2210
g470
ag474
ag478
ag482
ag487
ag491
ag496
asg29
(dp2211
sbsS'TExamplesDistanceConstructor_Manhattan'
p2212
(i__main__
ClassDefinition
p2213
(dp2214
g4
I1
sg5
I01
sg6
g2212
sg7
S'TExamplesDistanceConstructor_Normalized'
p2215
sg9
I00
sg10
(lp2216
sg12
(lp2217
g2141
ag2146
ag1383
asg29
(dp2218
sbsS'TStringList'
p2219
(ipyprops
ClassDefinition
p2220
(dp2221
g151
I0
sg152
I01
sg153
g2219
sg154
g155
sg156
I0
sg157
(lp2222
sg159
(lp2223
sg161
(dp2224
sbsS'TTreeDescender'
p2225
(i__main__
ClassDefinition
p2226
(dp2227
g4
I1
sg5
I01
sg6
g2225
sg7
S'TOrange'
p2228
sg9
I01
sg10
(lp2229
sg12
(lp2230
sg29
(dp2231
sbsS'TColumnAssessor_Measure'
p2232
(i__main__
ClassDefinition
p2233
(dp2234
g4
I1
sg5
I01
sg6
g2232
sg7
S'TColumnAssessor'
p2235
sg9
I00
sg10
(lp2236
sg12
(lp2237
(S'TMeasureAttribute'
p2238
S'measure'
p2239
g2239
S'attribute quality measure'
p2240
I0
I0
I00
Ntp2241
asg29
(dp2242
sbsS'TIMBlurer'
p2243
(i__main__
ClassDefinition
p2244
(dp2245
g4
I1
sg5
I01
sg6
g2243
sg7
S'TIMByRowsPreprocessor'
p2246
sg9
I00
sg10
(lp2247
sg12
(lp2248
(S'float'
p2249
S'weight'
p2250
g2250
S'weight of neighbours'
p2251
I0
I0
I01
Ntp2252
a(S'float'
p2253
S'origWeight'
p2254
S'orig_weight'
p2255
S'weight of original row'
p2256
I0
I0
I01
Ntp2257
a(S'TFloatList'
p2258
S'attrWeights'
p2259
S'attr_weights'
p2260
S'weights by individual (different) attributes'
p2261
I0
I0
I00
Ntp2262
a(S'bool'
p2263
S'adjustOrigWeight'
p2264
S'adjust_orig_weight'
p2265
S'uses 1-weight(s) for weight of original row'
p2266
I0
I0
I01
Ntp2267
a(S'bool'
p2268
S'onlyEmpty'
p2269
S'only_empty'
p2270
S'blurs only empty cells'
p2271
I0
I0
I01
Ntp2272
asg29
(dp2273
sbsS'TFilter'
p2274
(i__main__
ClassDefinition
p2275
(dp2276
g4
I1
sg5
I01
sg6
g2274
sg7
S'TOrange'
p2277
sg9
I01
sg10
(lp2278
sg12
(lp2279
g711
ag715
asg29
(dp2280
sbsS'TC45Learner'
p2281
(i__main__
ClassDefinition
p2282
(dp2283
g4
I1
sg5
I01
sg6
g2281
sg7
S'TLearner'
p2284
sg9
I00
sg10
(lp2285
sg12
(lp2286
(S'bool'
p2287
S'gainRatio'
p2288
(g2288
S'g'
p2289
tp2290
S' use gain ratio (instead of information gain)'
p2291
I0
I0
I01
Ntp2292
a(S'bool'
p2293
S'subset'
p2294
(g2294
S's'
p2295
tp2296
S' use subsetting'
p2297
I0
I0
I01
Ntp2298
a(S'bool'
p2299
S'batch'
p2300
(g2300
S'b'
p2301
tp2302
S' batch'
p2303
I0
I0
I01
Ntp2304
a(S'bool'
p2305
S'probThresh'
p2306
(g2306
S'p'
p2307
tp2308
S' probability threshold'
p2309
I0
I0
I01
Ntp2310
a(S'int'
p2311
S'minObjs'
p2312
(g2312
g1228
tp2313
S' minimal number of objects (examples) in leaves'
p2314
I0
I0
I01
Ntp2315
a(S'int'
p2316
S'window'
p2317
(g2317
S'w'
p2318
tp2319
S' window'
p2320
I0
I0
I01
Ntp2321
a(S'int'
p2322
S'increment'
p2323
(g2323
S'i'
p2324
tp2325
S' increment'
p2326
I0
I0
I01
Ntp2327
a(S'float'
p2328
S'cf'
p2329
(g2329
S'c'
p2330
tp2331
S' cf'
p2332
I0
I0
I01
Ntp2333
a(S'int'
p2334
S'trials'
p2335
(g2335
S't'
p2336
tp2337
S' trials'
p2338
I0
I0
I01
Ntp2339
a(S'bool'
p2340
S'prune'
p2341
g2341
S'return pruned tree'
p2342
I0
I0
I01
Ntp2343
a(S'bool'
p2344
S'convertToOrange'
p2345
S'convert_to_orange'
p2346
S'return TreeClassifier instead of C45TreeClassifier'
p2347
I0
I0
I01
Ntp2348
a(S'bool'
p2349
S'storeExamples'
p2350
S'store_examples'
p2351
S'stores examples when (if) converting to TreeClassifier'
p2352
I0
I0
I01
Ntp2353
a(S'bool'
p2354
S'storeContingencies'
p2355
S'store_contingencies'
p2356
S'stores contingencies when (if) converting to TreeClassifier'
p2357
I0
I0
I01
Ntp2358
ag110
asg29
(dp2359
sbsS'TAttributedBoolList'
p2360
(ipyprops
ClassDefinition
p2361
(dp2362
g151
I0
sg152
I01
sg153
g2360
sg154
S'TBoolList'
p2363
sg156
I0
sg157
(lp2364
sg159
(lp2365
sg161
(dp2366
sbsS'TFeatureByMinComplexity'
p2367
(i__main__
ClassDefinition
p2368
(dp2369
g4
I1
sg5
I01
sg6
g2367
sg7
S'TFeatureInducer'
p2370
sg9
I00
sg10
(lp2371
sg12
(lp2372
(S'TColorIG'
p2373
S'colorIG'
p2374
S'color_IG'
p2375
S'graph coloring algorithm'
p2376
I0
I0
I00
Ntp2377
a(S'int'
p2378
S'completion'
p2379
g2379
S' decides how to determine the class for points not covered by any cluster'
p2380
I0
I0
I01
S'FeatureByMinComplexity_Completion'
p2381
tp2382
asg29
(dp2383
S'Completion'
p2384
(lp2385
(S'NoCompletion'
p2386
S'completion_no'
p2387
tp2388
a(S'CompletionByDefault'
p2389
S'completion_default'
p2390
tp2391
a(S'CompletionByBayes'
p2392
S'completion_bayes'
p2393
tp2394
assbsS'TPreprocessor_dropMissingClasses'
p2395
(i__main__
ClassDefinition
p2396
(dp2397
g4
I1
sg5
I01
sg6
g2395
sg7
S'TPreprocessor'
p2398
sg9
I00
sg10
(lp2399
sg12
(lp2400
sg29
(dp2401
sbsS'TkNNClassifier'
p2402
(i__main__
ClassDefinition
p2403
(dp2404
g4
I1
sg5
I01
sg6
g2402
sg7
S'TClassifierFD'
p2405
sg9
I00
sg10
(lp2406
sg12
(lp2407
(S'TFindNearest'
p2408
S'findNearest'
p2409
S'find_nearest'
p2410
g589
I0
I0
I00
Ntp2411
a(S'float'
p2412
g1224
g1224
S'number of neighbours (0 for sqrt of #examples)'
p2413
I0
I0
I01
Ntp2414
a(S'bool'
p2415
S'rankWeight'
p2416
S'rank_weight'
p2417
S'enable weighting by ranks'
p2418
I0
I0
I01
Ntp2419
a(S'int'
p2420
S'weightID'
p2421
S'weight_ID'
p2422
S'id of meta-attribute with weight'
p2423
I0
I0
I01
Ntp2424
a(S'int'
p2425
S'nExamples'
p2426
S'n_examples'
p2427
S'the number of learning examples '
p2428
I0
I0
I01
Ntp2429
ag307
ag94
ag99
asg29
(dp2430
sbsS'TMeasureAttribute_info'
p2431
(i__main__
ClassDefinition
p2432
(dp2433
g4
I1
sg5
I01
sg6
g2431
sg7
S'TMeasureAttributeFromProbabilities'
p2434
sg9
I00
sg10
(lp2435
sg12
(lp2436
g926
ag931
ag937
ag942
ag947
ag952
ag957
asg29
(dp2437
sbsS'TSgnSammonStress'
p2438
(i__main__
ClassDefinition
p2439
(dp2440
g115
I1
sg116
I0
sg117
g2438
sg118
S'TStressFunc'
p2441
sg120
I00
sg121
(lp2442
sg123
(lp2443
sg125
(dp2444
sbsS'TRuleBeamCandidateSelector_TakeAll'
p2445
(i__main__
ClassDefinition
p2446
(dp2447
g4
I1
sg5
I01
sg6
g2445
sg7
S'TRuleBeamCandidateSelector'
p2448
sg9
I00
sg10
(lp2449
sg12
(lp2450
sg29
(dp2451
sbsS'TExamplesDistanceConstructor_Relief'
p2452
(i__main__
ClassDefinition
p2453
(dp2454
g4
I1
sg5
I01
sg6
g2452
sg7
S'TExamplesDistanceConstructor'
p2455
sg9
I00
sg10
(lp2456
sg12
(lp2457
g1383
asg29
(dp2458
sbsS'TOrange'
p2459
(i__main__
ClassDefinition
p2460
(dp2461
g4
I1
sg5
I01
sg6
g2459
sg7
Nsg9
I00
sg10
(lp2462
sg12
(lp2463
sg29
(dp2464
sbsS'TRuleValidator'
p2465
(i__main__
ClassDefinition
p2466
(dp2467
g4
I1
sg5
I01
sg6
g2465
sg7
S'TOrange'
p2468
sg9
I01
sg10
(lp2469
sg12
(lp2470
sg29
(dp2471
sbsS'TColorIG'
p2472
(i__main__
ClassDefinition
p2473
(dp2474
g4
I1
sg5
I01
sg6
g2472
sg7
S'TOrange'
p2475
sg9
I01
sg10
(lp2476
sg12
(lp2477
sg29
(dp2478
sbsS'TRuleValidator_Python'
p2479
(i__main__
ClassDefinition
p2480
(dp2481
g4
I1
sg5
I01
sg6
g2479
sg7
S'TRuleValidator'
p2482
sg9
I00
sg10
(lp2483
sg12
(lp2484
sg29
(dp2485
sbsS'TSubsetsGenerator_constSize_iterator'
p2486
(i__main__
ClassDefinition
p2487
(dp2488
g4
I1
sg5
I01
sg6
g2486
sg7
S'TSubsetsGenerator_iterator'
p2489
sg9
I00
sg10
(lp2490
sg12
(lp2491
(S'bool'
p2492
S'moreToCome'
p2493
S'more_to_come'
p2494
g589
I01
I0
I01
Ntp2495
ag526
asg29
(dp2496
sbsS'TIMByRowsBySorting'
p2497
(i__main__
ClassDefinition
p2498
(dp2499
g4
I1
sg5
I01
sg6
g2497
sg7
S'TIMByRowsConstructor'
p2500
sg9
I00
sg10
(lp2501
sg12
(lp2502
sg29
(dp2503
sbsS'TAssociationLearner'
p2504
(i__main__
ClassDefinition
p2505
(dp2506
g4
I1
sg5
I01
sg6
g2504
sg7
S'TLearner'
p2507
sg9
I00
sg10
(lp2508
sg12
(lp2509
(S'float'
p2510
S'confidence'
p2511
g2511
S'required confidence'
p2512
I0
I0
I01
Ntp2513
a(S'float'
p2514
S'support'
p2515
g2515
S'required support'
p2516
I0
I0
I01
Ntp2517
a(S'int'
p2518
S'voteWeight'
p2519
S'vote_weight'
p2520
S'vote weight (s=support, c=confidence, p=product)'
p2521
I0
I0
I01
Ntp2522
a(S'int'
p2523
S'maxItemSets'
p2524
S'max_item_sets'
p2525
S'maximal number of itemsets (increase if you want)'
p2526
I0
I0
I01
Ntp2527
ag110
asg29
(dp2528
sbsS'TRuleBeamInitializer_Python'
p2529
(i__main__
ClassDefinition
p2530
(dp2531
g4
I1
sg5
I01
sg6
g2529
sg7
S'TRuleBeamInitializer'
p2532
sg9
I00
sg10
(lp2533
sg12
(lp2534
sg29
(dp2535
sbsS'TDistributionAssessor'
p2536
(i__main__
ClassDefinition
p2537
(dp2538
g4
I1
sg5
I01
sg6
g2536
sg7
S'TOrange'
p2539
sg9
I01
sg10
(lp2540
sg12
(lp2541
sg29
(dp2542
sbsS'TRuleCovererAndRemover_Python'
p2543
(i__main__
ClassDefinition
p2544
(dp2545
g4
I1
sg5
I01
sg6
g2543
sg7
S'TRuleCovererAndRemover'
p2546
sg9
I00
sg10
(lp2547
sg12
(lp2548
sg29
(dp2549
sbsS'TMeasureAttribute_gainRatioA'
p2550
(i__main__
ClassDefinition
p2551
(dp2552
g4
I1
sg5
I01
sg6
g2550
sg7
S'TMeasureAttribute_gainRatio'
p2553
sg9
I00
sg10
(lp2554
sg12
(lp2555
g926
ag931
ag937
ag942
ag947
ag952
ag957
asg29
(dp2556
sbsS'TConditionalProbabilityEstimatorConstructor_ByRows'
p2557
(i__main__
ClassDefinition
p2558
(dp2559
g4
I1
sg5
I01
sg6
g2557
sg7
S'TConditionalProbabilityEstimatorConstructor'
p2560
sg9
I00
sg10
(lp2561
sg12
(lp2562
(S'TProbabilityEstimatorConstructor'
p2563
S'estimatorConstructor'
p2564
S'estimator_constructor'
p2565
S'ProbabilityEstimator to be used '
p2566
I0
I0
I00
Ntp2567
asg29
(dp2568
sbsS'TCartesianClassifier'
p2569
(i__main__
ClassDefinition
p2570
(dp2571
g4
I1
sg5
I01
sg6
g2569
sg7
S'TClassifierFD'
p2572
sg9
I00
sg10
(lp2573
sg12
(lp2574
g307
ag94
ag99
asg29
(dp2575
sbsS'TGraphLayout'
p2576
(i__main__
ClassDefinition
p2577
(dp2578
g115
I1
sg116
I0
sg117
g2576
sg118
S'TOrange'
p2579
sg120
I00
sg121
(lp2580
sg123
(lp2581
sg125
(dp2582
sbsS'TLinearClassifier'
p2583
(i__main__
ClassDefinition
p2584
(dp2585
g4
I1
sg5
I01
sg6
g2583
sg7
S'TClassifierFD'
p2586
sg9
I00
sg10
(lp2587
sg12
(lp2588
(S'TFloatListList'
p2589
S'weights'
p2590
g2590
S'Computed feature weights'
p2591
I0
I0
I00
Ntp2592
a(S'TExampleTable'
p2593
S'examples'
p2594
g2594
S'Examples used to train the classifier'
p2595
I0
I0
I00
Ntp2596
a(S'float'
p2597
S'bias'
p2598
g2598
S'bias'
p2599
I01
I0
I01
Ntp2600
ag307
ag94
ag99
asg29
(dp2601
sbsS'TTreeDescender_UnknownToBranch'
p2602
(i__main__
ClassDefinition
p2603
(dp2604
g4
I1
sg5
I01
sg6
g2602
sg7
g1615
sg9
I0
sg10
(lp2605
sg12
(lp2606
sg29
(dp2607
sbsS'TSubsetsGenerator_constSize'
p2608
(i__main__
ClassDefinition
p2609
(dp2610
g4
I1
sg5
I01
sg6
g2608
sg7
S'TSubsetsGenerator'
p2611
sg9
I00
sg10
(lp2612
sg12
(lp2613
(S'int'
p2614
S'B'
p2615
g2615
S'subset size'
p2616
I0
I0
I01
Ntp2617
ag223
asg29
(dp2618
sbsS'TColorIG_MCF'
p2619
(i__main__
ClassDefinition
p2620
(dp2621
g4
I1
sg5
I01
sg6
g2619
sg7
S'TColorIG'
p2622
sg9
I00
sg10
(lp2623
sg12
(lp2624
sg29
(dp2625
sbsS'TBasicAttrStat'
p2626
(i__main__
ClassDefinition
p2627
(dp2628
g4
I1
sg5
I01
sg6
g2626
sg7
S'TOrange'
p2629
sg9
I00
sg10
(lp2630
sg12
(lp2631
(S'float'
p2632
S'sum'
p2633
g2633
S'sum of values'
p2634
I0
I0
I01
Ntp2635
a(S'float'
p2636
S'sum2'
p2637
g2637
S'sum of squares of values'
p2638
I0
I0
I01
Ntp2639
a(S'float'
p2640
g1034
g1034
S'number of examples for which the attribute is defined'
p2641
I0
I0
I01
Ntp2642
a(S'float'
p2643
S'min'
p2644
g2644
S'the lowest value of the attribute'
p2645
I0
I0
I01
Ntp2646
a(S'float'
p2647
S'max'
p2648
g2648
S'the highest value of the attribute'
p2649
I0
I0
I01
Ntp2650
a(S'float'
p2651
S'avg'
p2652
g2652
S'the average value of the attribute'
p2653
I0
I0
I01
Ntp2654
a(S'float'
p2655
S'dev'
p2656
g2656
S'the deviation of the value of the attribute'
p2657
I0
I0
I01
Ntp2658
a(S'TVariable'
p2659
S'variable'
p2660
g2660
S'the attribute to which the data applies'
p2661
I0
I0
I00
Ntp2662
a(S'bool'
p2663
S'holdRecomputation'
p2664
S'hold_recomputation'
p2665
S'temporarily disables recomputation of avg and dev while adding values'
p2666
I0
I0
I01
Ntp2667
asg29
(dp2668
sbsS'TTreeSplitConstructor_Attribute'
p2669
(i__main__
ClassDefinition
p2670
(dp2671
g4
I1
sg5
I01
sg6
g2669
sg7
S'TTreeSplitConstructor_Measure'
p2672
sg9
I00
sg10
(lp2673
sg12
(lp2674
g1318
ag1323
ag803
asg29
(dp2675
sbsS'TRemoveRedundantByInduction'
p2676
(i__main__
ClassDefinition
p2677
(dp2678
g4
I1
sg5
I01
sg6
g2676
sg7
S'TRemoveRedundant'
p2679
sg9
I00
sg10
(lp2680
sg12
(lp2681
(S'TFeatureInducer'
p2682
S'featureReducer'
p2683
S'feature_reducer'
p2684
S'feature construction algorithm'
p2685
I0
I0
I00
Ntp2686
a(S'TMeasureAttribute'
p2687
S'measure'
p2688
g2688
S'measure for initial ordering of attributes'
p2689
I0
I0
I00
Ntp2690
a(S'TDiscretization'
p2691
S'discretization'
p2692
g2692
S'discretization method'
p2693
I0
I0
I00
Ntp2694
ag1361
asg29
(dp2695
sbsS'TFilter_conjunction'
p2696
(i__main__
ClassDefinition
p2697
(dp2698
g4
I1
sg5
I01
sg6
g2696
sg7
S'TFilter'
p2699
sg9
I00
sg10
(lp2700
sg12
(lp2701
(S'TFilterList'
p2702
S'filters'
p2703
g2703
S'a list of filters;'
p2704
I0
I0
I00
Ntp2705
ag711
ag715
asg29
(dp2706
sbsS'TExampleForMissing'
p2707
(i__main__
ClassDefinition
p2708
(dp2709
g4
I1
sg5
I01
sg6
g2707
sg7
S'TExample'
p2710
sg9
I00
sg10
(lp2711
sg12
(lp2712
(S'TEFMDataDescription'
p2713
S'dataDescription'
p2714
S'data_description'
p2715
S'data description'
p2716
I0
I0
I00
Ntp2717
a(S'TDomain'
p2718
S'domain'
p2719
g2719
S"Example's domain"
p2720
I01
I0
I00
Ntp2721
a(S'int'
p2722
S'id'
p2723
g2723
g589
I0
I0
I01
Ntp2724
asg29
(dp2725
sbsS'TRuleBeamFilter'
p2726
(i__main__
ClassDefinition
p2727
(dp2728
g4
I1
sg5
I01
sg6
g2726
sg7
S'TOrange'
p2729
sg9
I01
sg10
(lp2730
sg12
(lp2731
sg29
(dp2732
sbsS'TBayesClassifier'
p2733
(i__main__
ClassDefinition
p2734
(dp2735
g4
I1
sg5
I01
sg6
g2733
sg7
S'TClassifierFD'
p2736
sg9
I00
sg10
(lp2737
sg12
(lp2738
(S'TDistribution'
p2739
S'distribution'
p2740
g2740
S'class distributions (P(C))'
p2741
I0
I0
I00
Ntp2742
a(S'TDomainContingency'
p2743
S'conditionalDistributions'
p2744
S'conditional_distributions'
p2745
S'conditional distributions, P(C|A)'
p2746
I0
I0
I00
Ntp2747
a(S'TProbabilityEstimator'
p2748
S'estimator'
p2749
g2749
S'a probability estimator for P(C)'
p2750
I0
I0
I00
Ntp2751
a(S'TConditionalProbabilityEstimatorList'
p2752
S'conditionalEstimators'
p2753
S'conditional_estimators'
p2754
S'a probability estimator for P(C|A)'
p2755
I0
I0
I00
Ntp2756
a(S'bool'
p2757
S'normalizePredictions'
p2758
S'normalize_predictions'
p2759
S'if true, classifier will normalize predictions'
p2760
I0
I0
I01
Ntp2761
a(S'float'
p2762
S'threshold'
p2763
g2763
S'threshold probability for class 1 (for binary classes only)'
p2764
I0
I0
I01
Ntp2765
ag307
ag94
ag99
asg29
(dp2766
sbsS'TGraph'
p2767
(i__main__
ClassDefinition
p2768
(dp2769
g4
I1
sg5
I01
sg6
g2767
sg7
S'TOrange'
p2770
sg9
I01
sg10
(lp2771
sg12
(lp2772
g1506
ag1511
ag1515
asg29
(dp2773
sbsS'TPreprocessor_addClassWeight'
p2774
(i__main__
ClassDefinition
p2775
(dp2776
g4
I1
sg5
I01
sg6
g2774
sg7
S'TPreprocessor'
p2777
sg9
I00
sg10
(lp2778
sg12
(lp2779
(S'TFloatList'
p2780
S'classWeights'
p2781
S'class_weights'
p2782
S'weights of examples of particular classes'
p2783
I0
I0
I00
Ntp2784
a(S'bool'
p2785
S'equalize'
p2786
g2786
S'reweight examples to equalize class proportions'
p2787
I0
I0
I01
Ntp2788
a(S'TRandomGenerator'
p2789
S'randomGenerator'
p2790
S'random_generator'
p2791
S'random number generator'
p2792
I0
I0
I00
Ntp2793
asg29
(dp2794
sbsS'THierarchicalClusterList'
p2795
(ipyprops
ClassDefinition
p2796
(dp2797
g151
I0
sg152
I01
sg153
g2795
sg154
g155
sg156
I0
sg157
(lp2798
sg159
(lp2799
sg161
(dp2800
sbsS'TStopIMClusteringByAssessor'
p2801
(i__main__
ClassDefinition
p2802
(dp2803
g4
I1
sg5
I01
sg6
g2801
sg7
S'TOrange'
p2804
sg9
I01
sg10
(lp2805
sg12
(lp2806
sg29
(dp2807
sbsS'TValueFilter_continuous'
p2808
(i__main__
ClassDefinition
p2809
(dp2810
g4
I1
sg5
I01
sg6
g2808
sg7
S'TValueFilter'
p2811
sg9
I00
sg10
(lp2812
sg12
(lp2813
(S'float'
p2814
S'min'
p2815
(g2815
S'ref'
p2816
tp2817
S' reference value (lower bound for interval operators)'
p2818
I0
I0
I01
Ntp2819
a(S'float'
p2820
S'max'
p2821
g2821
S'upper bound for interval operators'
p2822
I0
I0
I01
Ntp2823
a(S'bool'
p2824
S'outside'
p2825
g2825
S'obsolete: if true, the filter accepts the values outside the interval, not inside'
p2826
I0
I0
I01
Ntp2827
a(S'int'
p2828
S'oper'
p2829
g2829
S' operator'
p2830
I0
I0
I01
S'ValueFilter_Operator'
p2831
tp2832
ag1077
ag1082
asg29
(dp2833
sbsS'TAssociationRule'
p2834
(i__main__
ClassDefinition
p2835
(dp2836
g4
I1
sg5
I01
sg6
g2834
sg7
S'TOrange'
p2837
sg9
I00
sg10
(lp2838
sg12
(lp2839
(S'TExample'
p2840
S'left'
p2841
g2841
S'left side of the rule'
p2842
I01
I0
I00
Ntp2843
a(S'TExample'
p2844
S'right'
p2845
g2845
S'right side of the rule'
p2846
I01
I0
I00
Ntp2847
a(S'float'
p2848
S'support'
p2849
g2849
S'support for the rule'
p2850
I0
I0
I01
Ntp2851
a(S'float'
p2852
S'confidence'
p2853
g2853
S'confidence of the rule'
p2854
I0
I0
I01
Ntp2855
a(S'float'
p2856
S'coverage'
p2857
g2857
S"rule's coverage"
p2858
I0
I0
I01
Ntp2859
a(S'float'
p2860
S'strength'
p2861
g2861
S"rule's strength"
p2862
I0
I0
I01
Ntp2863
a(S'float'
p2864
S'lift'
p2865
g2865
S"rule's lift"
p2866
I0
I0
I01
Ntp2867
a(S'float'
p2868
S'leverage'
p2869
g2869
S"rule's leverage"
p2870
I0
I0
I01
Ntp2871
a(S'float'
p2872
S'nAppliesLeft'
p2873
S'n_applies_left'
p2874
S"number of examples covered by the rule's left side"
p2875
I0
I0
I01
Ntp2876
a(S'float'
p2877
S'nAppliesRight'
p2878
S'n_applies_right'
p2879
S"number of examples covered by the rule's right side"
p2880
I0
I0
I01
Ntp2881
a(S'float'
p2882
S'nAppliesBoth'
p2883
S'n_applies_both'
p2884
S'number of examples covered by the rule'
p2885
I0
I0
I01
Ntp2886
a(S'float'
p2887
S'nExamples'
p2888
S'n_examples'
p2889
S'number of learning examples'
p2890
I0
I0
I01
Ntp2891
a(S'int'
p2892
S'nLeft'
p2893
S'n_left'
p2894
S"number of items on the rule's left side"
p2895
I01
I0
I01
Ntp2896
a(S'int'
p2897
S'nRight'
p2898
S'n_right'
p2899
S"number of items on the rule's right side"
p2900
I01
I0
I01
Ntp2901
a(S'TExampleTable'
p2902
S'examples'
p2903
g2903
S'examples which the rule was built from'
p2904
I01
I0
I00
Ntp2905
a(S'TIntList'
p2906
S'matchLeft'
p2907
S'match_left'
p2908
S'indices of examples that match the left side of the rule'
p2909
I01
I0
I00
Ntp2910
a(S'TIntList'
p2911
S'matchBoth'
p2912
S'match_both'
p2913
S'indices to examples that match both sides of the rule'
p2914
I01
I0
I00
Ntp2915
asg29
(dp2916
sbsS'TValueFilter'
p2917
(i__main__
ClassDefinition
p2918
(dp2919
g4
I1
sg5
I01
sg6
g2917
sg7
S'TOrange'
p2920
sg9
I01
sg10
(lp2921
sg12
(lp2922
g1077
ag1082
asg29
(dp2923
S'Operator'
p2924
(lp2925
(S'None'
p2926
I0
tp2927
a(S'Equal'
p2928
I1
tp2929
a(S'NotEqual'
p2930
I2
tp2931
a(S'Less'
p2932
I3
tp2933
a(S'LessEqual'
p2934
I4
tp2935
a(S'Greater'
p2936
I5
tp2937
a(S'GreaterEqual'
p2938
I6
tp2939
a(S'Between'
p2940
I7
tp2941
a(S'Outside'
p2942
I8
tp2943
a(S'Contains'
p2944
I9
tp2945
a(S'NotContains'
p2946
I10
tp2947
a(S'BeginsWith'
p2948
I11
tp2949
a(S'EndsWith'
p2950
I12
tp2951
a(S'Listed'
p2952
I13
tp2953
assbsS'TClustersFromDistributions'
p2954
(i__main__
ClassDefinition
p2955
(dp2956
g4
I1
sg5
I01
sg6
g2954
sg7
S'TOrange'
p2957
sg9
I01
sg10
(lp2958
sg12
(lp2959
sg29
(dp2960
sbsS'TVariable'
p2961
(i__main__
ClassDefinition
p2962
(dp2963
g4
I1
sg5
I01
sg6
g2961
sg7
S'TOrange'
p2964
sg9
I01
sg10
(lp2965
sg12
(lp2966
g349
ag353
ag357
ag362
ag367
ag372
ag377
asg29
(dp2967
S'Type'
p2968
(lp2969
(S'None'
p2970
S'(int)TValue::NONE'
p2971
tp2972
a(S'Discrete'
p2973
S'(int)TValue::INTVAR'
p2974
tp2975
a(S'Continuous'
p2976
S'(int)TValue::FLOATVAR'
p2977
tp2978
a(S'Other'
p2979
S'(int)(TValue::FLOATVAR+1)'
p2980
tp2981
a(S'String'
p2982
S'(int)STRINGVAR'
p2983
tp2984
asS'MakeStatus'
p2985
(lp2986
(S'OK'
p2987
I0
tp2988
a(S'MissingValues'
p2989
I1
tp2990
a(S'NoRecognizedValues'
p2991
I2
tp2992
a(S'Incompatible'
p2993
I3
tp2994
a(S'NotFound'
p2995
I4
tp2996
assbsS'TNoiseValuesGenerator'
p2997
(i__main__
ClassDefinition
p2998
(dp2999
g4
I1
sg5
I01
sg6
g2997
sg7
S'TChangeExampleGenerator'
p3000
sg9
I00
sg10
(lp3001
sg12
(lp3002
(S'TIntFloatList'
p3003
S'replaceProbabilities'
p3004
S'replace_probabilities'
p3005
S"probabilities for replacing attributes' values"
p3006
I0
I0
I00
Ntp3007
a(S'TRandomGenerator'
p3008
S'randomGenerator'
p3009
S'random_generator'
p3010
S'random generator'
p3011
I0
I0
I00
Ntp3012
ag322
ag326
asg29
(dp3013
sbsS'TC45TreeNodeList'
p3014
(ipyprops
ClassDefinition
p3015
(dp3016
g151
I0
sg152
I01
sg153
g3014
sg154
g155
sg156
I0
sg157
(lp3017
sg159
(lp3018
sg161
(dp3019
sbsS'TFilter_sameValue'
p3020
(i__main__
ClassDefinition
p3021
(dp3022
g4
I1
sg5
I01
sg6
g3020
sg7
S'TFilter'
p3023
sg9
I00
sg10
(lp3024
sg12
(lp3025
(S'int'
p3026
S'position'
p3027
g3027
S'position of the observed attribute'
p3028
I0
I0
I01
Ntp3029
a(S'TValue'
p3030
S'value'
p3031
g3031
S'value that the selected examples should have'
p3032
I0
I0
I01
Ntp3033
ag711
ag715
asg29
(dp3034
sbsS'TEquiNDiscretization'
p3035
(i__main__
ClassDefinition
p3036
(dp3037
g4
I1
sg5
I01
sg6
g3035
sg7
S'TDiscretization'
p3038
sg9
I00
sg10
(lp3039
sg12
(lp3040
(S'int'
p3041
S'numberOfIntervals'
p3042
(g3042
g1034
tp3043
S' number of intervals'
p3044
I0
I0
I01
Ntp3045
a(S'bool'
p3046
S'recursiveDivision'
p3047
S'recursive_division'
p3048
S'find cut-off points by recursive division (default = true)'
p3049
I0
I0
I01
Ntp3050
asg29
(dp3051
sbsS'TImputerConstructor_average'
p3052
(i__main__
ClassDefinition
p3053
(dp3054
g4
I1
sg5
I01
sg6
g3052
sg7
S'TImputerConstructor'
p3055
sg9
I00
sg10
(lp3056
sg12
(lp3057
g180
asg29
(dp3058
sbsS'TDomainBasicAttrStat'
p3059
(ipyprops
ClassDefinition
p3060
(dp3061
g151
I0
sg152
I01
sg153
S'TDomainBasicAttrStat'
p3062
sg154
g155
sg156
I0
sg157
(lp3063
sg159
(lp3064
sg161
(dp3065
sbsS'TStopDistributionClustering'
p3066
(i__main__
ClassDefinition
p3067
(dp3068
g4
I1
sg5
I01
sg6
g3066
sg7
S'TOrange'
p3069
sg9
I01
sg10
(lp3070
sg12
(lp3071
sg29
(dp3072
sbsS'TImputerConstructor_random'
p3073
(i__main__
ClassDefinition
p3074
(dp3075
g4
I1
sg5
I01
sg6
g3073
sg7
S'TImputerConstructor'
p3076
sg9
I00
sg10
(lp3077
sg12
(lp3078
(S'bool'
p3079
S'deterministic'
p3080
g3080
S"tells whether to initialize random by example's CRC (default: false)"
p3081
I0
I0
I01
Ntp3082
ag180
asg29
(dp3083
sbsS'TCostWrapperClassifier'
p3084
(i__main__
ClassDefinition
p3085
(dp3086
g4
I1
sg5
I01
sg6
g3084
sg7
S'TClassifier'
p3087
sg9
I00
sg10
(lp3088
sg12
(lp3089
(S'TClassifier'
p3090
S'classifier'
p3091
g3091
S'basic classifier'
p3092
I0
I0
I00
Ntp3093
a(S'TCostMatrix'
p3094
S'costMatrix'
p3095
S'cost_matrix'
p3096
S'cost matrix'
p3097
I0
I0
I00
Ntp3098
ag94
ag99
asg29
(dp3099
sbsS'TPreprocessor_ignore'
p3100
(i__main__
ClassDefinition
p3101
(dp3102
g4
I1
sg5
I01
sg6
g3100
sg7
S'TPreprocessor'
p3103
sg9
I00
sg10
(lp3104
sg12
(lp3105
(S'TVarList'
p3106
S'attributes'
p3107
g3107
S'tells which attributes to remove'
p3108
I0
I0
I00
Ntp3109
asg29
(dp3110
sbsS'TEVDist'
p3111
(i__main__
ClassDefinition
p3112
(dp3113
g4
I1
sg5
I01
sg6
g3111
sg7
S'TOrange'
p3114
sg9
I00
sg10
(lp3115
sg12
(lp3116
(S'float'
p3117
S'mu'
p3118
g3118
S'mu of Fisher-Tippett distribution'
p3119
I0
I0
I01
Ntp3120
a(S'float'
p3121
S'beta'
p3122
g3122
S'beta of Fisher-Tippett distribution'
p3123
I0
I0
I01
Ntp3124
a(S'TFloatList'
p3125
S'percentiles'
p3126
g3126
S'usually 10 values - 0 = 5th percentile, 1 = 15th percentile, 9 = 95th percentile, change maxPercentile and step for other settings'
p3127
I0
I0
I00
Ntp3128
a(S'float'
p3129
S'maxPercentile'
p3130
S'max_percentile'
p3131
S'maxPercentile Value, default 0.95'
p3132
I0
I0
I01
Ntp3133
a(S'float'
p3134
S'step'
p3135
g3135
S'step of percentiles, default 0.1'
p3136
I0
I0
I01
Ntp3137
asg29
(dp3138
sbsS'TMeasureAttribute_Python'
p3139
(i__main__
ClassDefinition
p3140
(dp3141
g4
I1
sg5
I01
sg6
g3139
sg7
S'TMeasureAttribute'
p3142
sg9
I00
sg10
(lp3143
sg12
(lp3144
g942
ag947
ag952
ag957
asg29
(dp3145
sbsS'TDistributionAssessor_Measure'
p3146
(i__main__
ClassDefinition
p3147
(dp3148
g4
I1
sg5
I01
sg6
g3146
sg7
S'TDistributionAssessor'
p3149
sg9
I00
sg10
(lp3150
sg12
(lp3151
(S'TMeasureAttribute'
p3152
S'measure'
p3153
g3153
S'attribute quality measure'
p3154
I0
I0
I00
Ntp3155
asg29
(dp3156
sbsS'TDistributionAssessor_m'
p3157
(i__main__
ClassDefinition
p3158
(dp3159
g4
I1
sg5
I01
sg6
g3157
sg7
S'TDistributionAssessor'
p3160
sg9
I00
sg10
(lp3161
sg12
(lp3162
(S'float'
p3163
g1228
g1228
S'm for m-estimate'
p3164
I0
I0
I01
Ntp3165
asg29
(dp3166
sbsS'TClassifierRandomGenerator'
p3167
(i__main__
ClassDefinition
p3168
(dp3169
g4
I1
sg5
I01
sg6
g3167
sg7
S'TExampleGenerator'
p3170
sg9
I00
sg10
(lp3171
sg12
(lp3172
(S'TClassifier'
p3173
S'classify'
p3174
g3174
S'classifier'
p3175
I0
I0
I00
Ntp3176
a(S'int'
p3177
S'noOfEx'
p3178
S'no_of_ex'
p3179
S'number of examples'
p3180
I0
I0
I01
Ntp3181
ag322
ag326
asg29
(dp3182
sbsS'TThresholdDiscretizer'
p3183
(i__main__
ClassDefinition
p3184
(dp3185
g4
I1
sg5
I01
sg6
g3183
sg7
S'TDiscretizer'
p3186
sg9
I00
sg10
(lp3187
sg12
(lp3188
(S'float'
p3189
S'threshold'
p3190
g3190
S'threshold'
p3191
I0
I0
I01
Ntp3192
ag840
asg29
(dp3193
sbsS'TPathfinder'
p3194
(i__main__
ClassDefinition
p3195
(dp3196
g115
I1
sg116
I0
sg117
g3194
sg118
S'TOrange'
p3197
sg120
I00
sg121
(lp3198
sg123
(lp3199
sg125
(dp3200
sbsS'TExampleTable'
p3201
(i__main__
ClassDefinition
p3202
(dp3203
g4
I1
sg5
I01
sg6
g3201
sg7
S'TExampleGenerator'
p3204
sg9
I00
sg10
(lp3205
sg12
(lp3206
(S'TRandomGenerator'
p3207
S'randomGenerator'
p3208
S'random_generator'
p3209
S'random generator used by randomExample'
p3210
I0
I0
I00
Ntp3211
a(S'TExampleGenerator'
p3212
S'lock'
p3213
(g3213
S'owner'
p3214
tp3215
S' the real owner of examples'
p3216
I01
I0
I00
Ntp3217
a(S'bool'
p3218
S'ownsExamples'
p3219
(g3219
S'owns_instances'
p3220
tp3221
S' if false, examples in this table are references to examples in another table'
p3222
I01
I0
I01
Ntp3223
ag322
ag326
asg29
(dp3224
sbsS'TEVDistGetter'
p3225
(i__main__
ClassDefinition
p3226
(dp3227
g4
I1
sg5
I01
sg6
g3225
sg7
S'TOrange'
p3228
sg9
I01
sg10
(lp3229
sg12
(lp3230
sg29
(dp3231
sbsS'TTreeSplitConstructor_Threshold'
p3232
(i__main__
ClassDefinition
p3233
(dp3234
g4
I1
sg5
I01
sg6
g3232
sg7
S'TTreeSplitConstructor_Measure'
p3235
sg9
I00
sg10
(lp3236
sg12
(lp3237
g1318
ag1323
ag803
asg29
(dp3238
sbsS'TMakeRandomIndicesN'
p3239
(i__main__
ClassDefinition
p3240
(dp3241
g4
I1
sg5
I01
sg6
g3239
sg7
S'TMakeRandomIndices'
p3242
sg9
I00
sg10
(lp3243
sg12
(lp3244
(S'TFloatList'
p3245
g2307
g2307
S'probabilities of indices (last is 1-sum(p))'
p3246
I0
I0
I00
Ntp3247
ag734
ag738
ag743
asg29
(dp3248
sbsS'TStopDistributionClustering_n'
p3249
(i__main__
ClassDefinition
p3250
(dp3251
g4
I1
sg5
I01
sg6
g3249
sg7
S'TStopDistributionClustering'
p3252
sg9
I00
sg10
(lp3253
sg12
(lp3254
(S'int'
p3255
g1034
g1034
S'number of clusters'
p3256
I0
I0
I01
Ntp3257
asg29
(dp3258
sbsS'TTreeExampleSplitter_UnknownsAsSelector'
p3259
(i__main__
ClassDefinition
p3260
(dp3261
g4
I1
sg5
I01
sg6
g3259
sg7
S'TTreeExampleSplitter'
p3262
sg9
I00
sg10
(lp3263
sg12
(lp3264
sg29
(dp3265
sbsS'TClassifier_Python'
p3266
(i__main__
ClassDefinition
p3267
(dp3268
g4
I1
sg5
I01
sg6
g3266
sg7
S'TClassifier'
p3269
sg9
I00
sg10
(lp3270
sg12
(lp3271
g94
ag99
asg29
(dp3272
sbsS'TSgnRelStress'
p3273
(i__main__
ClassDefinition
p3274
(dp3275
g115
I1
sg116
I0
sg117
g3273
sg118
S'TStressFunc'
p3276
sg120
I00
sg121
(lp3277
sg123
(lp3278
sg125
(dp3279
sbsS'TFilter_isDefined'
p3280
(i__main__
ClassDefinition
p3281
(dp3282
g4
I1
sg5
I01
sg6
g3280
sg7
S'TFilter'
p3283
sg9
I00
sg10
(lp3284
sg12
(lp3285
(S'TAttributedBoolList'
p3286
S'check'
p3287
g3287
S'tells which attributes to check; checks all if the list is empty'
p3288
I0
I0
I00
Ntp3289
ag711
ag715
asg29
(dp3290
sbsS'TRemoveRedundantByQuality'
p3291
(i__main__
ClassDefinition
p3292
(dp3293
g4
I1
sg5
I01
sg6
g3291
sg7
S'TRemoveRedundant'
p3294
sg9
I00
sg10
(lp3295
sg12
(lp3296
(S'bool'
p3297
S'remeasure'
p3298
g3298
S'reapply the measure after removal'
p3299
I0
I0
I01
Ntp3300
a(S'float'
p3301
S'minQuality'
p3302
S'min_quality'
p3303
S'minimal acceptable quality'
p3304
I0
I0
I01
Ntp3305
a(S'int'
p3306
S'removeBut'
p3307
S'remove_but'
p3308
S'the desired number of attributes'
p3309
I0
I0
I01
Ntp3310
a(S'TMeasureAttribute'
p3311
S'measure'
p3312
g3312
S'attribute quality measure'
p3313
I0
I0
I00
Ntp3314
ag1361
asg29
(dp3315
sbsS'TGraphAsList'
p3316
(i__main__
ClassDefinition
p3317
(dp3318
g4
I1
sg5
I01
sg6
g3316
sg7
S'TGraph'
p3319
sg9
I00
sg10
(lp3320
sg12
(lp3321
g1506
ag1511
ag1515
asg29
(dp3322
sbsS'TProbabilityEstimatorConstructor_m'
p3323
(i__main__
ClassDefinition
p3324
(dp3325
g4
I1
sg5
I01
sg6
g3323
sg7
S'TProbabilityEstimatorConstructor'
p3326
sg9
I00
sg10
(lp3327
sg12
(lp3328
(S'float'
p3329
g1228
g1228
S'parameter m for m-estimation'
p3330
I0
I0
I01
Ntp3331
a(S'bool'
p3332
S'renormalize'
p3333
g3333
S'computes the estimate on the original (not the normalized) distribution'
p3334
I0
I0
I01
Ntp3335
asg29
(dp3336
sbsS'TDistanceMap'
p3337
(i__main__
ClassDefinition
p3338
(dp3339
g4
I1
sg5
I01
sg6
g3337
sg7
S'TOrange'
p3340
sg9
I00
sg10
(lp3341
sg12
(lp3342
(S'int'
p3343
S'dim'
p3344
g3344
S'bitmap dimension (in cells)'
p3345
I01
I0
I01
Ntp3346
a(S'int'
p3347
S'matrixType'
p3348
S'matrix_type'
p3349
S'0 lower, 1 upper, 2 symmetric'
p3350
I0
I0
I01
Ntp3351
a(S'TIntList'
p3352
S'elementIndices'
p3353
S'element_indices'
p3354
S'indices to elements (one for row + one at the end)'
p3355
I01
I0
I00
Ntp3356
asg29
(dp3357
sbsS'TDistanceMapConstructor'
p3358
(i__main__
ClassDefinition
p3359
(dp3360
g4
I1
sg5
I01
sg6
g3358
sg7
S'TOrange'
p3361
sg9
I00
sg10
(lp3362
sg12
(lp3363
(S'TSymMatrix'
p3364
S'distanceMatrix'
p3365
S'distance_matrix'
p3366
S'distance matrix'
p3367
I0
I0
I00
Ntp3368
a(S'TIntList'
p3369
S'order'
p3370
g3370
S'order of elements'
p3371
I0
I0
I00
Ntp3372
asg29
(dp3373
sbsS'TTransformValue'
p3374
(i__main__
ClassDefinition
p3375
(dp3376
g4
I1
sg5
I01
sg6
g3374
sg7
S'TOrange'
p3377
sg9
I01
sg10
(lp3378
sg12
(lp3379
g840
asg29
(dp3380
sbsS'TComputeDomainContingency_DomainTransformation'
p3381
(i__main__
ClassDefinition
p3382
(dp3383
g4
I1
sg5
I01
sg6
g3381
sg7
S'TComputeDomainContingency'
p3384
sg9
I00
sg10
(lp3385
sg12
(lp3386
(S'TDomainTransformerConstructor'
p3387
S'domainTransformerConstructor'
p3388
S'domain_transformer_constructor'
p3389
S'constructs a domain in which each attribute corresponds one of originals'
p3390
I0
I0
I00
Ntp3391
a(S'bool'
p3392
S'resultInOriginalDomain'
p3393
S'result_in_original_domain'
p3394
S'tells whether the resulting DomainContingency should consist of original attributes'
p3395
I0
I0
I01
Ntp3396
ag28
asg29
(dp3397
sbsS'TStopDistributionClustering_noBigChange'
p3398
(i__main__
ClassDefinition
p3399
(dp3400
g4
I1
sg5
I01
sg6
g3398
sg7
S'TStopDistributionClustering'
p3401
sg9
I00
sg10
(lp3402
sg12
(lp3403
sg29
(dp3404
sbsS'TTreePruner'
p3405
(i__main__
ClassDefinition
p3406
(dp3407
g4
I1
sg5
I01
sg6
g3405
sg7
S'TOrange'
p3408
sg9
I01
sg10
(lp3409
sg12
(lp3410
sg29
(dp3411
sbsg1846
(ipyprops
ClassDefinition
p3412
(dp3413
g151
I0
sg152
I01
sg153
g1846
sg154
g155
sg156
I0
sg157
(lp3414
sg159
(lp3415
sg161
(dp3416
sbsS'TStringValue'
p3417
(i__main__
ClassDefinition
p3418
(dp3419
g4
I1
sg5
I01
sg6
g3417
sg7
S'TSomeValue'
p3420
sg9
I00
sg10
(lp3421
sg12
(lp3422
sg29
(dp3423
sbsS'TVarList'
p3424
(ipyprops
ClassDefinition
p3425
(dp3426
g151
I0
sg152
I01
sg153
g3424
sg154
g155
sg156
I0
sg157
(lp3427
sg159
(lp3428
sg161
(dp3429
sbsS'TRuleLearner'
p3430
(i__main__
ClassDefinition
p3431
(dp3432
g4
I1
sg5
I01
sg6
g3430
sg7
S'TLearner'
p3433
sg9
I00
sg10
(lp3434
sg12
(lp3435
(S'TRuleDataStoppingCriteria'
p3436
S'dataStopping'
p3437
S'data_stopping'
p3438
g589
I0
I0
I00
Ntp3439
a(S'TRuleStoppingCriteria'
p3440
S'ruleStopping'
p3441
S'rule_stopping'
p3442
g589
I0
I0
I00
Ntp3443
a(S'TRuleCovererAndRemover'
p3444
S'coverAndRemove'
p3445
S'cover_and_remove'
p3446
g589
I0
I0
I00
Ntp3447
a(S'TRuleFinder'
p3448
S'ruleFinder'
p3449
S'rule_finder'
p3450
g589
I0
I0
I00
Ntp3451
a(S'TRuleClassifierConstructor'
p3452
S'classifierConstructor'
p3453
S'classifier_constructor'
p3454
S'classifier'
p3455
I0
I0
I00
Ntp3456
a(S'TProgressCallback'
p3457
S'progressCallback'
p3458
S'progress_callback'
p3459
S'progress callback function'
p3460
I0
I0
I00
Ntp3461
a(S'bool'
p3462
S'storeExamples'
p3463
S'store_examples'
p3464
g589
I0
I0
I01
Ntp3465
a(S'int'
p3466
S'targetClass'
p3467
S'target_class'
p3468
g589
I0
I0
I01
Ntp3469
a(S'TRuleList'
p3470
S'baseRules'
p3471
S'base_rules'
p3472
g589
I0
I0
I00
Ntp3473
ag110
asg29
(dp3474
sbsS'TOrdinal2Continuous'
p3475
(i__main__
ClassDefinition
p3476
(dp3477
g4
I1
sg5
I01
sg6
g3475
sg7
S'TTransformValue'
p3478
sg9
I00
sg10
(lp3479
sg12
(lp3480
(S'float'
p3481
S'factor'
p3482
g3482
S'number of values'
p3483
I0
I0
I01
Ntp3484
ag840
asg29
(dp3485
sbsS'TMultiLearner'
p3486
(i__main__
ClassDefinition
p3487
(dp3488
g4
I1
sg5
I01
sg6
g3486
sg7
S'TOrange'
p3489
sg9
I00
sg10
(lp3490
sg12
(lp3491
(S'int'
p3492
S'needs'
p3493
g3493
S'the kind of data that learner needs'
p3494
I01
I0
I01
Ntp3495
a(S'TDomain'
p3496
S'domain'
p3497
g3497
S'domain'
p3498
I0
I0
I00
Ntp3499
asg29
(dp3500
sbsS'TLinearLearner'
p3501
(i__main__
ClassDefinition
p3502
(dp3503
g4
I1
sg5
I01
sg6
g3501
sg7
S'TLearner'
p3504
sg9
I00
sg10
(lp3505
sg12
(lp3506
(S'int'
p3507
S'solver_type'
p3508
g3508
S' Solver type (loss function1)'
p3509
I0
I0
I01
S'LinearLearner_Lossfunction1'
p3510
tp3511
a(S'float'
p3512
S'eps'
p3513
g3513
S'Stopping criteria'
p3514
I0
I0
I01
Ntp3515
a(S'float'
p3516
S'C'
p3517
g3517
S'Regularization parameter'
p3518
I0
I0
I01
Ntp3519
a(S'float'
p3520
S'bias'
p3521
g3521
S'bias parameter (default -1.0 - no bias)'
p3522
I0
I0
I01
Ntp3523
ag110
asg29
(dp3524
S'LIBLINEAR_VERSION'
p3525
(lp3526
(S'VERSION'
p3527
S'180'
p3528
tp3529
asS'Lossfunction1'
p3530
(lp3531
(S'L2R_LR'
p3532
I0
tp3533
a(S'L2R_L2Loss_SVC_Dual'
p3534
I1
tp3535
a(S'L2R_L2Loss_SVC'
p3536
I2
tp3537
a(S'L2R_L1Loss_SVC_Dual'
p3538
I3
tp3539
a(S'MCSVM_CS'
p3540
I4
tp3541
a(S'L1R_L2Loss_SVC'
p3542
I5
tp3543
a(S'L1R_LR'
p3544
I6
tp3545
a(S'L2R_LR_Dual'
p3546
I7
tp3547
asS'Lossfunction1_old_'
p3548
(lp3549
(S'L2_LR'
p3550
I0
tp3551
a(S'L2Loss_SVM_Dual'
p3552
I1
tp3553
a(S'L2Loss_SVM'
p3554
I2
tp3555
a(S'L1Loss_SVM_Dual'
p3556
I3
tp3557
assbsS'TTreeSplitConstructor_Combined'
p3558
(i__main__
ClassDefinition
p3559
(dp3560
g4
I1
sg5
I01
sg6
g3558
sg7
S'TTreeSplitConstructor'
p3561
sg9
I00
sg10
(lp3562
sg12
(lp3563
(S'TTreeSplitConstructor'
p3564
S'discreteSplitConstructor'
p3565
S'discrete_split_constructor'
p3566
S'split constructor for discrete attributes'
p3567
I0
I0
I00
Ntp3568
a(S'TTreeSplitConstructor'
p3569
S'continuousSplitConstructor'
p3570
S'continuous_split_constructor'
p3571
S'split constructor for continuous attributes'
p3572
I0
I0
I00
Ntp3573
ag803
asg29
(dp3574
sbsS'TTransformValue_Python'
p3575
(i__main__
ClassDefinition
p3576
(dp3577
g4
I1
sg5
I01
sg6
g3575
sg7
S'TTransformValue'
p3578
sg9
I00
sg10
(lp3579
sg12
(lp3580
g840
asg29
(dp3581
sbsS'TRuleStoppingCriteria_Python'
p3582
(i__main__
ClassDefinition
p3583
(dp3584
g4
I1
sg5
I01
sg6
g3582
sg7
S'TRuleStoppingCriteria'
p3585
sg9
I00
sg10
(lp3586
sg12
(lp3587
sg29
(dp3588
sbsS'TRuleEvaluator_Python'
p3589
(i__main__
ClassDefinition
p3590
(dp3591
g4
I1
sg5
I01
sg6
g3589
sg7
S'TRuleEvaluator'
p3592
sg9
I00
sg10
(lp3593
sg12
(lp3594
sg29
(dp3595
sbsS'TIGBySorting'
p3596
(i__main__
ClassDefinition
p3597
(dp3598
g4
I1
sg5
I01
sg6
g3596
sg7
S'TIGConstructor'
p3599
sg9
I00
sg10
(lp3600
sg12
(lp3601
sg29
(dp3602
sbsS'TConditionalProbabilityEstimator_ByRows'
p3603
(i__main__
ClassDefinition
p3604
(dp3605
g4
I1
sg5
I01
sg6
g3603
sg7
S'TConditionalProbabilityEstimator'
p3606
sg9
I00
sg10
(lp3607
sg12
(lp3608
(S'TProbabilityEstimatorList'
p3609
S'estimatorList'
p3610
S'estimator_list'
p3611
S'A list of probability estimators'
p3612
I0
I0
I00
Ntp3613
ag141
ag146
asg29
(dp3614
sbsS'TFindNearest'
p3615
(i__main__
ClassDefinition
p3616
(dp3617
g4
I1
sg5
I01
sg6
g3615
sg7
S'TOrange'
p3618
sg9
I01
sg10
(lp3619
sg12
(lp3620
g1107
ag1112
asg29
(dp3621
sbsS'TProgressCallback'
p3622
(i__main__
ClassDefinition
p3623
(dp3624
g4
I1
sg5
I01
sg6
g3622
sg7
S'TOrange'
p3625
sg9
I01
sg10
(lp3626
sg12
(lp3627
sg29
(dp3628
sbsS'THierarchicalClustering'
p3629
(i__main__
ClassDefinition
p3630
(dp3631
g4
I1
sg5
I01
sg6
g3629
sg7
S'TOrange'
p3632
sg9
I00
sg10
(lp3633
sg12
(lp3634
(S'int'
p3635
S'linkage'
p3636
g3636
S' linkage'
p3637
I0
I0
I01
S'HierarchicalClustering_Linkage'
p3638
tp3639
a(S'bool'
p3640
S'overwriteMatrix'
p3641
S'overwrite_matrix'
p3642
S'if true (default is false) it will use (and destroy) the distance matrix given as argument'
p3643
I0
I0
I01
Ntp3644
a(S'TProgressCallback'
p3645
S'progressCallback'
p3646
S'progress_callback'
p3647
S'progress callback function'
p3648
I0
I0
I00
Ntp3649
asg29
(dp3650
S'Linkage'
p3651
(lp3652
(S'Single'
p3653
I0
tp3654
a(S'Average'
p3655
I1
tp3656
a(S'Complete'
p3657
I2
tp3658
a(S'Ward'
p3659
I3
tp3660
assbsS'TLogRegFitter_Cholesky'
p3661
(i__main__
ClassDefinition
p3662
(dp3663
g4
I1
sg5
I01
sg6
g3661
sg7
S'TLogRegFitter'
p3664
sg9
I00
sg10
(lp3665
sg12
(lp3666
sg29
(dp3667
sbsS'TClassifierFromVar'
p3668
(i__main__
ClassDefinition
p3669
(dp3670
g4
I1
sg5
I01
sg6
g3668
sg7
S'TClassifier'
p3671
sg9
I00
sg10
(lp3672
sg12
(lp3673
(S'TVariable'
p3674
S'whichVar'
p3675
(g3675
S'variable'
p3676
tp3677
S' variable'
p3678
I0
I0
I00
Ntp3679
a(S'TTransformValue'
p3680
S'transformer'
p3681
g3681
S'transformer'
p3682
I0
I0
I00
Ntp3683
a(S'TDistribution'
p3684
S'distributionForUnknown'
p3685
S'distribution_for_unknown'
p3686
S'distribution for unknown value'
p3687
I0
I0
I00
Ntp3688
a(S'bool'
p3689
S'transformUnknowns'
p3690
S'transform_unknowns'
p3691
S'if false (default), unknowns stay unknown or are changed into distribution if given'
p3692
I0
I0
I01
Ntp3693
ag94
ag99
asg29
(dp3694
sbsg2363
(ipyprops
ClassDefinition
p3695
(dp3696
g151
I0
sg152
I01
sg153
g2363
sg154
g155
sg156
I0
sg157
(lp3697
sg159
(lp3698
sg161
(dp3699
sbsS'TFilter_index'
p3700
(ipyprops
ClassDefinition
p3701
(dp3702
g151
I0
sg152
I01
sg153
g3700
sg154
g155
sg156
I0
sg157
(lp3703
sg159
(lp3704
sg161
(dp3705
sbsS'TIM'
p3706
(i__main__
ClassDefinition
p3707
(dp3708
g4
I1
sg5
I01
sg6
g3706
sg7
S'TOrange'
p3709
sg9
I00
sg10
(lp3710
sg12
(lp3711
(S'int'
p3712
S'varType'
p3713
S'var_type'
p3714
S' class variable type'
p3715
I0
I0
I01
S'Variable_Type'
p3716
tp3717
a(S'TExampleTable'
p3718
S'rowExamples'
p3719
S'row_examples'
p3720
S'examples with free attributes for each row'
p3721
I0
I0
I00
Ntp3722
asg29
(dp3723
sbsS'TTreeSplitConstructor_OneAgainstOthers'
p3724
(i__main__
ClassDefinition
p3725
(dp3726
g4
I1
sg5
I01
sg6
g3724
sg7
S'TTreeSplitConstructor_Measure'
p3727
sg9
I00
sg10
(lp3728
sg12
(lp3729
g1318
ag1323
ag803
asg29
(dp3730
sbsS'TClassifier'
p3731
(i__main__
ClassDefinition
p3732
(dp3733
g4
I1
sg5
I01
sg6
g3731
sg7
S'TOrange'
p3734
sg9
I00
sg10
(lp3735
sg12
(lp3736
g94
ag99
asg29
(dp3737
sbsS'TTreeSplitConstructor_Python'
p3738
(i__main__
ClassDefinition
p3739
(dp3740
g4
I1
sg5
I01
sg6
g3738
sg7
S'TTreeSplitConstructor'
p3741
sg9
I00
sg10
(lp3742
sg12
(lp3743
g803
asg29
(dp3744
sbsS'TIG'
p3745
(i__main__
ClassDefinition
p3746
(dp3747
g4
I1
sg5
I01
sg6
g3745
sg7
S'TOrange'
p3748
sg9
I00
sg10
(lp3749
sg12
(lp3750
sg29
(dp3751
sbsS'TMeasureAttribute_relief'
p3752
(i__main__
ClassDefinition
p3753
(dp3754
g4
I1
sg5
I01
sg6
g3752
sg7
S'TMeasureAttribute'
p3755
sg9
I00
sg10
(lp3756
sg12
(lp3757
(S'float'
p3758
g1224
g1224
S'number of neighbours'
p3759
I0
I0
I01
Ntp3760
a(S'float'
p3761
g1228
g1228
S'number of reference examples'
p3762
I0
I0
I01
Ntp3763
a(S'bool'
p3764
S'checkCachedData'
p3765
S'check_cached_data'
p3766
S'tells whether to check the checksum of the data before reusing the cached neighbours'
p3767
I0
I0
I01
Ntp3768
ag942
ag947
ag952
ag957
asg29
(dp3769
sbsS'TEarthLearner'
p3770
(i__main__
ClassDefinition
p3771
(dp3772
g4
I1
sg5
I01
sg6
g3770
sg7
S'TLearner'
p3773
sg9
I00
sg10
(lp3774
sg12
(lp3775
(S'int'
p3776
S'max_terms'
p3777
g3777
S'Maximum number of terms.'
p3778
I0
I0
I01
Ntp3779
a(S'int'
p3780
S'max_degree'
p3781
g3781
S'Maximum degree of terms.'
p3782
I0
I0
I01
Ntp3783
a(S'float'
p3784
S'penalty'
p3785
g3785
S'Penalty.'
p3786
I0
I0
I01
Ntp3787
a(S'float'
p3788
S'threshold'
p3789
g3789
S'Forward step threshold.'
p3790
I0
I0
I01
Ntp3791
a(S'bool'
p3792
S'prune'
p3793
g3793
S'Prune terms (do backward pass).'
p3794
I0
I0
I01
Ntp3795
a(S'float'
p3796
S'fast_beta'
p3797
g3797
S'Fast beta (aging coefficient).'
p3798
I0
I0
I01
Ntp3799
a(S'float'
p3800
S'trace'
p3801
g3801
S'Execution trace (for debugging only).'
p3802
I0
I0
I01
Ntp3803
a(S'int'
p3804
S'min_span'
p3805
g3805
S'Min. span (training instances) between knots.'
p3806
I0
I0
I01
Ntp3807
a(S'int'
p3808
S'fast_k'
p3809
g3809
S'Fast K.'
p3810
I0
I0
I01
Ntp3811
a(S'bool'
p3812
S'new_var_penalty'
p3813
g3813
S'Penalty for adding a new variable.'
p3814
I0
I0
I01
Ntp3815
a(S'bool'
p3816
S'use_beta_cache'
p3817
g3817
S'Use caching for betas.'
p3818
I0
I0
I01
Ntp3819
ag110
asg29
(dp3820
sbsS'TMeasureAttribute_logOddsRatio'
p3821
(i__main__
ClassDefinition
p3822
(dp3823
g4
I1
sg5
I01
sg6
g3821
sg7
S'TMeasureAttributeFromProbabilities'
p3824
sg9
I00
sg10
(lp3825
sg12
(lp3826
g926
ag931
ag937
ag942
ag947
ag952
ag957
asg29
(dp3827
sbsS'TTreeExampleSplitter_Python'
p3828
(i__main__
ClassDefinition
p3829
(dp3830
g4
I1
sg5
I01
sg6
g3828
sg7
S'TTreeExampleSplitter'
p3831
sg9
I00
sg10
(lp3832
sg12
(lp3833
sg29
(dp3834
sbsS'TKernelFunc_Python'
p3835
(i__main__
ClassDefinition
p3836
(dp3837
g4
I1
sg5
I01
sg6
g3835
sg7
S'TKernelFunc'
p3838
sg9
I00
sg10
(lp3839
sg12
(lp3840
sg29
(dp3841
sbsS'TAdapterGenerator'
p3842
(i__main__
ClassDefinition
p3843
(dp3844
g4
I1
sg5
I01
sg6
g3842
sg7
S'TExampleGenerator'
p3845
sg9
I00
sg10
(lp3846
sg12
(lp3847
g322
ag326
asg29
(dp3848
sbsS'TIMFromExamples'
p3849
(i__main__
ClassDefinition
p3850
(dp3851
g4
I1
sg5
I01
sg6
g3849
sg7
S'TOrange'
p3852
sg9
I01
sg10
(lp3853
sg12
(lp3854
sg29
(dp3855
sbsS'TFilter_random'
p3856
(i__main__
ClassDefinition
p3857
(dp3858
g4
I1
sg5
I01
sg6
g3856
sg7
S'TFilter'
p3859
sg9
I00
sg10
(lp3860
sg12
(lp3861
(S'float'
p3862
S'prob'
p3863
g3863
S'probability of selecting an example'
p3864
I0
I0
I01
Ntp3865
a(S'TRandomGenerator'
p3866
S'randomGenerator'
p3867
S'random_generator'
p3868
S'random generator'
p3869
I0
I0
I00
Ntp3870
ag711
ag715
asg29
(dp3871
sbsS'TC45ExampleGenerator'
p3872
(i__main__
ClassDefinition
p3873
(dp3874
g4
I1
sg5
I01
sg6
g3872
sg7
S'TFileExampleGenerator'
p3875
sg9
I00
sg10
(lp3876
sg12
(lp3877
(S'TBoolList'
p3878
S'skip'
p3879
g3879
S'a boolean list, one element per attribute, denoting which attributes to skip'
p3880
I0
I0
I00
Ntp3881
ag1671
ag1676
ag1681
ag322
ag326
asg29
(dp3882
sbsS'TProbabilityEstimatorConstructor_loess'
p3883
(i__main__
ClassDefinition
p3884
(dp3885
g4
I1
sg5
I01
sg6
g3883
sg7
S'TProbabilityEstimatorConstructor'
p3886
sg9
I00
sg10
(lp3887
sg12
(lp3888
(S'float'
p3889
S'windowProportion'
p3890
S'window_proportion'
p3891
S'The proportion of points in a window for LR'
p3892
I0
I0
I01
Ntp3893
a(S'int'
p3894
S'nPoints'
p3895
S'n_points'
p3896
S'The number of points on curve (negative means the given number of points is inserted in each interval)'
p3897
I0
I0
I01
Ntp3898
a(S'int'
p3899
S'distributionMethod'
p3900
S'distribution_method'
p3901
S" Meaning of the 'nPoints'"
p3902
I0
I0
I01
S'ProbabilityEstimatorConstructor_loess_DistributionMethod'
p3903
tp3904
asg29
(dp3905
S'DistributionMethod'
p3906
(lp3907
(S'Minimal'
p3908
S'DISTRIBUTE_MINIMAL'
p3909
tp3910
a(S'Factor'
p3911
S'DISTRIBUTE_FACTOR'
p3912
tp3913
a(S'Fixed'
p3914
S'DISTRIBUTE_FIXED'
p3915
tp3916
a(S'Uniform'
p3917
S'DISTRIBUTE_UNIFORM'
p3918
tp3919
a(S'Maximal'
p3920
S'DISTRIBUTE_MAXIMAL'
p3921
tp3922
assbsS'TExamplesDistance_Lp'
p3923
(i__main__
ClassDefinition
p3924
(dp3925
g4
I1
sg5
I01
sg6
g3923
sg7
S'TExamplesDistance_Normalized'
p3926
sg9
I00
sg10
(lp3927
sg12
(lp3928
(S'float'
p3929
g2307
g2307
g2307
I01
I0
I01
Ntp3930
ag470
ag474
ag478
ag482
ag487
ag491
ag496
asg29
(dp3931
sbsS'TLogRegFitter'
p3932
(i__main__
ClassDefinition
p3933
(dp3934
g4
I1
sg5
I01
sg6
g3932
sg7
S'TOrange'
p3935
sg9
I01
sg10
(lp3936
sg12
(lp3937
sg29
(dp3938
S'ErrorCode'
p3939
(lp3940
(S'OK'
p3941
I0
tp3942
a(S'Infinity'
p3943
I1
tp3944
a(S'Divergence'
p3945
I2
tp3946
a(S'Constant'
p3947
I3
tp3948
a(S'Singularity'
p3949
I4
tp3950
assbsS'TProbabilityEstimatorList'
p3951
(ipyprops
ClassDefinition
p3952
(dp3953
g151
I0
sg152
I01
sg153
g3951
sg154
g155
sg156
I0
sg157
(lp3954
sg159
(lp3955
sg161
(dp3956
sbsS'TMakeRandomIndicesCV'
p3957
(i__main__
ClassDefinition
p3958
(dp3959
g4
I1
sg5
I01
sg6
g3957
sg7
S'TMakeRandomIndices'
p3960
sg9
I00
sg10
(lp3961
sg12
(lp3962
(S'int'
p3963
S'folds'
p3964
g3964
S'number of folds'
p3965
I0
I0
I01
Ntp3966
ag734
ag738
ag743
asg29
(dp3967
sbsS'TClassifierList'
p3968
(ipyprops
ClassDefinition
p3969
(dp3970
g151
I0
sg152
I01
sg153
g3968
sg154
g155
sg156
I0
sg157
(lp3971
sg159
(lp3972
sg161
(dp3973
sbsS'TPreprocessor_removeDuplicates'
p3974
(i__main__
ClassDefinition
p3975
(dp3976
g4
I1
sg5
I01
sg6
g3974
sg7
S'TPreprocessor'
p3977
sg9
I00
sg10
(lp3978
sg12
(lp3979
sg29
(dp3980
sbsS'TTreeExampleSplitter_UnknownsAsBranchSizes'
p3981
(i__main__
ClassDefinition
p3982
(dp3983
g4
I1
sg5
I01
sg6
g3981
sg7
S'TTreeExampleSplitter'
p3984
sg9
I00
sg10
(lp3985
sg12
(lp3986
sg29
(dp3987
sbsS'TExamplesDistanceConstructor_Normalized'
p3988
(i__main__
ClassDefinition
p3989
(dp3990
g4
I1
sg5
I01
sg6
g3988
sg7
S'TExamplesDistanceConstructor'
p3991
sg9
I01
sg10
(lp3992
sg12
(lp3993
g2141
ag2146
ag1383
asg29
(dp3994
sbsS'TCostWrapperLearner'
p3995
(i__main__
ClassDefinition
p3996
(dp3997
g4
I1
sg5
I01
sg6
g3995
sg7
S'TLearner'
p3998
sg9
I00
sg10
(lp3999
sg12
(lp4000
(S'TLearner'
p4001
S'basicLearner'
p4002
S'basic_learner'
p4003
S'basic learner'
p4004
I0
I0
I00
Ntp4005
a(S'TCostMatrix'
p4006
S'costMatrix'
p4007
S'cost_matrix'
p4008
S'cost matrix'
p4009
I0
I0
I00
Ntp4010
ag110
asg29
(dp4011
sbsS'TRandomLearner'
p4012
(i__main__
ClassDefinition
p4013
(dp4014
g4
I1
sg5
I01
sg6
g4012
sg7
S'TLearner'
p4015
sg9
I00
sg10
(lp4016
sg12
(lp4017
(S'TDistribution'
p4018
S'probabilities'
p4019
g4019
S'probabilities of predictions'
p4020
I0
I0
I00
Ntp4021
ag110
asg29
(dp4022
sbsS'TImputer_asValue'
p4023
(i__main__
ClassDefinition
p4024
(dp4025
g4
I1
sg5
I01
sg6
g4023
sg7
S'TImputer'
p4026
sg9
I00
sg10
(lp4027
sg12
(lp4028
(S'TDomain'
p4029
S'domain'
p4030
g4030
S'domain to which the values are converted'
p4031
I0
I0
I00
Ntp4032
a(S'TExample'
p4033
S'defaults'
p4034
g4034
S'values to impute instead of missing ones - for continuous attributes only!'
p4035
I0
I0
I00
Ntp4036
asg29
(dp4037
sbsS'TPearsonCorrelation'
p4038
(i__main__
ClassDefinition
p4039
(dp4040
g4
I1
sg5
I01
sg6
g4038
sg7
S'TOrange'
p4041
sg9
I00
sg10
(lp4042
sg12
(lp4043
(S'float'
p4044
S'r'
p4045
g4045
S'correlation coefficient'
p4046
I0
I0
I01
Ntp4047
a(S'float'
p4048
g2336
g2336
S't-statics significance'
p4049
I0
I0
I01
Ntp4050
a(S'int'
p4051
S'df'
p4052
g4052
S'degrees of freedom'
p4053
I0
I0
I01
Ntp4054
a(S'float'
p4055
g2307
g2307
S'significance'
p4056
I0
I0
I01
Ntp4057
asg29
(dp4058
sbsS'TDistributionAssessor_Laplace'
p4059
(i__main__
ClassDefinition
p4060
(dp4061
g4
I1
sg5
I01
sg6
g4059
sg7
S'TDistributionAssessor'
p4062
sg9
I00
sg10
(lp4063
sg12
(lp4064
sg29
(dp4065
sbsS'TColumnAssessor_Relief'
p4066
(i__main__
ClassDefinition
p4067
(dp4068
g4
I1
sg5
I01
sg6
g4066
sg7
S'TColumnAssessor'
p4069
sg9
I00
sg10
(lp4070
sg12
(lp4071
sg29
(dp4072
sbsS'TClassifierByLookupTable'
p4073
(i__main__
ClassDefinition
p4074
(dp4075
g4
I1
sg5
I01
sg6
g4073
sg7
S'TClassifier'
p4076
sg9
I01
sg10
(lp4077
sg12
(lp4078
g85
ag89
ag94
ag99
asg29
(dp4079
sbsS'TRuleBeamFinder'
p4080
(i__main__
ClassDefinition
p4081
(dp4082
g4
I1
sg5
I01
sg6
g4080
sg7
S'TRuleFinder'
p4083
sg9
I00
sg10
(lp4084
sg12
(lp4085
(S'TRuleBeamInitializer'
p4086
S'initializer'
p4087
g4087
g589
I0
I0
I00
Ntp4088
a(S'TRuleBeamRefiner'
p4089
S'refiner'
p4090
g4090
g589
I0
I0
I00
Ntp4091
a(S'TRuleBeamCandidateSelector'
p4092
S'candidateSelector'
p4093
S'candidate_selector'
p4094
g589
I0
I0
I00
Ntp4095
a(S'TRuleBeamFilter'
p4096
S'ruleFilter'
p4097
S'rule_filter'
p4098
g589
I0
I0
I00
Ntp4099
a(S'TRuleValidator'
p4100
S'ruleStoppingValidator'
p4101
S'rule_stopping_validator'
p4102
g589
I0
I0
I00
Ntp4103
a(S'TRuleValidator'
p4104
S'validator'
p4105
g4105
g589
I0
I0
I00
Ntp4106
a(S'TRuleEvaluator'
p4107
S'evaluator'
p4108
g4108
g589
I0
I0
I00
Ntp4109
asg29
(dp4110
sbsS'TC45Classifier'
p4111
(i__main__
ClassDefinition
p4112
(dp4113
g4
I1
sg5
I01
sg6
g4111
sg7
S'TClassifierFD'
p4114
sg9
I00
sg10
(lp4115
sg12
(lp4116
(S'TC45TreeNode'
p4117
S'tree'
p4118
g4118
S'tree'
p4119
I0
I0
I00
Ntp4120
ag307
ag94
ag99
asg29
(dp4121
sbsS'TGeneralExampleClustering'
p4122
(i__main__
ClassDefinition
p4123
(dp4124
g4
I1
sg5
I01
sg6
g4122
sg7
S'TOrange'
p4125
sg9
I01
sg10
(lp4126
sg12
(lp4127
sg29
(dp4128
sbsS'TMeasureAttribute_cost'
p4129
(i__main__
ClassDefinition
p4130
(dp4131
g4
I1
sg5
I01
sg6
g4129
sg7
S'TMeasureAttributeFromProbabilities'
p4132
sg9
I00
sg10
(lp4133
sg12
(lp4134
(S'TCostMatrix'
p4135
S'cost'
p4136
g4136
S'cost matrix'
p4137
I0
I0
I00
Ntp4138
ag926
ag931
ag937
ag942
ag947
ag952
ag957
asg29
(dp4139
sbsS'TImputerConstructor_minimal'
p4140
(i__main__
ClassDefinition
p4141
(dp4142
g4
I1
sg5
I01
sg6
g4140
sg7
S'TImputerConstructor'
p4143
sg9
I00
sg10
(lp4144
sg12
(lp4145
g180
asg29
(dp4146
sbsS'TClustersFromIM'
p4147
(i__main__
ClassDefinition
p4148
(dp4149
g4
I1
sg5
I01
sg6
g4147
sg7
S'TOrange'
p4150
sg9
I01
sg10
(lp4151
sg12
(lp4152
sg29
(dp4153
sbsS'TFilter_values'
p4154
(i__main__
ClassDefinition
p4155
(dp4156
g4
I1
sg5
I01
sg6
g4154
sg7
S'TFilter'
p4157
sg9
I00
sg10
(lp4158
sg12
(lp4159
(S'TValueFilterList'
p4160
S'conditions'
p4161
g4161
S'a list of filters'
p4162
I0
I0
I00
Ntp4163
a(S'bool'
p4164
S'conjunction'
p4165
g4165
S'if true, filter computes conjunction, otherwise disjunction'
p4166
I0
I0
I01
Ntp4167
ag711
ag715
asg29
(dp4168
S'Operator'
p4169
(lp4170
(S'None'
p4171
I0
tp4172
a(S'Equal'
p4173
I1
tp4174
a(S'NotEqual'
p4175
I2
tp4176
a(S'Less'
p4177
I3
tp4178
a(S'LessEqual'
p4179
I4
tp4180
a(S'Greater'
p4181
I5
tp4182
a(S'GreaterEqual'
p4183
I6
tp4184
a(S'Between'
p4185
I7
tp4186
a(S'Outside'
p4187
I8
tp4188
a(S'Contains'
p4189
I9
tp4190
a(S'NotContains'
p4191
I10
tp4192
a(S'BeginsWith'
p4193
I11
tp4194
a(S'EndsWith'
p4195
I12
tp4196
a(S'Listed'
p4197
I13
tp4198
assbsS'TRuleClassifier'
p4199
(i__main__
ClassDefinition
p4200
(dp4201
g4
I1
sg5
I01
sg6
g4199
sg7
S'TClassifier'
p4202
sg9
I01
sg10
(lp4203
sg12
(lp4204
g621
ag624
ag628
ag94
ag99
asg29
(dp4205
sbsS'TAssociationRules'
p4206
(ipyprops
ClassDefinition
p4207
(dp4208
g151
I0
sg152
I01
sg153
g4206
sg154
g155
sg156
I0
sg157
(lp4209
sg159
(lp4210
sg161
(dp4211
sbsS'TSymMatrix'
p4212
(i__main__
ClassDefinition
p4213
(dp4214
g4
I1
sg5
I01
sg6
g4212
sg7
S'TOrange'
p4215
sg9
I00
sg10
(lp4216
sg12
(lp4217
(S'int'
p4218
S'dim'
p4219
g4219
S'matrix dimension'
p4220
I01
I0
I01
Ntp4221
a(S'int'
p4222
S'matrixType'
p4223
S'matrix_type'
p4224
S' 0 lower, 1 upper, 2 symmetric, 3 lower_filled, 4 upper_filled'
p4225
I0
I0
I01
S'SymMatrix_Shape'
p4226
tp4227
asg29
(dp4228
S'Shape'
p4229
(lp4230
(S'Lower'
p4231
I0
tp4232
a(S'Upper'
p4233
I1
tp4234
a(S'Symmetric'
p4235
I2
tp4236
a(S'LowerFilled'
p4237
I3
tp4238
a(S'UpperFilled'
p4239
I4
tp4240
assbsS'TSVMLearner'
p4241
(i__main__
ClassDefinition
p4242
(dp4243
g4
I1
sg5
I01
sg6
g4241
sg7
S'TLearner'
p4244
sg9
I00
sg10
(lp4245
sg12
(lp4246
(S'int'
p4247
S'svm_type'
p4248
g4248
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p4249
I0
I0
I01
S'SVMLearner_SVMType'
p4250
tp4251
a(S'int'
p4252
S'kernel_type'
p4253
g4253
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p4254
I0
I0
I01
S'SVMLearner_Kernel'
p4255
tp4256
a(S'float'
p4257
S'degree'
p4258
g4258
S'polynomial kernel degree'
p4259
I0
I0
I01
Ntp4260
a(S'float'
p4261
S'gamma'
p4262
g4262
S'poly/rbf/sigm parameter'
p4263
I0
I0
I01
Ntp4264
a(S'float'
p4265
S'coef0'
p4266
g4266
S'poly/sigm parameter'
p4267
I0
I0
I01
Ntp4268
a(S'float'
p4269
S'cache_size'
p4270
g4270
S'cache size in MB'
p4271
I0
I0
I01
Ntp4272
a(S'float'
p4273
S'eps'
p4274
g4274
S'stopping criteria'
p4275
I0
I0
I01
Ntp4276
a(S'float'
p4277
g3517
g3517
S'for C_SVC and C_SVR'
p4278
I0
I0
I01
Ntp4279
a(S'float'
p4280
S'nu'
p4281
g4281
S'for NU_SVC and ONE_CLASS'
p4282
I0
I0
I01
Ntp4283
a(S'float'
p4284
g2307
g2307
S'for C_SVR'
p4285
I0
I0
I01
Ntp4286
a(S'int'
p4287
S'shrinking'
p4288
g4288
S'shrinking'
p4289
I0
I0
I01
Ntp4290
a(S'int'
p4291
S'probability'
p4292
g4292
S'probability'
p4293
I0
I0
I01
Ntp4294
a(S'bool'
p4295
S'verbose'
p4296
g4296
S'verbose'
p4297
I0
I0
I01
Ntp4298
a(S'TKernelFunc'
p4299
S'kernelFunc'
p4300
S'kernel_func'
p4301
S'custom kernel function'
p4302
I0
I0
I00
Ntp4303
ag110
asg29
(dp4304
S'Kernel'
p4305
(lp4306
(S'Linear'
p4307
S'LINEAR'
p4308
tp4309
a(S'Polynomial'
p4310
S'POLY'
p4311
tp4312
a(S'RBF'
p4313
S'RBF'
p4314
tp4315
a(S'Sigmoid'
p4316
S'SIGMOID'
p4317
tp4318
a(S'Custom'
p4319
S'PRECOMPUTED'
p4320
tp4321
asS'LIBSVM_VERSION'
p4322
(lp4323
(S'VERSION'
p4324
S'LIBSVM_VERSION'
p4325
tp4326
asS'SVMType'
p4327
(lp4328
(S'C_SVC'
p4329
S'C_SVC'
p4330
tp4331
a(S'Nu_SVC'
p4332
S'NU_SVC'
p4333
tp4334
a(S'OneClass'
p4335
S'ONE_CLASS'
p4336
tp4337
a(S'Epsilon_SVR'
p4338
S'EPSILON_SVR'
p4339
tp4340
a(S'Nu_SVR'
p4341
S'NU_SVR'
p4342
tp4343
assbsS'TPNN'
p4344
(i__main__
ClassDefinition
p4345
(dp4346
g4
I1
sg5
I01
sg6
g4344
sg7
S'TClassifierFD'
p4347
sg9
I00
sg10
(lp4348
sg12
(lp4349
g765
ag769
ag773
ag777
ag782
ag787
ag791
ag307
ag94
ag99
asg29
(dp4350
sbsS'TImputerConstructor_defaults'
p4351
(i__main__
ClassDefinition
p4352
(dp4353
g4
I1
sg5
I01
sg6
g4351
sg7
S'TImputerConstructor'
p4354
sg9
I00
sg10
(lp4355
sg12
(lp4356
(S'TExample'
p4357
S'defaults'
p4358
g4358
S'default values to be imputed instead missing ones'
p4359
I0
I0
I00
Ntp4360
ag180
asg29
(dp4361
sbsS'TConditionalProbabilityEstimatorConstructor'
p4362
(i__main__
ClassDefinition
p4363
(dp4364
g4
I1
sg5
I01
sg6
g4362
sg7
S'TOrange'
p4365
sg9
I01
sg10
(lp4366
sg12
(lp4367
sg29
(dp4368
sbsS'TPreprocessor_takeMissingClasses'
p4369
(i__main__
ClassDefinition
p4370
(dp4371
g4
I1
sg5
I01
sg6
g4369
sg7
S'TPreprocessor'
p4372
sg9
I00
sg10
(lp4373
sg12
(lp4374
sg29
(dp4375
sbsS'TClustersFromIMByAssessor'
p4376
(i__main__
ClassDefinition
p4377
(dp4378
g4
I1
sg5
I01
sg6
g4376
sg7
S'TClustersFromIM'
p4379
sg9
I00
sg10
(lp4380
sg12
(lp4381
(S'TColumnAssessor'
p4382
S'columnAssessor'
p4383
S'column_assessor'
p4384
S'column quality assessor'
p4385
I0
I0
I00
Ntp4386
a(S'TStopIMClusteringByAssessor'
p4387
S'stopCriterion'
p4388
S'stop_criterion'
p4389
S'stop criterion'
p4390
I0
I0
I00
Ntp4391
asg29
(dp4392
sbsS'TRuleValidator_LRS'
p4393
(i__main__
ClassDefinition
p4394
(dp4395
g4
I1
sg5
I01
sg6
g4393
sg7
S'TRuleValidator'
p4396
sg9
I00
sg10
(lp4397
sg12
(lp4398
(S'float'
p4399
S'alpha'
p4400
g4400
g589
I0
I0
I01
Ntp4401
a(S'float'
p4402
S'min_coverage'
p4403
g4403
g589
I0
I0
I01
Ntp4404
a(S'int'
p4405
S'max_rule_complexity'
p4406
g4406
g589
I0
I0
I01
Ntp4407
a(S'float'
p4408
S'min_quality'
p4409
g4409
g589
I0
I0
I01
Ntp4410
asg29
(dp4411
sbsS'TLogRegFitter_Python'
p4412
(i__main__
ClassDefinition
p4413
(dp4414
g4
I1
sg5
I01
sg6
g4412
sg7
S'TLogRegFitter'
p4415
sg9
I00
sg10
(lp4416
sg12
(lp4417
sg29
(dp4418
sbsS'TNetwork'
p4419
(i__main__
ClassDefinition
p4420
(dp4421
g115
I1
sg116
I0
sg117
g4419
sg118
S'TGraphAsList'
p4422
sg120
I00
sg121
(lp4423
sg123
(lp4424
(S'TExampleTable'
p4425
S'items'
p4426
g4426
S'ExampleTable of vertices data'
p4427
I0
I0
I00
Ntp4428
a(S'TExampleTable'
p4429
S'links'
p4430
g4430
S'ExampleTable of edges data'
p4431
I0
I0
I00
Ntp4432
ag1506
ag1511
ag1515
asg125
(dp4433
sbsS'TEarthClassifier'
p4434
(i__main__
ClassDefinition
p4435
(dp4436
g4
I1
sg5
I01
sg6
g4434
sg7
S'TClassifierFD'
p4437
sg9
I00
sg10
(lp4438
sg12
(lp4439
(S'int'
p4440
S'num_preds'
p4441
g4441
S'Number of predictor variables'
p4442
I0
I0
I01
Ntp4443
a(S'int'
p4444
S'num_terms'
p4445
g4445
S'Number of used terms'
p4446
I0
I0
I01
Ntp4447
a(S'int'
p4448
S'max_terms'
p4449
g4449
S'Maximum number of terms'
p4450
I0
I0
I01
Ntp4451
a(S'int'
p4452
S'num_responses'
p4453
g4453
S'Number of response variables'
p4454
I0
I0
I01
Ntp4455
a(S'TBoolList'
p4456
S'best_set'
p4457
g4457
S'Used terms.'
p4458
I0
I0
I00
Ntp4459
a(S'TFloatListList'
p4460
S'dirs'
p4461
g4461
S'max_preds x num_preds matrix'
p4462
I0
I0
I00
Ntp4463
a(S'TFloatListList'
p4464
S'cuts'
p4465
g4465
S'max_preds x num_preds matrix of cuts'
p4466
I0
I0
I00
Ntp4467
a(S'TFloatList'
p4468
S'betas'
p4469
g4469
S'Term coefficients;'
p4470
I0
I0
I00
Ntp4471
ag307
ag94
ag99
asg29
(dp4472
sbsS'TValueList'
p4473
(ipyprops
ClassDefinition
p4474
(dp4475
g151
I0
sg152
I01
sg153
S'TValueList'
p4476
sg154
g155
sg156
I0
sg157
(lp4477
sg159
(lp4478
sg161
(dp4479
sbsS'TTreeExampleSplitter_UnknownsToCommon'
p4480
(i__main__
ClassDefinition
p4481
(dp4482
g4
I1
sg5
I01
sg6
g4480
sg7
S'TTreeExampleSplitter'
p4483
sg9
I00
sg10
(lp4484
sg12
(lp4485
sg29
(dp4486
sbsS'TContDistribution'
p4487
(i__main__
ClassDefinition
p4488
(dp4489
g4
I1
sg5
I01
sg6
g4487
sg7
S'TDistribution'
p4490
sg9
I00
sg10
(lp4491
sg12
(lp4492
(S'TFloatList'
p4493
S'variances'
p4494
g4494
S'variances'
p4495
I0
I0
I00
Ntp4496
a(S'float'
p4497
S'sum'
p4498
g4498
S'weighted sum of elements (i.e. N*average)'
p4499
I01
I0
I01
Ntp4500
a(S'float'
p4501
S'sum2'
p4502
g4502
S'weighted sum of squares of elements'
p4503
I01
I0
I01
Ntp4504
ag1148
ag1152
ag1156
ag1160
ag1164
ag1169
ag1174
ag1179
asg29
(dp4505
sbsS'TTreeDescender_UnknownMergeAsSelector'
p4506
(i__main__
ClassDefinition
p4507
(dp4508
g4
I1
sg5
I01
sg6
g4506
sg7
g1615
sg9
I0
sg10
(lp4509
sg12
(lp4510
sg29
(dp4511
sbsS'TContingencyAttrClass'
p4512
(i__main__
ClassDefinition
p4513
(dp4514
g4
I1
sg5
I01
sg6
g4512
sg7
S'TContingencyClass'
p4515
sg9
I00
sg10
(lp4516
sg12
(lp4517
g1700
ag1705
ag1711
ag1716
ag1721
ag1726
asg29
(dp4518
sbsS'TDomainTransformerConstructor'
p4519
(i__main__
ClassDefinition
p4520
(dp4521
g4
I1
sg5
I01
sg6
g4519
sg7
S'TOrange'
p4522
sg9
I01
sg10
(lp4523
sg12
(lp4524
(S'bool'
p4525
S'preservesOrder'
p4526
S'preserves_order'
p4527
S'a flag telling that original attributes have corresponding attribute in the same order'
p4528
I01
I0
I01
Ntp4529
a(S'bool'
p4530
S'preservesAttributes'
p4531
S'preserves_attributes'
p4532
S'a flag telling whether each original has a corresponding new attribute'
p4533
I01
I0
I01
Ntp4534
asg29
(dp4535
sbsS'TPythonValueSpecial'
p4536
(i__main__
ClassDefinition
p4537
(dp4538
g4
I1
sg5
I01
sg6
g4536
sg7
S'TOrange'
p4539
sg9
I00
sg10
(lp4540
sg12
(lp4541
(S'int'
p4542
S'valueType'
p4543
S'value_type'
p4544
S'value type'
p4545
I0
I0
I01
Ntp4546
asg29
(dp4547
sbsS'TIGConstructor'
p4548
(i__main__
ClassDefinition
p4549
(dp4550
g4
I1
sg5
I01
sg6
g4548
sg7
S'TOrange'
p4551
sg9
I01
sg10
(lp4552
sg12
(lp4553
sg29
(dp4554
sbsS'TProbabilityEstimatorConstructor'
p4555
(i__main__
ClassDefinition
p4556
(dp4557
g4
I1
sg5
I01
sg6
g4555
sg7
S'TOrange'
p4558
sg9
I01
sg10
(lp4559
sg12
(lp4560
sg29
(dp4561
sbsS'TTreeNodeList'
p4562
(ipyprops
ClassDefinition
p4563
(dp4564
g151
I0
sg152
I01
sg153
g4562
sg154
g155
sg156
I0
sg157
(lp4565
sg159
(lp4566
sg161
(dp4567
sbsS'TFloatVariable'
p4568
(i__main__
ClassDefinition
p4569
(dp4570
g4
I1
sg5
I01
sg6
g4568
sg7
S'TVariable'
p4571
sg9
I00
sg10
(lp4572
sg12
(lp4573
(S'float'
p4574
S'startValue'
p4575
S'start_value'
p4576
S'lowest value'
p4577
I0
I0
I01
Ntp4578
a(S'float'
p4579
S'endValue'
p4580
S'end_value'
p4581
S'highest value'
p4582
I0
I0
I01
Ntp4583
a(S'float'
p4584
S'stepValue'
p4585
S'step_value'
p4586
S'step'
p4587
I0
I0
I01
Ntp4588
a(S'int'
p4589
S'numberOfDecimals'
p4590
S'number_of_decimals'
p4591
S'number of digits after decimal point'
p4592
I0
I0
I01
Ntp4593
a(S'bool'
p4594
S'scientificFormat'
p4595
S'scientific_format'
p4596
S'use scientific format in output'
p4597
I0
I0
I01
Ntp4598
a(S'int'
p4599
S'adjustDecimals'
p4600
S'adjust_decimals'
p4601
S"adjust number of decimals according to the values converted (0 - no, 1 - yes, 2 - yes, but haven't seen any yet)"
p4602
I0
I0
I01
Ntp4603
ag349
ag353
ag357
ag362
ag367
ag372
ag377
asg29
(dp4604
sbsS'TImputer_random'
p4605
(i__main__
ClassDefinition
p4606
(dp4607
g4
I1
sg5
I01
sg6
g4605
sg7
S'TImputer'
p4608
sg9
I00
sg10
(lp4609
sg12
(lp4610
(S'bool'
p4611
S'imputeClass'
p4612
S'impute_class'
p4613
S'Tells whether to impute the class values, too (default: true)'
p4614
I0
I0
I01
Ntp4615
a(S'bool'
p4616
S'deterministic'
p4617
g4617
S"tells whether to initialize random by example's CRC (default: false)"
p4618
I0
I0
I01
Ntp4619
a(S'TDistributionList'
p4620
S'distributions'
p4621
g4621
S'probability functions'
p4622
I0
I0
I00
Ntp4623
asg29
(dp4624
sbsS'TFilter_hasMeta'
p4625
(i__main__
ClassDefinition
p4626
(dp4627
g4
I1
sg5
I01
sg6
g4625
sg7
S'TFilter'
p4628
sg9
I00
sg10
(lp4629
sg12
(lp4630
(S'int'
p4631
S'id'
p4632
g4632
S'meta attribute id'
p4633
I0
I0
I01
Ntp4634
ag711
ag715
asg29
(dp4635
sbsS'TProbabilityEstimatorConstructor_kernel'
p4636
(i__main__
ClassDefinition
p4637
(dp4638
g4
I1
sg5
I01
sg6
g4636
sg7
S'TProbabilityEstimatorConstructor'
p4639
sg9
I00
sg10
(lp4640
sg12
(lp4641
(S'float'
p4642
S'minImpact'
p4643
S'min_impact'
p4644
S'Minimal impact the point must have to be counted'
p4645
I0
I0
I01
Ntp4646
a(S'float'
p4647
S'smoothing'
p4648
g4648
S'Smoothing factor'
p4649
I0
I0
I01
Ntp4650
a(S'int'
p4651
S'nPoints'
p4652
S'n_points'
p4653
S'Number of points for curve (negative means the given number of points is inserted in each interval)'
p4654
I0
I0
I01
Ntp4655
asg29
(dp4656
sbsS'TRuleCovererAndRemover_Default'
p4657
(i__main__
ClassDefinition
p4658
(dp4659
g4
I1
sg5
I01
sg6
g4657
sg7
S'TRuleCovererAndRemover'
p4660
sg9
I00
sg10
(lp4661
sg12
(lp4662
sg29
(dp4663
sbsS'TMakeRandomIndices'
p4664
(i__main__
ClassDefinition
p4665
(dp4666
g4
I1
sg5
I01
sg6
g4664
sg7
S'TOrange'
p4667
sg9
I00
sg10
(lp4668
sg12
(lp4669
g734
ag738
ag743
asg29
(dp4670
S'Stratification'
p4671
(lp4672
(S'StratifiedIfPossible'
p4673
S'-1'
p4674
tp4675
a(S'NotStratified'
p4676
I0
tp4677
a(S'Stratified'
p4678
I1
tp4679
assbsS'TFilter_Python'
p4680
(i__main__
ClassDefinition
p4681
(dp4682
g4
I1
sg5
I01
sg6
g4680
sg7
S'TFilter'
p4683
sg9
I00
sg10
(lp4684
sg12
(lp4685
g711
ag715
asg29
(dp4686
sbsS'TRuleBeamInitializer_Default'
p4687
(i__main__
ClassDefinition
p4688
(dp4689
g4
I1
sg5
I01
sg6
g4687
sg7
S'TRuleBeamInitializer'
p4690
sg9
I00
sg10
(lp4691
sg12
(lp4692
sg29
(dp4693
sbsS'TExamplesDistanceConstructor_Python'
p4694
(i__main__
ClassDefinition
p4695
(dp4696
g4
I1
sg5
I01
sg6
g4694
sg7
S'TExamplesDistanceConstructor'
p4697
sg9
I00
sg10
(lp4698
sg12
(lp4699
g1383
asg29
(dp4700
sbsS'TTreeDescender_Python'
p4701
(i__main__
ClassDefinition
p4702
(dp4703
g4
I1
sg5
I01
sg6
g4701
sg7
S'TTreeDescender'
p4704
sg9
I00
sg10
(lp4705
sg12
(lp4706
sg29
(dp4707
sbsS'TSubsetsGenerator_constant'
p4708
(i__main__
ClassDefinition
p4709
(dp4710
g4
I1
sg5
I01
sg6
g4708
sg7
S'TSubsetsGenerator'
p4711
sg9
I00
sg10
(lp4712
sg12
(lp4713
(S'TVarList'
p4714
S'constant'
p4715
g4715
S'a subset that is returned (once!)'
p4716
I0
I0
I00
Ntp4717
ag223
asg29
(dp4718
sbsS'TGaussianNoiseGenerator'
p4719
(i__main__
ClassDefinition
p4720
(dp4721
g4
I1
sg5
I01
sg6
g4719
sg7
S'TChangeExampleGenerator'
p4722
sg9
I00
sg10
(lp4723
sg12
(lp4724
(S'TIntFloatList'
p4725
S'deviations'
p4726
g4726
S"deviations for attributes' values"
p4727
I0
I0
I00
Ntp4728
a(S'TRandomGenerator'
p4729
S'randomGenerator'
p4730
S'random_generator'
p4731
S'random generator'
p4732
I0
I0
I00
Ntp4733
ag322
ag326
asg29
(dp4734
sbsS'TClustersFromDistributionsByAssessor'
p4735
(i__main__
ClassDefinition
p4736
(dp4737
g4
I1
sg5
I01
sg6
g4735
sg7
S'TClustersFromDistributions'
p4738
sg9
I00
sg10
(lp4739
sg12
(lp4740
(S'TDistributionAssessor'
p4741
S'distributionAssessor'
p4742
S'distribution_assessor'
p4743
S'column quality assessor'
p4744
I0
I0
I00
Ntp4745
a(S'TStopDistributionClustering'
p4746
S'stopCriterion'
p4747
S'stop_criterion'
p4748
S'stop criterion'
p4749
I0
I0
I00
Ntp4750
a(S'float'
p4751
S'minProfitProportion'
p4752
S'min_profit_proportion'
p4753
S'minimal merge profit'
p4754
I0
I0
I01
Ntp4755
asg29
(dp4756
sbsS'TExamplesDistance_Hamming'
p4757
(i__main__
ClassDefinition
p4758
(dp4759
g4
I1
sg5
I01
sg6
g4757
sg7
S'TExamplesDistance'
p4760
sg9
I00
sg10
(lp4761
sg12
(lp4762
(S'bool'
p4763
S'ignoreClass'
p4764
S'ignore_class'
p4765
S'if true (default), class value is ignored when computing distances'
p4766
I0
I0
I01
Ntp4767
a(S'bool'
p4768
S'ignoreUnknowns'
p4769
S'ignore_unknowns'
p4770
S'if true (default: false) unknown values are ignored in computation'
p4771
I0
I0
I01
Ntp4772
asg29
(dp4773
sbsS'TDefaultClassifier'
p4774
(i__main__
ClassDefinition
p4775
(dp4776
g4
I1
sg5
I01
sg6
g4774
sg7
S'TClassifier'
p4777
sg9
I00
sg10
(lp4778
sg12
(lp4779
(S'TValue'
p4780
S'defaultVal'
p4781
S'default_val'
p4782
S'default prediction'
p4783
I0
I0
I01
Ntp4784
a(S'TDistribution'
p4785
S'defaultDistribution'
p4786
S'default_distribution'
p4787
S'default distribution'
p4788
I0
I0
I00
Ntp4789
ag94
ag99
asg29
(dp4790
sbsS'TColumnAssessor_Kramer'
p4791
(i__main__
ClassDefinition
p4792
(dp4793
g4
I1
sg5
I01
sg6
g4791
sg7
S'TColumnAssessor'
p4794
sg9
I00
sg10
(lp4795
sg12
(lp4796
sg29
(dp4797
sbsS'TEVDistGetter_Python'
p4798
(i__main__
ClassDefinition
p4799
(dp4800
g4
I1
sg5
I01
sg6
g4798
sg7
S'TEVDistGetter'
p4801
sg9
I00
sg10
(lp4802
sg12
(lp4803
sg29
(dp4804
sbsS'TDiscretization'
p4805
(i__main__
ClassDefinition
p4806
(dp4807
g4
I1
sg5
I01
sg6
g4805
sg7
S'TOrange'
p4808
sg9
I01
sg10
(lp4809
sg12
(lp4810
sg29
(dp4811
sbsS'TTreeSplitConstructor_Measure'
p4812
(i__main__
ClassDefinition
p4813
(dp4814
g4
I1
sg5
I01
sg6
g4812
sg7
S'TTreeSplitConstructor'
p4815
sg9
I01
sg10
(lp4816
sg12
(lp4817
g1318
ag1323
ag803
asg29
(dp4818
sbsS'TTreeNode'
p4819
(i__main__
ClassDefinition
p4820
(dp4821
g4
I1
sg5
I01
sg6
g4819
sg7
S'TOrange'
p4822
sg9
I00
sg10
(lp4823
sg12
(lp4824
(S'TClassifier'
p4825
S'nodeClassifier'
p4826
S'node_classifier'
p4827
S'classifies an example'
p4828
I0
I0
I00
Ntp4829
a(S'TDistribution'
p4830
S'distribution'
p4831
g4831
S'distribution of classes in the node'
p4832
I0
I0
I00
Ntp4833
a(S'TDomainContingency'
p4834
S'contingency'
p4835
g4835
S'domain contingency for examples in the node'
p4836
I0
I0
I00
Ntp4837
a(S'TExampleGenerator'
p4838
S'examples'
p4839
g4839
S'learning examples (if stored)'
p4840
I0
I0
I00
Ntp4841
a(S'int'
p4842
S'weightID'
p4843
S'weight_ID'
p4844
S'weightID used to construct this node'
p4845
I0
I0
I01
Ntp4846
a(S'TClassifier'
p4847
S'branchSelector'
p4848
S'branch_selector'
p4849
S'classifier that select a branch for an example'
p4850
I0
I0
I00
Ntp4851
a(S'TTreeNodeList'
p4852
S'branches'
p4853
g4853
S'classifiers presenting the branches'
p4854
I0
I0
I00
Ntp4855
a(S'TStringList'
p4856
S'branchDescriptions'
p4857
S'branch_descriptions'
p4858
S'descriptions of branches'
p4859
I0
I0
I00
Ntp4860
a(S'TDiscDistribution'
p4861
S'branchSizes'
p4862
S'branch_sizes'
p4863
S'numbers of examples in branches'
p4864
I0
I0
I00
Ntp4865
asg29
(dp4866
sbsS'TTransformValue_IsDefined'
p4867
(i__main__
ClassDefinition
p4868
(dp4869
g4
I1
sg5
I01
sg6
g4867
sg7
S'TTransformValue'
p4870
sg9
I00
sg10
(lp4871
sg12
(lp4872
g840
asg29
(dp4873
sbsS'TFilter_hasClassValue'
p4874
(i__main__
ClassDefinition
p4875
(dp4876
g4
I1
sg5
I01
sg6
g4874
sg7
S'TFilter'
p4877
sg9
I00
sg10
(lp4878
sg12
(lp4879
g711
ag715
asg29
(dp4880
sbsS'TStopDistributionClustering_binary'
p4881
(i__main__
ClassDefinition
p4882
(dp4883
g4
I1
sg5
I01
sg6
g4881
sg7
S'TStopDistributionClustering'
p4884
sg9
I00
sg10
(lp4885
sg12
(lp4886
sg29
(dp4887
sbsS'TIMByRows'
p4888
(i__main__
ClassDefinition
p4889
(dp4890
g4
I1
sg5
I01
sg6
g4888
sg7
S'TOrange'
p4891
sg9
I00
sg10
(lp4892
sg12
(lp4893
(S'int'
p4894
S'varType'
p4895
S'var_type'
p4896
S' class variable type'
p4897
I0
I0
I01
S'Variable_Type'
p4898
tp4899
asg29
(dp4900
sbsS'TRuleFinder'
p4901
(i__main__
ClassDefinition
p4902
(dp4903
g4
I1
sg5
I01
sg6
g4901
sg7
S'TOrange'
p4904
sg9
I01
sg10
(lp4905
sg12
(lp4906
g4106
ag4109
asg29
(dp4907
sbsS'TClassifierByExampleTable'
p4908
(i__main__
ClassDefinition
p4909
(dp4910
g4
I1
sg5
I01
sg6
g4908
sg7
S'TClassifierFD'
p4911
sg9
I00
sg10
(lp4912
sg12
(lp4913
(S'TExampleTable'
p4914
S'sortedExamples'
p4915
S'sorted_examples'
p4916
S'a table of examples'
p4917
I0
I0
I00
Ntp4918
a(S'bool'
p4919
S'containsUnknowns'
p4920
S'contains_unknowns'
p4921
S'if true, the table contains unknown values'
p4922
I0
I0
I01
Ntp4923
a(S'TClassifier'
p4924
S'classifierForUnknown'
p4925
S'classifier_for_unknown'
p4926
S'a classifier for unknown cases'
p4927
I0
I0
I00
Ntp4928
a(S'TEFMDataDescription'
p4929
S'dataDescription'
p4930
S'data_description'
p4931
S'data description'
p4932
I0
I0
I00
Ntp4933
ag307
ag94
ag99
asg29
(dp4934
sbsS'TNetworkOptimization'
p4935
(i__main__
ClassDefinition
p4936
(dp4937
g115
I1
sg116
I0
sg117
g4935
sg118
S'TOrange'
p4938
sg120
I00
sg121
(lp4939
sg123
(lp4940
(S'TNetwork'
p4941
S'network'
p4942
g4942
S'Network'
p4943
I0
I0
I00
Ntp4944
asg125
(dp4945
sbsS'TKernelFunc'
p4946
(i__main__
ClassDefinition
p4947
(dp4948
g4
I1
sg5
I01
sg6
g4946
sg7
S'TOrange'
p4949
sg9
I01
sg10
(lp4950
sg12
(lp4951
sg29
(dp4952
sbsS'TChangeExampleGenerator'
p4953
(i__main__
ClassDefinition
p4954
(dp4955
g4
I1
sg5
I01
sg6
g4953
sg7
S'TAdapterGenerator'
p4956
sg9
I01
sg10
(lp4957
sg12
(lp4958
g322
ag326
asg29
(dp4959
sbsS'TRule'
p4960
(i__main__
ClassDefinition
p4961
(dp4962
g4
I1
sg5
I01
sg6
g4960
sg7
S'TOrange'
p4963
sg9
I00
sg10
(lp4964
sg12
(lp4965
(S'TFilter'
p4966
S'filter'
p4967
g4967
S'stored filter for this rule'
p4968
I0
I0
I00
Ntp4969
a(S'TFilter'
p4970
S'valuesFilter'
p4971
S'values_filter'
p4972
S'Filter_values representation of main filter (sometimes needed)'
p4973
I0
I0
I00
Ntp4974
a(S'TClassifier'
p4975
S'classifier'
p4976
g4976
S'classifies an example'
p4977
I0
I0
I00
Ntp4978
a(S'TLearner'
p4979
S'learner'
p4980
g4980
S'learns a classifier from data'
p4981
I0
I0
I00
Ntp4982
a(S'TRule'
p4983
S'parentRule'
p4984
S'parent_rule'
p4985
g589
I0
I0
I00
Ntp4986
a(S'TDistribution'
p4987
S'baseDist'
p4988
S'base_dist'
p4989
S'initial distribution'
p4990
I0
I0
I00
Ntp4991
a(S'TDistribution'
p4992
S'classDistribution'
p4993
S'class_distribution'
p4994
S'distribution of classes covered by the rule'
p4995
I0
I0
I00
Ntp4996
a(S'TExampleTable'
p4997
S'examples'
p4998
g4998
S'covered examples'
p4999
I0
I0
I00
Ntp5000
a(S'int'
p5001
S'weightID'
p5002
S'weight_ID'
p5003
S'weight for the stored examples'
p5004
I0
I0
I01
Ntp5005
a(S'float'
p5006
S'quality'
p5007
g5007
S'some measure of rule quality'
p5008
I0
I0
I01
Ntp5009
a(S'int'
p5010
S'complexity'
p5011
g5011
g589
I0
I0
I01
Ntp5012
a(S'float'
p5013
S'chi'
p5014
g5014
g589
I0
I0
I01
Ntp5015
a(S'int'
p5016
S'requiredConditions'
p5017
S'required_conditions'
p5018
S'conditions that are mandatory in rule - rule attribute significance avoids these'
p5019
I0
I0
I01
Ntp5020
asg29
(dp5021
sbsS'TIntervalDiscretizer'
p5022
(i__main__
ClassDefinition
p5023
(dp5024
g4
I1
sg5
I01
sg6
g5022
sg7
S'TDiscretizer'
p5025
sg9
I00
sg10
(lp5026
sg12
(lp5027
(S'TFloatList'
p5028
S'points'
p5029
g5029
S'cut-off points'
p5030
I0
I0
I00
Ntp5031
ag840
asg29
(dp5032
sbsS'TClassifierByLookupTable2'
p5033
(i__main__
ClassDefinition
p5034
(dp5035
g4
I1
sg5
I01
sg6
g5033
sg7
S'TClassifierByLookupTable'
p5036
sg9
I00
sg10
(lp5037
sg12
(lp5038
(S'TVariable'
p5039
S'variable1'
p5040
g5040
S'the first attribute used for classification'
p5041
I01
I0
I00
Ntp5042
a(S'TVariable'
p5043
S'variable2'
p5044
g5044
S'the second attribute used for classification'
p5045
I01
I0
I00
Ntp5046
a(S'int'
p5047
S'noOfValues1'
p5048
S'no_of_values1'
p5049
S'number of values of the first attribute'
p5050
I01
I0
I01
Ntp5051
a(S'int'
p5052
S'noOfValues2'
p5053
S'no_of_values2'
p5054
S'number of values of the second attribute'
p5055
I01
I0
I01
Ntp5056
a(S'TEFMDataDescription'
p5057
S'dataDescription'
p5058
S'data_description'
p5059
S'data description'
p5060
I0
I0
I00
Ntp5061
ag85
ag89
ag94
ag99
asg29
(dp5062
sbsS'TPreprocessor_addClassNoise'
p5063
(i__main__
ClassDefinition
p5064
(dp5065
g4
I1
sg5
I01
sg6
g5063
sg7
S'TPreprocessor'
p5066
sg9
I00
sg10
(lp5067
sg12
(lp5068
(S'float'
p5069
S'proportion'
p5070
g5070
S'proportion of changed class values'
p5071
I0
I0
I01
Ntp5072
a(S'TRandomGenerator'
p5073
S'randomGenerator'
p5074
S'random_generator'
p5075
S'random number generator'
p5076
I0
I0
I00
Ntp5077
asg29
(dp5078
sbsS'TExampleGenerator'
p5079
(i__main__
ClassDefinition
p5080
(dp5081
g4
I1
sg5
I01
sg6
g5079
sg7
S'TOrange'
p5082
sg9
I01
sg10
(lp5083
sg12
(lp5084
g322
ag326
asg29
(dp5085
sbsS'TClassifierByLookupTable1'
p5086
(i__main__
ClassDefinition
p5087
(dp5088
g4
I1
sg5
I01
sg6
g5086
sg7
S'TClassifierByLookupTable'
p5089
sg9
I00
sg10
(lp5090
sg12
(lp5091
(S'TVariable'
p5092
S'variable1'
p5093
(g5093
S'variable'
p5094
tp5095
S' attribute used for classification'
p5096
I01
I0
I00
Ntp5097
ag85
ag89
ag94
ag99
asg29
(dp5098
sbsS'TRuleClassifierConstructor_Python'
p5099
(i__main__
ClassDefinition
p5100
(dp5101
g4
I1
sg5
I01
sg6
g5099
sg7
S'TRuleClassifierConstructor'
p5102
sg9
I00
sg10
(lp5103
sg12
(lp5104
sg29
(dp5105
sbsS'TRemoveRedundantOneValue'
p5106
(i__main__
ClassDefinition
p5107
(dp5108
g4
I1
sg5
I01
sg6
g5106
sg7
S'TRemoveRedundant'
p5109
sg9
I00
sg10
(lp5110
sg12
(lp5111
(S'bool'
p5112
S'onData'
p5113
S'on_data'
p5114
S'observe the actual number of value on the data (not on attribute definitions)'
p5115
I0
I0
I01
Ntp5116
ag1361
asg29
(dp5117
sbsS'TDistributionAssessor_Relief'
p5118
(i__main__
ClassDefinition
p5119
(dp5120
g4
I1
sg5
I01
sg6
g5118
sg7
S'TDistributionAssessor'
p5121
sg9
I00
sg10
(lp5122
sg12
(lp5123
sg29
(dp5124
sbsS'TEnumVariable'
p5125
(i__main__
ClassDefinition
p5126
(dp5127
g4
I1
sg5
I01
sg6
g5125
sg7
S'TVariable'
p5128
sg9
I00
sg10
(lp5129
sg12
(lp5130
(S'TStringList'
p5131
S'values'
p5132
g5132
S"attribute's values"
p5133
I0
I0
I00
Ntp5134
a(S'int'
p5135
S'baseValue'
p5136
S'base_value'
p5137
S'the index of the base value'
p5138
I0
I0
I01
Ntp5139
ag349
ag353
ag357
ag362
ag367
ag372
ag377
asg29
(dp5140
sbsS'TConditionalProbabilityEstimatorConstructor_loess'
p5141
(i__main__
ClassDefinition
p5142
(dp5143
g4
I1
sg5
I01
sg6
g5141
sg7
S'TConditionalProbabilityEstimatorConstructor'
p5144
sg9
I00
sg10
(lp5145
sg12
(lp5146
(S'float'
p5147
S'windowProportion'
p5148
S'window_proportion'
p5149
S'The proportion of points in a window for LR'
p5150
I0
I0
I01
Ntp5151
a(S'int'
p5152
S'nPoints'
p5153
S'n_points'
p5154
S'The number of points on curve'
p5155
I0
I0
I01
Ntp5156
a(S'int'
p5157
S'distributionMethod'
p5158
S'distribution_method'
p5159
S" Meaning of the 'nPoints'"
p5160
I0
I0
I01
S'ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod'
p5161
tp5162
asg29
(dp5163
S'DistributionMethod'
p5164
(lp5165
(S'Minimal'
p5166
S'DISTRIBUTE_MINIMAL'
p5167
tp5168
a(S'Factor'
p5169
S'DISTRIBUTE_FACTOR'
p5170
tp5171
a(S'Fixed'
p5172
S'DISTRIBUTE_FIXED'
p5173
tp5174
a(S'Uniform'
p5175
S'DISTRIBUTE_UNIFORM'
p5176
tp5177
a(S'Maximal'
p5178
S'DISTRIBUTE_MAXIMAL'
p5179
tp5180
assbsS'TPreprocessor_addMissing'
p5181
(i__main__
ClassDefinition
p5182
(dp5183
g4
I1
sg5
I01
sg6
g5181
sg7
S'TPreprocessor'
p5184
sg9
I00
sg10
(lp5185
sg12
(lp5186
(S'TVariableFloatMap'
p5187
S'proportions'
p5188
g5188
S'proportion of removed values for individual values'
p5189
I0
I0
I00
Ntp5190
a(S'float'
p5191
S'defaultProportion'
p5192
S'default_proportion'
p5193
S'default proportion of removed values (for attributes not specified above)'
p5194
I0
I0
I01
Ntp5195
a(S'int'
p5196
S'specialType'
p5197
S'special_type'
p5198
S'special value type (1=DC, 2=DK)'
p5199
I0
I0
I01
Ntp5200
a(S'TRandomGenerator'
p5201
S'randomGenerator'
p5202
S'random_generator'
p5203
S'random number generator'
p5204
I0
I0
I00
Ntp5205
asg29
(dp5206
sbsS'TRuleBeamCandidateSelector'
p5207
(i__main__
ClassDefinition
p5208
(dp5209
g4
I1
sg5
I01
sg6
g5207
sg7
S'TOrange'
p5210
sg9
I01
sg10
(lp5211
sg12
(lp5212
sg29
(dp5213
sbsS'TSubsetsGenerator_minMaxSize'
p5214
(i__main__
ClassDefinition
p5215
(dp5216
g4
I1
sg5
I01
sg6
g5214
sg7
S'TSubsetsGenerator'
p5217
sg9
I00
sg10
(lp5218
sg12
(lp5219
(S'int'
p5220
S'min'
p5221
g5221
S'minimal subset size'
p5222
I0
I0
I01
Ntp5223
a(S'int'
p5224
S'max'
p5225
g5225
S'maximal subset size'
p5226
I0
I0
I01
Ntp5227
ag223
asg29
(dp5228
sbsS'TClusteringTreeLearner'
p5229
(i__main__
ClassDefinition
p5230
(dp5231
g4
I1
sg5
I01
sg6
g5229
sg7
S'TMultiLearner'
p5232
sg9
I00
sg10
(lp5233
sg12
(lp5234
(S'float'
p5235
S'minMajority'
p5236
S'min_majority'
p5237
S'the minimal majority each class variable must exceed to stop building'
p5238
I0
I0
I01
Ntp5239
a(S'float'
p5240
S'minMSE'
p5241
S'min_MSE'
p5242
S'the minimal MSE each class variable must be lower than to stop building'
p5243
I0
I0
I01
Ntp5244
a(S'int'
p5245
S'minInstances'
p5246
S'min_instances'
p5247
S'the minimal number of examples for division to continue'
p5248
I0
I0
I01
Ntp5249
a(S'int'
p5250
S'maxDepth'
p5251
S'max_depth'
p5252
S'the maximal depth a tree can reach'
p5253
I0
I0
I01
Ntp5254
a(S'int'
p5255
S'method'
p5256
g5256
g589
I0
I0
I01
Ntp5257
a(S'float'
p5258
S'skipProb'
p5259
S'skip_prob'
p5260
g589
I0
I0
I01
Ntp5261
a(S'TRandomGenerator'
p5262
S'randomGenerator'
p5263
S'random_generator'
p5264
g589
I0
I0
I00
Ntp5265
ag3495
ag3499
asg29
(dp5266
sbsS'TTreeExampleSplitter_UnknownsToAll'
p5267
(i__main__
ClassDefinition
p5268
(dp5269
g4
I1
sg5
I01
sg6
g5267
sg7
S'TTreeExampleSplitter'
p5270
sg9
I00
sg10
(lp5271
sg12
(lp5272
sg29
(dp5273
sbsS'TValueFilter_stringList'
p5274
(i__main__
ClassDefinition
p5275
(dp5276
g4
I1
sg5
I01
sg6
g5274
sg7
S'TValueFilter'
p5277
sg9
I00
sg10
(lp5278
sg12
(lp5279
(S'TStringList'
p5280
S'values'
p5281
g5281
S'accepted values'
p5282
I0
I0
I00
Ntp5283
a(S'bool'
p5284
S'caseSensitive'
p5285
S'case_sensitive'
p5286
S'if true (default), the comparison is case sensitive'
p5287
I0
I0
I01
Ntp5288
ag1077
ag1082
asg29
(dp5289
sbsS'TContingencyClass'
p5290
(i__main__
ClassDefinition
p5291
(dp5292
g4
I1
sg5
I01
sg6
g5290
sg7
S'TContingency'
p5293
sg9
I01
sg10
(lp5294
sg12
(lp5295
g1700
ag1705
ag1711
ag1716
ag1721
ag1726
asg29
(dp5296
sbsS'TAssociationClassifier'
p5297
(i__main__
ClassDefinition
p5298
(dp5299
g4
I1
sg5
I01
sg6
g5297
sg7
S'TClassifierFD'
p5300
sg9
I00
sg10
(lp5301
sg12
(lp5302
(S'TAssociationRules'
p5303
S'rules'
p5304
g5304
S'association rules'
p5305
I0
I0
I00
Ntp5306
a(S'int'
p5307
S'voteWeight'
p5308
S'vote_weight'
p5309
S'vote weight (s=support, c=confidence, p=product)'
p5310
I0
I0
I01
Ntp5311
ag307
ag94
ag99
asg29
(dp5312
sbsS'TDomainDistributions'
p5313
(ipyprops
ClassDefinition
p5314
(dp5315
g151
I0
sg152
I01
sg153
S'TDomainDistributions'
p5316
sg154
g155
sg156
I0
sg157
(lp5317
sg159
(lp5318
sg161
(dp5319
sbsS'TSVMLearnerSparse'
p5320
(i__main__
ClassDefinition
p5321
(dp5322
g4
I1
sg5
I01
sg6
g5320
sg7
S'TSVMLearner'
p5323
sg9
I00
sg10
(lp5324
sg12
(lp5325
(S'bool'
p5326
S'useNonMeta'
p5327
S'use_non_meta'
p5328
S'include non meta attributes in the learning process'
p5329
I0
I0
I01
Ntp5330
ag4251
ag4256
ag4260
ag4264
ag4268
ag4272
ag4276
ag4279
ag4283
ag4286
ag4290
ag4294
ag4298
ag4303
ag110
asg29
(dp5331
sbsS'TDomain'
p5332
(i__main__
ClassDefinition
p5333
(dp5334
g4
I1
sg5
I01
sg6
g5332
sg7
S'TOrange'
p5335
sg9
I00
sg10
(lp5336
sg12
(lp5337
(S'TVariable'
p5338
S'classVar'
p5339
S'class_var'
p5340
S'class variable'
p5341
I01
I0
I00
Ntp5342
a(S'TVarList'
p5343
S'attributes'
p5344
(g5344
S'features'
p5345
tp5346
S' list of attributes, excluding the class'
p5347
I01
I0
I00
Ntp5348
a(S'TVarList'
p5349
S'variables'
p5350
g5350
S'list of attributes, including the class at the end of the list'
p5351
I01
I0
I00
Ntp5352
a(S'TVarList'
p5353
S'classVars'
p5354
S'class_vars'
p5355
S'list of class variables, if multiple; else None'
p5356
I01
I0
I00
Ntp5357
a(S'int'
p5358
S'version'
p5359
g5359
S"unique version identifier; it's changed each time a domain is changed"
p5360
I01
I0
I01
Ntp5361
asg29
(dp5362
sbsS'TTreePruner_SameMajority'
p5363
(i__main__
ClassDefinition
p5364
(dp5365
g4
I1
sg5
I01
sg6
g5363
sg7
S'TTreePruner'
p5366
sg9
I00
sg10
(lp5367
sg12
(lp5368
sg29
(dp5369
sbsS'TSubsetsGenerator_constant_iterator'
p5370
(i__main__
ClassDefinition
p5371
(dp5372
g4
I1
sg5
I01
sg6
g5370
sg7
S'TSubsetsGenerator_iterator'
p5373
sg9
I00
sg10
(lp5374
sg12
(lp5375
(S'TVarList'
p5376
S'constant'
p5377
g5377
S'a subset that is returned (once!)'
p5378
I0
I0
I00
Ntp5379
a(S'bool'
p5380
S'moreToCome'
p5381
S'more_to_come'
p5382
g589
I0
I0
I01
Ntp5383
ag526
asg29
(dp5384
sbsS'TExampleDistConstructor'
p5385
(i__main__
ClassDefinition
p5386
(dp5387
g4
I1
sg5
I01
sg6
g5385
sg7
S'TOrange'
p5388
sg9
I01
sg10
(lp5389
sg12
(lp5390
sg29
(dp5391
sbsS'TIMByIMByRows'
p5392
(i__main__
ClassDefinition
p5393
(dp5394
g4
I1
sg5
I01
sg6
g5392
sg7
S'TIMConstructor'
p5395
sg9
I00
sg10
(lp5396
sg12
(lp5397
g1265
asg29
(dp5398
sbsS'TAlignmentList'
p5399
(ipyprops
ClassDefinition
p5400
(dp5401
g151
I0
sg152
I01
sg153
g5399
sg154
g155
sg156
I0
sg157
(lp5402
sg159
(lp5403
sg161
(dp5404
sbsS'TDiscrete2Continuous'
p5405
(i__main__
ClassDefinition
p5406
(dp5407
g4
I1
sg5
I01
sg6
g5405
sg7
S'TTransformValue'
p5408
sg9
I00
sg10
(lp5409
sg12
(lp5410
(S'int'
p5411
S'value'
p5412
g5412
S'target value'
p5413
I0
I0
I01
Ntp5414
a(S'bool'
p5415
S'invert'
p5416
g5416
S'give 1.0 to values not equal to the target'
p5417
I0
I0
I01
Ntp5418
a(S'bool'
p5419
S'zeroBased'
p5420
S'zero_based'
p5421
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p5422
I0
I0
I01
Ntp5423
ag840
asg29
(dp5424
sbsS'TDomainDiscretization'
p5425
(i__main__
ClassDefinition
p5426
(dp5427
g4
I1
sg5
I01
sg6
g5425
sg7
S'TOrange'
p5428
sg9
I00
sg10
(lp5429
sg12
(lp5430
(S'TDiscretization'
p5431
S'discretization'
p5432
g5432
S'discretization'
p5433
I0
I0
I00
Ntp5434
asg29
(dp5435
sbsS'TColumnAssessor_m'
p5436
(i__main__
ClassDefinition
p5437
(dp5438
g4
I1
sg5
I01
sg6
g5436
sg7
S'TColumnAssessor'
p5439
sg9
I00
sg10
(lp5440
sg12
(lp5441
(S'float'
p5442
g1228
g1228
S'm for m-estimate'
p5443
I0
I0
I01
Ntp5444
asg29
(dp5445
sbsS'TImputer_defaults'
p5446
(i__main__
ClassDefinition
p5447
(dp5448
g4
I1
sg5
I01
sg6
g5446
sg7
S'TImputer'
p5449
sg9
I00
sg10
(lp5450
sg12
(lp5451
(S'TExample'
p5452
S'defaults'
p5453
g5453
S'values that are to be inserted instead of missing ones'
p5454
I0
I0
I00
Ntp5455
asg29
(dp5456
sbsS'TRuleEvaluator_mEVC'
p5457
(i__main__
ClassDefinition
p5458
(dp5459
g4
I1
sg5
I01
sg6
g5457
sg7
S'TRuleEvaluator'
p5460
sg9
I00
sg10
(lp5461
sg12
(lp5462
(S'float'
p5463
g1228
g1228
S'Parameter m for m-estimate after EVC correction'
p5464
I0
I0
I01
Ntp5465
a(S'TEVDistGetter'
p5466
S'evDistGetter'
p5467
S'ev_dist_getter'
p5468
S'get EVC distribution for chi correction'
p5469
I0
I0
I00
Ntp5470
a(S'TVariable'
p5471
S'probVar'
p5472
S'prob_var'
p5473
S'probability coverage variable (meta usually)'
p5474
I0
I0
I00
Ntp5475
a(S'TRuleValidator'
p5476
S'validator'
p5477
g5477
S'rule validator for best rule'
p5478
I0
I0
I00
Ntp5479
a(S'int'
p5480
S'min_improved'
p5481
g5481
S'minimal number of improved examples'
p5482
I0
I0
I01
Ntp5483
a(S'float'
p5484
S'min_improved_perc'
p5485
g5485
S'minimal percentage of improved examples'
p5486
I0
I0
I01
Ntp5487
a(S'TRule'
p5488
S'bestRule'
p5489
S'best_rule'
p5490
S'best rule found and evaluated given conditions (min_improved, validator)'
p5491
I0
I0
I00
Ntp5492
a(S'float'
p5493
S'ruleAlpha'
p5494
S'rule_alpha'
p5495
S"minimal 'true' rule significance"
p5496
I0
I0
I01
Ntp5497
a(S'float'
p5498
S'attributeAlpha'
p5499
S'attribute_alpha'
p5500
S'minimal attribute significance'
p5501
I0
I0
I01
Ntp5502
a(S'bool'
p5503
S'returnExpectedProb'
p5504
S'return_expected_prob'
p5505
S'if true, evaluator returns expected class probability, if false, current class probability'
p5506
I0
I0
I01
Ntp5507
a(S'int'
p5508
S'optimismReduction'
p5509
S'optimism_reduction'
p5510
S'to select optimstic (0), pessimistic (1) or EVC (2) evaluation'
p5511
I0
I0
I01
Ntp5512
asg29
(dp5513
sbsS'TContingency'
p5514
(i__main__
ClassDefinition
p5515
(dp5516
g4
I1
sg5
I01
sg6
g5514
sg7
S'TOrange'
p5517
sg9
I00
sg10
(lp5518
sg12
(lp5519
g1700
ag1705
ag1711
ag1716
ag1721
ag1726
asg29
(dp5520
sbsS'TImputer_Python'
p5521
(i__main__
ClassDefinition
p5522
(dp5523
g4
I1
sg5
I01
sg6
g5521
sg7
S'TImputer'
p5524
sg9
I00
sg10
(lp5525
sg12
(lp5526
sg29
(dp5527
sbsS'TClassifierGenerator'
p5528
(i__main__
ClassDefinition
p5529
(dp5530
g4
I1
sg5
I01
sg6
g5528
sg7
S'TExampleGenerator'
p5531
sg9
I00
sg10
(lp5532
sg12
(lp5533
(S'TClassifier'
p5534
S'classify'
p5535
g5535
S'classifier'
p5536
I0
I0
I00
Ntp5537
ag322
ag326
asg29
(dp5538
sbsS'TRuleDataStoppingCriteria_Python'
p5539
(i__main__
ClassDefinition
p5540
(dp5541
g4
I1
sg5
I01
sg6
g5539
sg7
S'TRuleDataStoppingCriteria'
p5542
sg9
I00
sg10
(lp5543
sg12
(lp5544
sg29
(dp5545
sbsS'TTreeDescender_UnknownToCommonSelector'
p5546
(i__main__
ClassDefinition
p5547
(dp5548
g4
I1
sg5
I01
sg6
g5546
sg7
g1615
sg9
I0
sg10
(lp5549
sg12
(lp5550
sg29
(dp5551
sbsS'THierarchicalCluster'
p5552
(i__main__
ClassDefinition
p5553
(dp5554
g4
I1
sg5
I01
sg6
g5552
sg7
S'TOrange'
p5555
sg9
I00
sg10
(lp5556
sg12
(lp5557
(S'THierarchicalClusterList'
p5558
S'branches'
p5559
g5559
S'subclusters'
p5560
I0
I0
I00
Ntp5561
a(S'float'
p5562
S'height'
p5563
g5563
S'height'
p5564
I0
I0
I01
Ntp5565
a(S'TIntList'
p5566
S'mapping'
p5567
g5567
S'indices to the list of all elements in the clustering'
p5568
I0
I0
I00
Ntp5569
a(S'int'
p5570
S'first'
p5571
g5571
S"the index into 'elements' to the first element of the cluster"
p5572
I0
I0
I01
Ntp5573
a(S'int'
p5574
S'last'
p5575
g5575
S"the index into 'elements' to the one after the last element of the cluster"
p5576
I0
I0
I01
Ntp5577
asg29
(dp5578
sbsS'TPreprocessIM'
p5579
(i__main__
ClassDefinition
p5580
(dp5581
g4
I1
sg5
I01
sg6
g5579
sg7
S'TOrange'
p5582
sg9
I01
sg10
(lp5583
sg12
(lp5584
sg29
(dp5585
sbsS'TLongList'
p5586
(ipyprops
ClassDefinition
p5587
(dp5588
g151
I0
sg152
I01
sg153
g5586
sg154
g155
sg156
I0
sg157
(lp5589
sg159
(lp5590
sg161
(dp5591
sbsS'TBasketFeeder'
p5592
(i__main__
ClassDefinition
p5593
(dp5594
g4
I1
sg5
I01
sg6
g5592
sg7
S'TOrange'
p5595
sg9
I00
sg10
(lp5596
sg12
(lp5597
(S'bool'
p5598
S'dontStore'
p5599
S'dont_store'
p5600
S'disables items storing'
p5601
I0
I0
I01
Ntp5602
a(S'bool'
p5603
S'dontCheckStored'
p5604
S'dont_check_stored'
p5605
S'disables items lookup in the global cache'
p5606
I0
I0
I01
Ntp5607
a(S'TDomain'
p5608
S'domain'
p5609
g5609
S'domain where the meta attributes are stored'
p5610
I0
I0
I00
Ntp5611
a(S'TDomain'
p5612
S'sourceDomain'
p5613
S'source_domain'
p5614
S'domain with items that can be reused'
p5615
I0
I0
I00
Ntp5616
asg29
(dp5617
sbsS'TRuleEvaluator_Laplace'
p5618
(i__main__
ClassDefinition
p5619
(dp5620
g4
I1
sg5
I01
sg6
g5618
sg7
S'TRuleEvaluator'
p5621
sg9
I00
sg10
(lp5622
sg12
(lp5623
sg29
(dp5624
sbsS'TColumnAssessor_N'
p5625
(i__main__
ClassDefinition
p5626
(dp5627
g4
I1
sg5
I01
sg6
g5625
sg7
S'TColumnAssessor'
p5628
sg9
I00
sg10
(lp5629
sg12
(lp5630
sg29
(dp5631
sbsS'TSubsetsGenerator_minMaxSize_iterator'
p5632
(i__main__
ClassDefinition
p5633
(dp5634
g4
I1
sg5
I01
sg6
g5632
sg7
S'TSubsetsGenerator_iterator'
p5635
sg9
I00
sg10
(lp5636
sg12
(lp5637
(S'int'
p5638
g2615
g2615
g589
I01
I0
I01
Ntp5639
a(S'int'
p5640
S'max'
p5641
g5641
S'maximal subset size'
p5642
I0
I0
I01
Ntp5643
a(S'bool'
p5644
S'moreToCome'
p5645
S'more_to_come'
p5646
g589
I01
I0
I01
Ntp5647
ag526
asg29
(dp5648
sbsS'TExamplesDistanceConstructor_Lp'
p5649
(i__main__
ClassDefinition
p5650
(dp5651
g4
I1
sg5
I01
sg6
g5649
sg7
S'TExamplesDistanceConstructor_Normalized'
p5652
sg9
I00
sg10
(lp5653
sg12
(lp5654
(S'float'
p5655
g2307
g2307
g2307
I0
I0
I01
Ntp5656
ag2141
ag2146
ag1383
asg29
(dp5657
sbsS'TComputeDomainContingency'
p5658
(i__main__
ClassDefinition
p5659
(dp5660
g4
I1
sg5
I01
sg6
g5658
sg7
S'TOrange'
p5661
sg9
I00
sg10
(lp5662
sg12
(lp5663
g28
asg29
(dp5664
sbsS'TExample'
p5665
(i__main__
ClassDefinition
p5666
(dp5667
g4
I1
sg5
I01
sg6
g5665
sg7
S'TOrange'
p5668
sg9
I00
sg10
(lp5669
sg12
(lp5670
g2721
ag2724
asg29
(dp5671
sbsS'TFixedDiscretization'
p5672
(i__main__
ClassDefinition
p5673
(dp5674
g4
I1
sg5
I01
sg6
g5672
sg7
S'TDiscretization'
p5675
sg9
I00
sg10
(lp5676
sg12
(lp5677
(S'TFloatList'
p5678
S'points'
p5679
g5679
S'cut-off points'
p5680
I0
I0
I00
Ntp5681
asg29
(dp5682
sbsS'TDomainContingency'
p5683
(ipyprops
ClassDefinition
p5684
(dp5685
g151
I0
sg152
I01
sg153
S'TDomainContingency'
p5686
sg154
g155
sg156
I0
sg157
(lp5687
sg159
(lp5688
sg161
(dp5689
sbsS'TPreprocessor_addGaussianClassNoise'
p5690
(i__main__
ClassDefinition
p5691
(dp5692
g4
I1
sg5
I01
sg6
g5690
sg7
S'TPreprocessor'
p5693
sg9
I00
sg10
(lp5694
sg12
(lp5695
(S'float'
p5696
S'deviation'
p5697
g5697
S'class deviation'
p5698
I0
I0
I01
Ntp5699
a(S'TRandomGenerator'
p5700
S'randomGenerator'
p5701
S'random_generator'
p5702
S'random number generator'
p5703
I0
I0
I00
Ntp5704
asg29
(dp5705
sbsS'TRuleDataStoppingCriteria'
p5706
(i__main__
ClassDefinition
p5707
(dp5708
g4
I1
sg5
I01
sg6
g5706
sg7
S'TOrange'
p5709
sg9
I01
sg10
(lp5710
sg12
(lp5711
sg29
(dp5712
sbsS'TPreprocessor_filter'
p5713
(i__main__
ClassDefinition
p5714
(dp5715
g4
I1
sg5
I01
sg6
g5713
sg7
S'TPreprocessor'
p5716
sg9
I00
sg10
(lp5717
sg12
(lp5718
(S'TFilter'
p5719
S'filter'
p5720
g5720
S'filter'
p5721
I0
I0
I00
Ntp5722
asg29
(dp5723
sbsS'TSOMNodeList'
p5724
(ipyprops
ClassDefinition
p5725
(dp5726
g151
I0
sg152
I01
sg153
g5724
sg154
g155
sg156
I0
sg157
(lp5727
sg159
(lp5728
sg161
(dp5729
sbsS'TExampleDistBySorting'
p5730
(i__main__
ClassDefinition
p5731
(dp5732
g4
I1
sg5
I01
sg6
g5730
sg7
S'TExampleDistConstructor'
p5733
sg9
I00
sg10
(lp5734
sg12
(lp5735
sg29
(dp5736
sbsS'TGraphAsMatrix'
p5737
(i__main__
ClassDefinition
p5738
(dp5739
g4
I1
sg5
I01
sg6
g5737
sg7
S'TGraph'
p5740
sg9
I00
sg10
(lp5741
sg12
(lp5742
g1506
ag1511
ag1515
asg29
(dp5743
sbsS'TMDS'
p5744
(i__main__
ClassDefinition
p5745
(dp5746
g115
I1
sg116
I0
sg117
g5744
sg118
S'TOrange'
p5747
sg120
I00
sg121
(lp5748
sg123
(lp5749
(S'TSymMatrix'
p5750
S'distances'
p5751
g5751
S'SymMatrix that holds the original real distances'
p5752
I0
I0
I00
Ntp5753
a(S'TSymMatrix'
p5754
S'projectedDistances'
p5755
S'projected_distances'
p5756
S'SymMatrix that holds the projected distances'
p5757
I0
I0
I00
Ntp5758
a(S'TSymMatrix'
p5759
S'stress'
p5760
g5760
S'SymMatrix that holds the pointwise stress values'
p5761
I0
I0
I00
Ntp5762
a(S'TFloatListList'
p5763
S'points'
p5764
g5764
S'Holds the current projected point configuration'
p5765
I0
I0
I00
Ntp5766
a(S'TProgressCallback'
p5767
S'progressCallback'
p5768
S'progress_callback'
p5769
S'progressCallback function'
p5770
I0
I0
I00
Ntp5771
a(S'bool'
p5772
S'freshD'
p5773
S'fresh_d'
p5774
g589
I01
I0
I01
Ntp5775
a(S'float'
p5776
S'avgStress'
p5777
S'avg_stress'
p5778
g589
I01
I0
I01
Ntp5779
a(S'int'
p5780
S'dim'
p5781
g5781
g589
I01
I0
I01
Ntp5782
a(S'int'
p5783
S'n'
p5784
g5784
g589
I01
I0
I01
Ntp5785
asg125
(dp5786
sbsS'TValueFilter_discrete'
p5787
(i__main__
ClassDefinition
p5788
(dp5789
g4
I1
sg5
I01
sg6
g5787
sg7
S'TValueFilter'
p5790
sg9
I00
sg10
(lp5791
sg12
(lp5792
(S'TValueList'
p5793
S'values'
p5794
g5794
S'accepted values'
p5795
I0
I0
I00
Ntp5796
a(S'bool'
p5797
S'negate'
p5798
g5798
S'negate'
p5799
I0
I0
I01
Ntp5800
ag1077
ag1082
asg29
(dp5801
sbsS'TAssociationRulesInducer'
p5802
(i__main__
ClassDefinition
p5803
(dp5804
g4
I1
sg5
I01
sg6
g5802
sg7
S'TOrange'
p5805
sg9
I00
sg10
(lp5806
sg12
(lp5807
(S'int'
p5808
S'maxItemSets'
p5809
S'max_item_sets'
p5810
S'maximal number of itemsets (increase if you want)'
p5811
I0
I0
I01
Ntp5812
a(S'float'
p5813
S'confidence'
p5814
g5814
S'required confidence'
p5815
I0
I0
I01
Ntp5816
a(S'float'
p5817
S'support'
p5818
g5818
S'required support'
p5819
I0
I0
I01
Ntp5820
a(S'bool'
p5821
S'classificationRules'
p5822
S'classification_rules'
p5823
S'if true, rules will have the class and only the class attribute on the right-hand side'
p5824
I0
I0
I01
Ntp5825
a(S'bool'
p5826
S'storeExamples'
p5827
S'store_examples'
p5828
S'if true, each rule is going to have tables with references to examples which match its left side or both sides'
p5829
I0
I0
I01
Ntp5830
asg29
(dp5831
sbsS'TMakeRandomIndices2'
p5832
(i__main__
ClassDefinition
p5833
(dp5834
g4
I1
sg5
I01
sg6
g5832
sg7
S'TMakeRandomIndices'
p5835
sg9
I00
sg10
(lp5836
sg12
(lp5837
(S'float'
p5838
S'p0'
p5839
g5839
S"a proportion or a number of 0's"
p5840
I0
I0
I01
Ntp5841
ag734
ag738
ag743
asg29
(dp5842
sbsS'TTreeStopCriteria'
p5843
(i__main__
ClassDefinition
p5844
(dp5845
g4
I1
sg5
I01
sg6
g5843
sg7
S'TOrange'
p5846
sg9
I00
sg10
(lp5847
sg12
(lp5848
sg29
(dp5849
sbsS'TPreprocessor_addMissingClasses'
p5850
(i__main__
ClassDefinition
p5851
(dp5852
g4
I1
sg5
I01
sg6
g5850
sg7
S'TPreprocessor'
p5853
sg9
I00
sg10
(lp5854
sg12
(lp5855
(S'float'
p5856
S'proportion'
p5857
g5857
S'proportion of removed class values'
p5858
I0
I0
I01
Ntp5859
a(S'int'
p5860
S'specialType'
p5861
S'special_type'
p5862
S'special value type (1=DC, 2=DK)'
p5863
I0
I0
I01
Ntp5864
a(S'TRandomGenerator'
p5865
S'randomGenerator'
p5866
S'random_generator'
p5867
S'random number generator'
p5868
I0
I0
I00
Ntp5869
asg29
(dp5870
sbsS'TLookupLearner'
p5871
(i__main__
ClassDefinition
p5872
(dp5873
g4
I1
sg5
I01
sg6
g5871
sg7
S'TLearner'
p5874
sg9
I00
sg10
(lp5875
sg12
(lp5876
(S'TLearner'
p5877
S'learnerForUnknown'
p5878
S'learner_for_unknown'
p5879
S'a learner for classifying cases not found in the table'
p5880
I0
I0
I00
Ntp5881
a(S'bool'
p5882
S'allowFastLookups'
p5883
S'allow_fast_lookups'
p5884
S'if true, it constructs LookupClassifiers for <=3 attributes'
p5885
I0
I0
I01
Ntp5886
a(S'int'
p5887
S'unknownsHandling'
p5888
S'unknowns_handling'
p5889
S'0 omit examples with unknowns, 1 distribute them, 2 keep them in table'
p5890
I0
I0
I01
Ntp5891
ag110
asg29
(dp5892
sbsS'TBasketExampleGenerator'
p5893
(i__main__
ClassDefinition
p5894
(dp5895
g4
I1
sg5
I01
sg6
g5893
sg7
S'TFileExampleGenerator'
p5896
sg9
I00
sg10
(lp5897
sg12
(lp5898
g1671
ag1676
ag1681
ag322
ag326
asg29
(dp5899
sbsS'TRuleEvaluator_Entropy'
p5900
(i__main__
ClassDefinition
p5901
(dp5902
g4
I1
sg5
I01
sg6
g5900
sg7
S'TRuleEvaluator'
p5903
sg9
I00
sg10
(lp5904
sg12
(lp5905
sg29
(dp5906
sbsS'TMeasureAttribute_chiSquare'
p5907
(i__main__
ClassDefinition
p5908
(dp5909
g4
I1
sg5
I01
sg6
g5907
sg7
S'TMeasureAttributeFromProbabilities'
p5910
sg9
I00
sg10
(lp5911
sg12
(lp5912
(S'bool'
p5913
S'computeProbabilities'
p5914
S'compute_probabilities'
p5915
g589
I0
I0
I01
Ntp5916
ag926
ag931
ag937
ag942
ag947
ag952
ag957
asg29
(dp5917
sbsS'TDistribution'
p5918
(i__main__
ClassDefinition
p5919
(dp5920
g4
I1
sg5
I01
sg6
g5918
sg7
S'TSomeValue'
p5921
sg9
I01
sg10
(lp5922
sg12
(lp5923
g1148
ag1152
ag1156
ag1160
ag1164
ag1169
ag1174
ag1179
asg29
(dp5924
sbsS'TExamplesDistance_DTW'
p5925
(i__main__
ClassDefinition
p5926
(dp5927
g4
I1
sg5
I01
sg6
g5925
sg7
S'TExamplesDistance_Normalized'
p5928
sg9
I00
sg10
(lp5929
sg12
(lp5930
(S'int'
p5931
S'dtwDistance'
p5932
S'dtw_distance'
p5933
S' distance measure between individual attributes (default: square of difference)'
p5934
I0
I0
I01
S'ExamplesDistance_DTW_DistanceType'
p5935
tp5936
ag470
ag474
ag478
ag482
ag487
ag491
ag496
asg29
(dp5937
S'DistanceType'
p5938
(lp5939
(S'Euclidean'
p5940
I0
tp5941
a(S'Derivative'
p5942
I1
tp5943
assbsS'TTreeExampleSplitter_UnknownsToRandom'
p5944
(i__main__
ClassDefinition
p5945
(dp5946
g4
I1
sg5
I01
sg6
g5944
sg7
S'TTreeExampleSplitter'
p5947
sg9
I00
sg10
(lp5948
sg12
(lp5949
sg29
(dp5950
sbsS'TTreePruner_m'
p5951
(i__main__
ClassDefinition
p5952
(dp5953
g4
I1
sg5
I01
sg6
g5951
sg7
S'TTreePruner'
p5954
sg9
I00
sg10
(lp5955
sg12
(lp5956
(S'float'
p5957
g1228
g1228
S'm for m-estimate'
p5958
I0
I0
I01
Ntp5959
asg29
(dp5960
sbsS'TImputer'
p5961
(i__main__
ClassDefinition
p5962
(dp5963
g4
I1
sg5
I01
sg6
g5961
sg7
S'TOrange'
p5964
sg9
I01
sg10
(lp5965
sg12
(lp5966
sg29
(dp5967
sbsS'TExamplesDistanceConstructor_DTW'
p5968
(i__main__
ClassDefinition
p5969
(dp5970
g4
I1
sg5
I01
sg6
g5968
sg7
S'TExamplesDistanceConstructor_Normalized'
p5971
sg9
I00
sg10
(lp5972
sg12
(lp5973
(S'int'
p5974
S'dtwDistance'
p5975
S'dtw_distance'
p5976
S'distance measure between individual attributes (default: square of difference)'
p5977
I0
I0
I01
Ntp5978
ag2141
ag2146
ag1383
asg29
(dp5979
sbsS'TStopIMClusteringByAssessor_n'
p5980
(i__main__
ClassDefinition
p5981
(dp5982
g4
I1
sg5
I01
sg6
g5980
sg7
S'TStopIMClusteringByAssessor'
p5983
sg9
I00
sg10
(lp5984
sg12
(lp5985
(S'int'
p5986
g1034
g1034
S'number of clusters'
p5987
I0
I0
I01
Ntp5988
asg29
(dp5989
sbsS'TVarListList'
p5990
(ipyprops
ClassDefinition
p5991
(dp5992
g151
I0
sg152
I01
sg153
g5990
sg154
g155
sg156
I0
sg157
(lp5993
sg159
(lp5994
sg161
(dp5995
sbsS'TRandomGenerator'
p5996
(i__main__
ClassDefinition
p5997
(dp5998
g4
I1
sg5
I01
sg6
g5996
sg7
S'TOrange'
p5999
sg9
I00
sg10
(lp6000
sg12
(lp6001
(S'int'
p6002
S'initseed'
p6003
g6003
S'initial random seed'
p6004
I0
I0
I01
Ntp6005
a(S'int'
p6006
S'uses'
p6007
g6007
S'#times a number was returned'
p6008
I0
I0
I01
Ntp6009
asg29
(dp6010
sbsS'TThresholdCA'
p6011
(i__main__
ClassDefinition
p6012
(dp6013
g4
I1
sg5
I01
sg6
g6011
sg7
S'TOrange'
p6014
sg9
I00
sg10
(lp6015
sg12
(lp6016
sg29
(dp6017
sbsS'TFloatListList'
p6018
(ipyprops
ClassDefinition
p6019
(dp6020
g151
I0
sg152
I01
sg153
g6018
sg154
g155
sg156
I0
sg157
(lp6021
sg159
(lp6022
sg161
(dp6023
sbsS'TPreprocessor_imputeByLearner'
p6024
(i__main__
ClassDefinition
p6025
(dp6026
g4
I1
sg5
I01
sg6
g6024
sg7
S'TPreprocessor'
p6027
sg9
I00
sg10
(lp6028
sg12
(lp6029
(S'TLearner'
p6030
S'learner'
p6031
g6031
S'learner used for inducing a model for imputation'
p6032
I0
I0
I00
Ntp6033
asg29
(dp6034
sbsS'TRuleBeamRefiner_Python'
p6035
(i__main__
ClassDefinition
p6036
(dp6037
g4
I1
sg5
I01
sg6
g6035
sg7
S'TRuleBeamRefiner'
p6038
sg9
I00
sg10
(lp6039
sg12
(lp6040
sg29
(dp6041
sbsS'TClassifierFromVarFD'
p6042
(i__main__
ClassDefinition
p6043
(dp6044
g4
I1
sg5
I01
sg6
g6042
sg7
S'TClassifierFD'
p6045
sg9
I00
sg10
(lp6046
sg12
(lp6047
(S'int'
p6048
S'position'
p6049
g6049
S'position of the attribute in domain'
p6050
I0
I0
I01
Ntp6051
a(S'TTransformValue'
p6052
S'transformer'
p6053
g6053
S'transformer'
p6054
I0
I0
I00
Ntp6055
a(S'TDistribution'
p6056
S'distributionForUnknown'
p6057
S'distribution_for_unknown'
p6058
S'distribution for unknown value'
p6059
I0
I0
I00
Ntp6060
a(S'bool'
p6061
S'transformUnknowns'
p6062
S'transform_unknowns'
p6063
S'if false (default is true), unknowns stay unknown or are changed into distribution if given'
p6064
I0
I0
I01
Ntp6065
ag307
ag94
ag99
asg29
(dp6066
sbsS'TSimpleTreeLearner'
p6067
(i__main__
ClassDefinition
p6068
(dp6069
g4
I1
sg5
I01
sg6
g6067
sg7
S'TLearner'
p6070
sg9
I00
sg10
(lp6071
sg12
(lp6072
(S'float'
p6073
S'maxMajority'
p6074
S'max_majority'
p6075
g589
I0
I0
I01
Ntp6076
a(S'int'
p6077
S'minInstances'
p6078
S'min_instances'
p6079
g589
I0
I0
I01
Ntp6080
a(S'int'
p6081
S'maxDepth'
p6082
S'max_depth'
p6083
g589
I0
I0
I01
Ntp6084
a(S'float'
p6085
S'skipProb'
p6086
S'skip_prob'
p6087
g589
I0
I0
I01
Ntp6088
a(S'TRandomGenerator'
p6089
S'randomGenerator'
p6090
S'random_generator'
p6091
g589
I0
I0
I00
Ntp6092
ag110
asg29
(dp6093
sbsS'TImputer_model'
p6094
(i__main__
ClassDefinition
p6095
(dp6096
g4
I1
sg5
I01
sg6
g6094
sg7
S'TImputer'
p6097
sg9
I00
sg10
(lp6098
sg12
(lp6099
(S'TClassifierList'
p6100
S'models'
p6101
g6101
S'classifiers'
p6102
I0
I0
I00
Ntp6103
asg29
(dp6104
sbsS'TLogRegLearner'
p6105
(i__main__
ClassDefinition
p6106
(dp6107
g4
I1
sg5
I01
sg6
g6105
sg7
S'TLearner'
p6108
sg9
I00
sg10
(lp6109
sg12
(lp6110
(S'TLogRegFitter'
p6111
S'fitter'
p6112
g6112
S'fits beta coefficients and calculates beta errors.'
p6113
I0
I0
I00
Ntp6114
a(S'TImputerConstructor'
p6115
S'imputerConstructor'
p6116
S'imputer_constructor'
p6117
S'if present, it constructs an imputer for unknown values'
p6118
I0
I0
I00
Ntp6119
a(S'TDomainContinuizer'
p6120
S'domainContinuizer'
p6121
S'domain_continuizer'
p6122
S'if present, it constructs continuous domain if needed; if absent, default is used'
p6123
I0
I0
I00
Ntp6124
ag110
asg29
(dp6125
sbsS'TPreprocessor_takeMissing'
p6126
(i__main__
ClassDefinition
p6127
(dp6128
g4
I1
sg5
I01
sg6
g6126
sg7
S'TPreprocessor'
p6129
sg9
I00
sg10
(lp6130
sg12
(lp6131
sg29
(dp6132
sbsS'TMeasureAttribute_IM'
p6133
(i__main__
ClassDefinition
p6134
(dp6135
g4
I1
sg5
I01
sg6
g6133
sg7
S'TMeasureAttribute'
p6136
sg9
I00
sg10
(lp6137
sg12
(lp6138
(S'TIMConstructor'
p6139
S'IMconstructor'
p6140
g6140
S'incompatibility matrix constructor'
p6141
I0
I0
I00
Ntp6142
a(S'TColumnAssessor'
p6143
S'columnAssessor'
p6144
S'column_assessor'
p6145
S'column quality assessor'
p6146
I0
I0
I00
Ntp6147
ag942
ag947
ag952
ag957
asg29
(dp6148
sbsS'TFeatureByDistributions'
p6149
(i__main__
ClassDefinition
p6150
(dp6151
g4
I1
sg5
I01
sg6
g6149
sg7
S'TFeatureInducer'
p6152
sg9
I00
sg10
(lp6153
sg12
(lp6154
(S'TClustersFromDistributions'
p6155
S'clustersFromDistributions'
p6156
S'clusters_from_distributions'
p6157
S'clustering algorithm'
p6158
I0
I0
I00
Ntp6159
a(S'int'
p6160
S'completion'
p6161
g6161
S' decides how to determine the class for points not covered by any cluster'
p6162
I0
I0
I01
S'FeatureByDistributions_Completion'
p6163
tp6164
asg29
(dp6165
S'Completion'
p6166
(lp6167
(S'NoCompletion'
p6168
S'completion_no'
p6169
tp6170
a(S'CompletionByDefault'
p6171
S'completion_default'
p6172
tp6173
a(S'CompletionByBayes'
p6174
S'completion_bayes'
p6175
tp6176
assbsS'TCostMatrix'
p6177
(i__main__
ClassDefinition
p6178
(dp6179
g4
I1
sg5
I01
sg6
g6177
sg7
S'TOrange'
p6180
sg9
I00
sg10
(lp6181
sg12
(lp6182
(S'TVariable'
p6183
S'classVar'
p6184
S'class_var'
p6185
S'attribute to which the matrix applies'
p6186
I0
I0
I00
Ntp6187
a(S'int'
p6188
S'dimension'
p6189
g6189
S'dimension (should equal classVar.noOfValues())'
p6190
I01
I0
I01
Ntp6191
asg29
(dp6192
sbsS'TStopIMClusteringByAssessor_noProfit'
p6193
(i__main__
ClassDefinition
p6194
(dp6195
g4
I1
sg5
I01
sg6
g6193
sg7
S'TStopIMClusteringByAssessor'
p6196
sg9
I00
sg10
(lp6197
sg12
(lp6198
(S'float'
p6199
S'minProfitProportion'
p6200
S'min_profit_proportion'
p6201
S'minimal allowable profit proportion'
p6202
I0
I0
I01
Ntp6203
asg29
(dp6204
sbsS'TRemoveUnusedValues'
p6205
(i__main__
ClassDefinition
p6206
(dp6207
g4
I1
sg5
I01
sg6
g6205
sg7
S'TOrange'
p6208
sg9
I00
sg10
(lp6209
sg12
(lp6210
(S'bool'
p6211
S'removeOneValued'
p6212
S'remove_one_valued'
p6213
S'if true (default is false), one valued attributes are also removed'
p6214
I0
I0
I01
Ntp6215
asg29
(dp6216
sbsS'TExamplesDistance_Normalized'
p6217
(i__main__
ClassDefinition
p6218
(dp6219
g4
I1
sg5
I01
sg6
g6217
sg7
S'TExamplesDistance'
p6220
sg9
I01
sg10
(lp6221
sg12
(lp6222
g470
ag474
ag478
ag482
ag487
ag491
ag496
asg29
(dp6223
sbsS'TExamplesDistance_Euclidean'
p6224
(i__main__
ClassDefinition
p6225
(dp6226
g4
I1
sg5
I01
sg6
g6224
sg7
S'TExamplesDistance_Normalized'
p6227
sg9
I00
sg10
(lp6228
sg12
(lp6229
(S'TDomainDistributions'
p6230
S'distributions'
p6231
g6231
S'distributions (of discrete attributes only)'
p6232
I0
I0
I00
Ntp6233
a(S'TAttributedFloatList'
p6234
S'bothSpecialDist'
p6235
S'both_special_dist'
p6236
S'distances between discrete attributes if both values are unknown'
p6237
I0
I0
I00
Ntp6238
ag470
ag474
ag478
ag482
ag487
ag491
ag496
asg29
(dp6239
sbsS'TPreprocessor_take'
p6240
(i__main__
ClassDefinition
p6241
(dp6242
g4
I1
sg5
I01
sg6
g6240
sg7
S'TPreprocessor'
p6243
sg9
I00
sg10
(lp6244
sg12
(lp6245
(S'TVariableFilterMap'
p6246
S'values'
p6247
g6247
S'variable-filter pairs'
p6248
I0
I0
I00
Ntp6249
a(S'bool'
p6250
S'conjunction'
p6251
g6251
S'decides whether to take conjunction or disjunction of values'
p6252
I0
I0
I01
Ntp6253
asg29
(dp6254
sbsS'TIMConstructor'
p6255
(i__main__
ClassDefinition
p6256
(dp6257
g4
I1
sg5
I01
sg6
g6255
sg7
S'TOrange'
p6258
sg9
I01
sg10
(lp6259
sg12
(lp6260
g1265
asg29
(dp6261
sbsS'TRuleFinder_Python'
p6262
(i__main__
ClassDefinition
p6263
(dp6264
g4
I1
sg5
I01
sg6
g6262
sg7
S'TRuleFinder'
p6265
sg9
I00
sg10
(lp6266
sg12
(lp6267
g4106
ag4109
asg29
(dp6268
sbsS'TTabDelimExampleGenerator'
p6269
(i__main__
ClassDefinition
p6270
(dp6271
g4
I1
sg5
I01
sg6
g6269
sg7
S'TFileExampleGenerator'
p6272
sg9
I00
sg10
(lp6273
sg12
(lp6274
(S'TIntList'
p6275
S'attributeTypes'
p6276
S'attribute_types'
p6277
S'types of attributes (-1 normal, 0 skip, <-1 = meta ID)'
p6278
I0
I0
I00
Ntp6279
a(S'int'
p6280
S'classPos'
p6281
S'class_pos'
p6282
S'position of the class attribute'
p6283
I0
I0
I01
Ntp6284
a(S'TIntList'
p6285
S'classPoses'
p6286
S'class_poses'
p6287
S'positions of class attributes if there are multiple; otherwise None'
p6288
I0
I0
I00
Ntp6289
a(S'int'
p6290
S'basketPos'
p6291
S'basket_pos'
p6292
S'position of the (virtual) basket attribute'
p6293
I0
I0
I01
Ntp6294
a(S'int'
p6295
S'headerLines'
p6296
S'header_lines'
p6297
S'number of header lines (3 for .tab, 1 for .txt)'
p6298
I0
I0
I01
Ntp6299
a(S'bool'
p6300
S'csv'
p6301
g6301
S"also allow ',' as a separator"
p6302
I0
I0
I01
Ntp6303
a(S'TBasketFeeder'
p6304
S'basketFeeder'
p6305
S'basket_feeder'
p6306
S'takes care of inserting the meta attributes from the basket if need be'
p6307
I0
I0
I00
Ntp6308
ag1671
ag1676
ag1681
ag322
ag326
asg29
(dp6309
sbsS'TRandomClassifier'
p6310
(i__main__
ClassDefinition
p6311
(dp6312
g4
I1
sg5
I01
sg6
g6310
sg7
S'TClassifier'
p6313
sg9
I00
sg10
(lp6314
sg12
(lp6315
(S'TDistribution'
p6316
S'probabilities'
p6317
g6317
S'probabilities of predictions'
p6318
I0
I0
I00
Ntp6319
ag94
ag99
asg29
(dp6320
sbsS'TkNNLearner'
p6321
(i__main__
ClassDefinition
p6322
(dp6323
g4
I1
sg5
I01
sg6
g6321
sg7
S'TLearner'
p6324
sg9
I00
sg10
(lp6325
sg12
(lp6326
(S'float'
p6327
g1224
g1224
S'number of neighbours (0 for sqrt of #examples)'
p6328
I0
I0
I01
Ntp6329
a(S'bool'
p6330
S'rankWeight'
p6331
S'rank_weight'
p6332
S'enable weighting by ranks'
p6333
I0
I0
I01
Ntp6334
a(S'TExamplesDistanceConstructor'
p6335
S'distanceConstructor'
p6336
S'distance_constructor'
p6337
S'metrics'
p6338
I0
I0
I00
Ntp6339
ag110
asg29
(dp6340
sbsS'TTreeDescender_UnknownToNode'
p6341
(i__main__
ClassDefinition
p6342
(dp6343
g4
I1
sg5
I01
sg6
g6341
sg7
g1615
sg9
I0
sg10
(lp6344
sg12
(lp6345
sg29
(dp6346
sbsS'TIntFloatList'
p6347
(ipyprops
ClassDefinition
p6348
(dp6349
g151
I0
sg152
I01
sg153
g6347
sg154
g155
sg156
I0
sg157
(lp6350
sg159
(lp6351
sg161
(dp6352
sbsS'TDistributionAssessor_mf'
p6353
(i__main__
ClassDefinition
p6354
(dp6355
g4
I1
sg5
I01
sg6
g6353
sg7
S'TDistributionAssessor'
p6356
sg9
I00
sg10
(lp6357
sg12
(lp6358
(S'float'
p6359
g1228
g1228
S'm for m-estimate'
p6360
I0
I0
I01
Ntp6361
asg29
(dp6362
sbsS'TExampleClusters'
p6363
(i__main__
ClassDefinition
p6364
(dp6365
g4
I1
sg5
I01
sg6
g6363
sg7
S'TGeneralExampleClustering'
p6366
sg9
I00
sg10
(lp6367
sg12
(lp6368
(S'TExampleCluster'
p6369
S'root'
p6370
g6370
S'root of cluster hierarchy'
p6371
I0
I0
I00
Ntp6372
a(S'float'
p6373
S'quality'
p6374
g6374
S"'quality' of clustering"
p6375
I0
I0
I01
Ntp6376
asg29
(dp6377
sbsS'TExamplesDistance_Python'
p6378
(i__main__
ClassDefinition
p6379
(dp6380
g4
I1
sg5
I01
sg6
g6378
sg7
S'TExamplesDistance'
p6381
sg9
I00
sg10
(lp6382
sg12
(lp6383
sg29
(dp6384
sbsS'TCostLearner'
p6385
(i__main__
ClassDefinition
p6386
(dp6387
g4
I1
sg5
I01
sg6
g6385
sg7
S'TMajorityLearner'
p6388
sg9
I00
sg10
(lp6389
sg12
(lp6390
(S'TCostMatrix'
p6391
S'cost'
p6392
g6392
S'cost matrix'
p6393
I0
I0
I00
Ntp6394
ag866
ag871
ag110
asg29
(dp6395
sbsS'TEFMDataDescription'
p6396
(i__main__
ClassDefinition
p6397
(dp6398
g4
I1
sg5
I01
sg6
g6396
sg7
S'TOrange'
p6399
sg9
I00
sg10
(lp6400
S'domainDistributions'
p6401
asg12
(lp6402
(S'TDomain'
p6403
S'domain'
p6404
g6404
S'domain'
p6405
I01
I0
I00
Ntp6406
asg29
(dp6407
sbsS'TClassifierFD'
p6408
(i__main__
ClassDefinition
p6409
(dp6410
g4
I1
sg5
I01
sg6
g6408
sg7
S'TClassifier'
p6411
sg9
I00
sg10
(lp6412
sg12
(lp6413
g307
ag94
ag99
asg29
(dp6414
sbsS'TPreprocessor_drop'
p6415
(i__main__
ClassDefinition
p6416
(dp6417
g4
I1
sg5
I01
sg6
g6415
sg7
S'TPreprocessor'
p6418
sg9
I00
sg10
(lp6419
sg12
(lp6420
(S'TVariableFilterMap'
p6421
S'values'
p6422
g6422
S'variable-filter pairs'
p6423
I0
I0
I00
Ntp6424
a(S'bool'
p6425
S'conjunction'
p6426
g6426
S'decides whether to take conjunction or disjunction of values'
p6427
I0
I0
I01
Ntp6428
asg29
(dp6429
sbsS'TTreeDescender_UnknownToCommonBranch'
p6430
(i__main__
ClassDefinition
p6431
(dp6432
g4
I1
sg5
I01
sg6
g6430
sg7
g1615
sg9
I0
sg10
(lp6433
sg12
(lp6434
sg29
(dp6435
sbsS'TPreprocessor_addNoise'
p6436
(i__main__
ClassDefinition
p6437
(dp6438
g4
I1
sg5
I01
sg6
g6436
sg7
S'TPreprocessor'
p6439
sg9
I00
sg10
(lp6440
sg12
(lp6441
(S'TVariableFloatMap'
p6442
S'proportions'
p6443
g6443
S'proportion of changed values for individual attributes'
p6444
I0
I0
I00
Ntp6445
a(S'float'
p6446
S'defaultProportion'
p6447
S'default_proportion'
p6448
S'default proportion of changed values (for attributes not specified above)'
p6449
I0
I0
I01
Ntp6450
a(S'TRandomGenerator'
p6451
S'randomGenerator'
p6452
S'random_generator'
p6453
S'random number generator'
p6454
I0
I0
I00
Ntp6455
asg29
(dp6456
sbsS'TStopIMClusteringByAssessor_binary'
p6457
(i__main__
ClassDefinition
p6458
(dp6459
g4
I1
sg5
I01
sg6
g6457
sg7
S'TStopIMClusteringByAssessor'
p6460
sg9
I00
sg10
(lp6461
sg12
(lp6462
sg29
(dp6463
sbsS'TColumnAssessor_mf'
p6464
(i__main__
ClassDefinition
p6465
(dp6466
g4
I1
sg5
I01
sg6
g6464
sg7
S'TColumnAssessor'
p6467
sg9
I00
sg10
(lp6468
sg12
(lp6469
(S'float'
p6470
g1228
g1228
S'm for m-estimate'
p6471
I0
I0
I01
Ntp6472
asg29
(dp6473
sbsS'TKruskalStress'
p6474
(i__main__
ClassDefinition
p6475
(dp6476
g115
I1
sg116
I0
sg117
g6474
sg118
S'TStressFunc'
p6477
sg120
I00
sg121
(lp6478
sg123
(lp6479
sg125
(dp6480
sbsS'TExamplesDistanceConstructor'
p6481
(i__main__
ClassDefinition
p6482
(dp6483
g4
I1
sg5
I01
sg6
g6481
sg7
S'TOrange'
p6484
sg9
I01
sg10
(lp6485
sg12
(lp6486
g1383
asg29
(dp6487
sbsS'TSubsetsGenerator'
p6488
(i__main__
ClassDefinition
p6489
(dp6490
g4
I1
sg5
I01
sg6
g6488
sg7
S'TOrange'
p6491
sg9
I01
sg10
(lp6492
sg12
(lp6493
g223
asg29
(dp6494
sbsS'TPreprocessor_addCensorWeight'
p6495
(i__main__
ClassDefinition
p6496
(dp6497
g4
I1
sg5
I01
sg6
g6495
sg7
S'TPreprocessor'
p6498
sg9
I00
sg10
(lp6499
sg12
(lp6500
(S'TVariable'
p6501
S'outcomeVar'
p6502
S'outcome_var'
p6503
S'outcome variable'
p6504
I0
I0
I00
Ntp6505
a(S'TVariable'
p6506
S'timeVar'
p6507
S'time_var'
p6508
S'time variable'
p6509
I0
I0
I00
Ntp6510
a(S'TValue'
p6511
S'eventValue'
p6512
S'event_value'
p6513
S'event (fail) value'
p6514
I0
I0
I01
Ntp6515
a(S'int'
p6516
S'method'
p6517
g6517
S' weighting method'
p6518
I0
I0
I01
S'Preprocessor_addCensorWeight_Method'
p6519
tp6520
a(S'float'
p6521
S'maxTime'
p6522
S'max_time'
p6523
S'maximal time'
p6524
I0
I0
I01
Ntp6525
a(S'bool'
p6526
S'addComplementary'
p6527
S'add_complementary'
p6528
S'if true (default is false), complementary examples are added for censored examples'
p6529
I0
I0
I01
Ntp6530
asg29
(dp6531
S'Method'
p6532
(lp6533
(S'Linear'
p6534
S'TPreprocessor_addCensorWeight::linear'
p6535
tp6536
a(S'KM'
p6537
S'TPreprocessor_addCensorWeight::km'
p6538
tp6539
a(S'Bayes'
p6540
S'TPreprocessor_addCensorWeight::bayes'
p6541
tp6542
assbsS'TRuleBeamCandidateSelector_Python'
p6543
(i__main__
ClassDefinition
p6544
(dp6545
g4
I1
sg5
I01
sg6
g6543
sg7
S'TRuleBeamCandidateSelector'
p6546
sg9
I00
sg10
(lp6547
sg12
(lp6548
sg29
(dp6549
sbsS'TIntList'
p6550
(ipyprops
ClassDefinition
p6551
(dp6552
g151
I0
sg152
I01
sg153
g6550
sg154
g155
sg156
I0
sg157
(lp6553
sg159
(lp6554
sg161
(dp6555
sbsS'TEntropyDiscretization'
p6556
(i__main__
ClassDefinition
p6557
(dp6558
g4
I1
sg5
I01
sg6
g6556
sg7
S'TDiscretization'
p6559
sg9
I00
sg10
(lp6560
sg12
(lp6561
(S'int'
p6562
S'maxNumberOfIntervals'
p6563
(g6563
g1034
tp6564
S' maximal number of intervals; default = 0 (no limits)'
p6565
I0
I0
I01
Ntp6566
a(S'bool'
p6567
S'forceAttribute'
p6568
(g6568
S'forced'
p6569
tp6570
S' minimal number of intervals; default = 0 (no limits)'
p6571
I0
I0
I01
Ntp6572
asg29
(dp6573
sbsS'TIMBySorting'
p6574
(i__main__
ClassDefinition
p6575
(dp6576
g4
I1
sg5
I01
sg6
g6574
sg7
S'TIMConstructor'
p6577
sg9
I00
sg10
(lp6578
sg12
(lp6579
g1265
asg29
(dp6580
sbsS'TImputerConstructor_asValue'
p6581
(i__main__
ClassDefinition
p6582
(dp6583
g4
I1
sg5
I01
sg6
g6581
sg7
S'TImputerConstructor'
p6584
sg9
I00
sg10
(lp6585
sg12
(lp6586
g180
asg29
(dp6587
sbsS'TGaussianDistribution'
p6588
(i__main__
ClassDefinition
p6589
(dp6590
g4
I1
sg5
I01
sg6
g6588
sg7
S'TDistribution'
p6591
sg9
I00
sg10
(lp6592
sg12
(lp6593
(S'float'
p6594
S'mean'
p6595
g6595
S'mu'
p6596
I0
I0
I01
Ntp6597
a(S'float'
p6598
S'sigma'
p6599
g6599
S'sigma'
p6600
I0
I0
I01
Ntp6601
ag1148
ag1152
ag1156
ag1160
ag1164
ag1169
ag1174
ag1179
asg29
(dp6602
sbsS'TExampleDistVector'
p6603
(i__main__
ClassDefinition
p6604
(dp6605
g4
I1
sg5
I01
sg6
g6603
sg7
S'TOrange'
p6606
sg9
I00
sg10
(lp6607
sg12
(lp6608
sg29
(dp6609
sbsS'TConditionalProbabilityEstimatorList'
p6610
(ipyprops
ClassDefinition
p6611
(dp6612
g151
I0
sg152
I01
sg153
g6610
sg154
g155
sg156
I0
sg157
(lp6613
sg159
(lp6614
sg161
(dp6615
sbsS'TRuleBeamFilter_Width'
p6616
(i__main__
ClassDefinition
p6617
(dp6618
g4
I1
sg5
I01
sg6
g6616
sg7
S'TRuleBeamFilter'
p6619
sg9
I00
sg10
(lp6620
sg12
(lp6621
(S'int'
p6622
S'width'
p6623
g6623
g589
I0
I0
I01
Ntp6624
asg29
(dp6625
sbsS'TProbabilityEstimator'
p6626
(i__main__
ClassDefinition
p6627
(dp6628
g4
I1
sg5
I01
sg6
g6626
sg7
S'TOrange'
p6629
sg9
I01
sg10
(lp6630
sg12
(lp6631
g1538
ag1543
asg29
(dp6632
sbsS'TIMClustering'
p6633
(i__main__
ClassDefinition
p6634
(dp6635
g4
I1
sg5
I01
sg6
g6633
sg7
S'TOrange'
p6636
sg9
I00
sg10
(lp6637
sg12
(lp6638
(S'TIM'
p6639
S'im'
p6640
g6640
S'incompatibilty matrix'
p6641
I0
I0
I00
Ntp6642
a(S'TIntList'
p6643
S'clusters'
p6644
g6644
S'cluster index for each matrix column'
p6645
I0
I0
I00
Ntp6646
a(S'int'
p6647
S'maxCluster'
p6648
S'max_cluster'
p6649
S'the highest cluster index'
p6650
I0
I0
I01
Ntp6651
a(S'float'
p6652
S'quality'
p6653
g6653
S'cluster quality'
p6654
I0
I0
I01
Ntp6655
asg29
(dp6656
sbsS'TRuleStoppingCriteria'
p6657
(i__main__
ClassDefinition
p6658
(dp6659
g4
I1
sg5
I01
sg6
g6657
sg7
S'TOrange'
p6660
sg9
I01
sg10
(lp6661
sg12
(lp6662
sg29
(dp6663
sbsS'TImputerConstructor_model'
p6664
(i__main__
ClassDefinition
p6665
(dp6666
g4
I1
sg5
I01
sg6
g6664
sg7
S'TImputerConstructor'
p6667
sg9
I00
sg10
(lp6668
sg12
(lp6669
(S'TLearner'
p6670
S'learnerDiscrete'
p6671
S'learner_discrete'
p6672
S'learner for discrete attributes'
p6673
I0
I0
I00
Ntp6674
a(S'TLearner'
p6675
S'learnerContinuous'
p6676
S'learner_continuous'
p6677
S'learner for continuous attributes'
p6678
I0
I0
I00
Ntp6679
a(S'bool'
p6680
S'useClass'
p6681
S'use_class'
p6682
S'tells whether to use class value in imputation (default: false)'
p6683
I0
I0
I01
Ntp6684
ag180
asg29
(dp6685
sbsS'TFindNearestConstructor_BruteForce'
p6686
(i__main__
ClassDefinition
p6687
(dp6688
g4
I1
sg5
I01
sg6
g6686
sg7
S'TFindNearestConstructor'
p6689
sg9
I00
sg10
(lp6690
sg12
(lp6691
g1903
ag1908
asg29
(dp6692
sbsS'TImputerConstructor'
p6693
(i__main__
ClassDefinition
p6694
(dp6695
g4
I1
sg5
I01
sg6
g6693
sg7
S'TOrange'
p6696
sg9
I01
sg10
(lp6697
sg12
(lp6698
g180
asg29
(dp6699
sbsS'TPreprocessor'
p6700
(i__main__
ClassDefinition
p6701
(dp6702
g4
I1
sg5
I01
sg6
g6700
sg7
S'TOrange'
p6703
sg9
I01
sg10
(lp6704
sg12
(lp6705
sg29
(dp6706
sbsS'TDiscretizer'
p6707
(i__main__
ClassDefinition
p6708
(dp6709
g4
I1
sg5
I01
sg6
g6707
sg7
S'TTransformValue'
p6710
sg9
I01
sg10
(lp6711
sg12
(lp6712
g840
asg29
(dp6713
sbsS'TIMByRowsPreprocessor'
p6714
(i__main__
ClassDefinition
p6715
(dp6716
g4
I1
sg5
I01
sg6
g6714
sg7
S'TOrange'
p6717
sg9
I01
sg10
(lp6718
sg12
(lp6719
sg29
(dp6720
sbsS'TTreeStopCriteria_common'
p6721
(i__main__
ClassDefinition
p6722
(dp6723
g4
I1
sg5
I01
sg6
g6721
sg7
S'TTreeStopCriteria'
p6724
sg9
I00
sg10
(lp6725
sg12
(lp6726
(S'float'
p6727
S'maxMajority'
p6728
S'max_majority'
p6729
S'a maximal proportion of majority class for division to continue'
p6730
I0
I0
I01
Ntp6731
a(S'float'
p6732
S'minInstances'
p6733
S'min_instances'
p6734
S'a minimal number of examples for division to continue'
p6735
I0
I0
I01
Ntp6736
asg29
(dp6737
sbsS'TTreeStopCriteria_Python'
p6738
(i__main__
ClassDefinition
p6739
(dp6740
g4
I1
sg5
I01
sg6
g6738
sg7
S'TTreeStopCriteria'
p6741
sg9
I00
sg10
(lp6742
sg12
(lp6743
sg29
(dp6744
sbsS'TExamplesDistanceConstructor_Maximal'
p6745
(i__main__
ClassDefinition
p6746
(dp6747
g4
I1
sg5
I01
sg6
g6745
sg7
S'TExamplesDistanceConstructor_Normalized'
p6748
sg9
I00
sg10
(lp6749
sg12
(lp6750
g2141
ag2146
ag1383
asg29
(dp6751
sbsS'TIGByIM'
p6752
(i__main__
ClassDefinition
p6753
(dp6754
g4
I1
sg5
I01
sg6
g6752
sg7
S'TIGConstructor'
p6755
sg9
I00
sg10
(lp6756
sg12
(lp6757
(S'TIMConstructor'
p6758
S'IMconstructor'
p6759
g6759
S'IM constructor'
p6760
I0
I0
I00
Ntp6761
asg29
(dp6762
sbsS'TRuleEvaluator_LRS'
p6763
(i__main__
ClassDefinition
p6764
(dp6765
g4
I1
sg5
I01
sg6
g6763
sg7
S'TRuleEvaluator'
p6766
sg9
I00
sg10
(lp6767
sg12
(lp6768
(S'TRuleList'
p6769
S'rules'
p6770
g6770
g589
I0
I0
I00
Ntp6771
a(S'bool'
p6772
S'storeRules'
p6773
S'store_rules'
p6774
g589
I0
I0
I01
Ntp6775
asg29
(dp6776
sbs.