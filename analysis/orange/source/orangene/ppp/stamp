(dp0
S'TComputeDomainContingency_ImputeWithClassifier'
p1
(i__main__
ClassDefinition
p2
(dp3
S'extended'
p4
I1
sS'imported'
p5
I01
sS'name'
p6
g1
sS'parent'
p7
S'TComputeDomainContingency'
p8
sS'abstract'
p9
I00
sS'components'
p10
(lp11
sS'properties'
p12
(lp13
(S'TLearner'
p14
S'learnerForDiscrete'
p15
S'learner_for_discrete'
p16
S'constructs a classifier for imputation of discrete values'
p17
I0
I0
I00
Ntp18
a(S'TLearner'
p19
S'learnerForContinuous'
p20
S'learner_for_continuous'
p21
S'constructs a classifier for imputation of continuous values'
p22
I0
I0
I00
Ntp23
a(S'bool'
p24
S'classIsOuter'
p25
S'class_is_outer'
p26
S'tells whether the class is the outer variable in contingencies'
p27
I0
I0
I01
Ntp28
asS'constants'
p29
(dp30
sbsS'TRuleDataStoppingCriteria_NoPositives'
p31
(i__main__
ClassDefinition
p32
(dp33
g4
I1
sg5
I01
sg6
g31
sg7
S'TRuleDataStoppingCriteria'
p34
sg9
I00
sg10
(lp35
sg12
(lp36
sg29
(dp37
sbsS'TExampleCluster'
p38
(i__main__
ClassDefinition
p39
(dp40
g4
I1
sg5
I01
sg6
g38
sg7
S'TOrange'
p41
sg9
I00
sg10
(lp42
sg12
(lp43
(S'TExampleCluster'
p44
S'left'
p45
g45
S"'left' cluster"
p46
I0
I0
I00
Ntp47
a(S'TExampleCluster'
p48
S'right'
p49
g49
S"'right' cluster"
p50
I0
I0
I00
Ntp51
a(S'float'
p52
S'distance'
p53
g53
S'distance between the two clusters (not defined for leaves)'
p54
I0
I0
I01
Ntp55
a(S'TExample'
p56
S'centroid'
p57
g57
S"cluster's centroid (always defined for leaves)"
p58
I0
I0
I00
Ntp59
asg29
(dp60
sbsS'TClassifierByLookupTableN'
p61
(i__main__
ClassDefinition
p62
(dp63
g4
I1
sg5
I01
sg6
g61
sg7
S'TClassifierByLookupTable'
p64
sg9
I00
sg10
(lp65
sg12
(lp66
(S'TVarList'
p67
S'variables'
p68
g68
S'attributes'
p69
I01
I0
I00
Ntp70
a(S'TIntList'
p71
S'noOfValues'
p72
S'no_of_values'
p73
S'number of values for each attribute'
p74
I01
I0
I00
Ntp75
a(S'TEFMDataDescription'
p76
S'dataDescription'
p77
S'data_description'
p78
S'data description'
p79
I0
I0
I00
Ntp80
a(S'TValueList'
p81
S'lookupTable'
p82
S'lookup_table'
p83
S'a list of class values, one for each attribute value'
p84
I01
I0
I00
Ntp85
a(S'TDistributionList'
p86
S'distributions'
p87
g87
S'a list of class distributions, one for each attribute value'
p88
I01
I0
I00
Ntp89
a(S'TVariable'
p90
S'classVar'
p91
S'class_var'
p92
S'class variable'
p93
I0
I0
I00
Ntp94
a(S'bool'
p95
S'computesProbabilities'
p96
S'computes_probabilities'
p97
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p98
I0
I0
I01
Ntp99
asg29
(dp100
sbsS'TLearner_Python'
p101
(i__main__
ClassDefinition
p102
(dp103
g4
I1
sg5
I01
sg6
g101
sg7
S'TLearner'
p104
sg9
I00
sg10
(lp105
sg12
(lp106
(S'int'
p107
S'needs'
p108
g108
S'the kind of data that learner needs'
p109
I01
I0
I01
Ntp110
asg29
(dp111
sbsS'TConditionalProbabilityEstimator_FromDistribution'
p112
(i__main__
ClassDefinition
p113
(dp114
g4
I1
sg5
I01
sg6
g112
sg7
S'TConditionalProbabilityEstimator'
p115
sg9
I00
sg10
(lp116
sg12
(lp117
(S'TContingency'
p118
S'probabilities'
p119
g119
S'Contingency that stores conditional probabilities'
p120
I0
I0
I00
Ntp121
a(S'bool'
p122
S'supportsDiscrete'
p123
S'supports_discrete'
p124
S'can estimate probabilities of discrete attributes'
p125
I01
I0
I01
Ntp126
a(S'bool'
p127
S'supportsContinuous'
p128
S'supports_continuous'
p129
S'can estimate probabilities of continuous attributes'
p130
I01
I0
I01
Ntp131
asg29
(dp132
sbsS'THeatmapList'
p133
(ipyprops
ClassDefinition
p134
(dp135
S'extended'
p136
I0
sS'imported'
p137
I01
sS'name'
p138
g133
sS'parent'
p139
S'TOrange'
p140
sS'abstract'
p141
I0
sS'components'
p142
(lp143
sS'properties'
p144
(lp145
sS'constants'
p146
(dp147
sbsS'TFeatureInducer'
p148
(i__main__
ClassDefinition
p149
(dp150
g4
I1
sg5
I01
sg6
g148
sg7
S'TOrange'
p151
sg9
I01
sg10
(lp152
sg12
(lp153
sg29
(dp154
sbsS'TImputerConstruct_Python'
p155
(i__main__
ClassDefinition
p156
(dp157
g4
I1
sg5
I01
sg6
g155
sg7
S'TImputerConstructor'
p158
sg9
I00
sg10
(lp159
sg12
(lp160
(S'bool'
p161
S'imputeClass'
p162
S'impute_class'
p163
S'tells whether to impute the class value (default: true)'
p164
I0
I0
I01
Ntp165
asg29
(dp166
sbsS'TExampleGeneratorList'
p167
(ipyprops
ClassDefinition
p168
(dp169
g136
I0
sg137
I01
sg138
g167
sg139
g140
sg141
I0
sg142
(lp170
sg144
(lp171
sg146
(dp172
sbsS'TIMByRowsConstructor'
p173
(i__main__
ClassDefinition
p174
(dp175
g4
I1
sg5
I01
sg6
g173
sg7
S'TOrange'
p176
sg9
I01
sg10
(lp177
sg12
(lp178
sg29
(dp179
sbsS'TSubsetsGenerator_withRestrictions'
p180
(i__main__
ClassDefinition
p181
(dp182
g4
I1
sg5
I01
sg6
g180
sg7
S'TSubsetsGenerator'
p183
sg9
I00
sg10
(lp184
sg12
(lp185
(S'TSubsetsGenerator'
p186
S'subGenerator'
p187
S'sub_generator'
p188
S'subset generator'
p189
I0
I0
I00
Ntp190
a(S'TVarList'
p191
S'required'
p192
g192
S'set of required attributes'
p193
I0
I0
I00
Ntp194
a(S'TVarList'
p195
S'forbidden'
p196
g196
S'set of forbidden attributes'
p197
I0
I0
I00
Ntp198
a(S'TVarListList'
p199
S'forbiddenSubSubsets'
p200
S'forbidden_sub_subsets'
p201
S'set of forbidden subsets (attributes that must not occur together)'
p202
I0
I0
I00
Ntp203
a(S'TVarList'
p204
S'varList'
p205
S'var_list'
p206
S'a set of attributes from which subsets are generated'
p207
I0
I0
I00
Ntp208
asg29
(dp209
sbsS'TEVDistList'
p210
(ipyprops
ClassDefinition
p211
(dp212
g136
I0
sg137
I01
sg138
g210
sg139
g140
sg141
I0
sg142
(lp213
sg144
(lp214
sg146
(dp215
sbsS'TValueFilterList'
p216
(ipyprops
ClassDefinition
p217
(dp218
g136
I0
sg137
I01
sg138
g216
sg139
g140
sg141
I0
sg142
(lp219
sg144
(lp220
sg146
(dp221
sbsS'TRuleBeamFilter_Python'
p222
(i__main__
ClassDefinition
p223
(dp224
g4
I1
sg5
I01
sg6
g222
sg7
S'TRuleBeamFilter'
p225
sg9
I00
sg10
(lp226
sg12
(lp227
sg29
(dp228
sbsS'TTreeExampleSplitter'
p229
(i__main__
ClassDefinition
p230
(dp231
g4
I1
sg5
I01
sg6
g229
sg7
S'TOrange'
p232
sg9
I01
sg10
(lp233
sg12
(lp234
sg29
(dp235
sbsS'TSVMClassifier'
p236
(i__main__
ClassDefinition
p237
(dp238
g4
I1
sg5
I01
sg6
g236
sg7
S'TClassifierFD'
p239
sg9
I00
sg10
(lp240
sg12
(lp241
(S'TIntList'
p242
S'nSV'
p243
S'n_SV'
p244
S'nSV'
p245
I0
I0
I00
Ntp246
a(S'TFloatList'
p247
S'rho'
p248
g248
S'rho'
p249
I0
I0
I00
Ntp250
a(S'TFloatListList'
p251
S'coef'
p252
g252
S'coef'
p253
I0
I0
I00
Ntp254
a(S'TFloatList'
p255
S'probA'
p256
S'prob_a'
p257
S'probA - pairwise probability information'
p258
I0
I0
I00
Ntp259
a(S'TFloatList'
p260
S'probB'
p261
S'prob_b'
p262
S'probB - pairwise probability information'
p263
I0
I0
I00
Ntp264
a(S'TExampleTable'
p265
S'supportVectors'
p266
S'support_vectors'
p267
S'support vectors'
p268
I0
I0
I00
Ntp269
a(S'TExampleTable'
p270
S'examples'
p271
g271
S'examples used to train the classifier'
p272
I0
I0
I00
Ntp273
a(S'TKernelFunc'
p274
S'kernelFunc'
p275
S'kernel_func'
p276
S'custom kernel function'
p277
I0
I0
I00
Ntp278
a(S'int'
p279
S'svm_type'
p280
g280
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p281
I0
I0
I01
S'SVMLearner_SVMType'
p282
tp283
a(S'int'
p284
S'kernel_type'
p285
g285
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p286
I0
I0
I01
S'SVMLearner_Kernel'
p287
tp288
a(S'TDomain'
p289
S'domain'
p290
g290
S'domain'
p291
I0
I0
I00
Ntp292
ag94
ag99
asg29
(dp293
sbsS'TFilteredGenerator'
p294
(i__main__
ClassDefinition
p295
(dp296
g4
I1
sg5
I01
sg6
g294
sg7
S'TAdapterGenerator'
p297
sg9
I00
sg10
(lp298
sg12
(lp299
(S'TFilter'
p300
S'filter'
p301
g301
S'decides which examples are skipped'
p302
I0
I0
I00
Ntp303
a(S'TDomain'
p304
S'domain'
p305
g305
S'domain'
p306
I0
I0
I00
Ntp307
a(S'int'
p308
S'version'
p309
g309
S'unique version identifier'
p310
I01
I0
I01
Ntp311
asg29
(dp312
sbsS'TPythonVariable'
p313
(i__main__
ClassDefinition
p314
(dp315
g4
I1
sg5
I01
sg6
g313
sg7
S'TVariable'
p316
sg9
I00
sg10
(lp317
sg12
(lp318
(S'bool'
p319
S'usePickle'
p320
S'use_pickle'
p321
S'tells whether to use pickle for saving to/loading from files'
p322
I0
I0
I01
Ntp323
a(S'bool'
p324
S'useSomeValue'
p325
S'use_some_value'
p326
S'tells whether the Variable will operate on Value or SomeValue (default)'
p327
I0
I0
I01
Ntp328
a(S'int'
p329
S'varType'
p330
S'var_type'
p331
S' variable type'
p332
I0
I0
I01
S'Variable_Type'
p333
tp334
a(S'bool'
p335
S'ordered'
p336
g336
S'variable values are ordered'
p337
I0
I0
I01
Ntp338
a(S'bool'
p339
S'distributed'
p340
g340
S'variable values are distributions'
p341
I0
I0
I01
Ntp342
a(S'int'
p343
S'defaultMetaId'
p344
S'default_meta_id'
p345
S'default (proposed, suggested...) meta id for this variable'
p346
I0
I0
I01
Ntp347
a(S'TRandomGenerator'
p348
S'randomGenerator'
p349
S'random_generator'
p350
S'random generator for random values (initialized when first needed)'
p351
I0
I0
I00
Ntp352
a(S'TVariable'
p353
S'sourceVariable'
p354
S'source_variable'
p355
S'The attribute that this attribute is computed from (when applicable)'
p356
I0
I0
I00
Ntp357
a(S'TClassifier'
p358
S'getValueFrom'
p359
S'get_value_from'
p360
S'Function to compute the value from values of other variables'
p361
I0
I0
I00
Ntp362
asg29
(dp363
sbsS'TTreeLearner'
p364
(i__main__
ClassDefinition
p365
(dp366
g4
I1
sg5
I01
sg6
g364
sg7
S'TLearner'
p367
sg9
I00
sg10
(lp368
sg12
(lp369
(S'TTreeSplitConstructor'
p370
S'split'
p371
g371
S'split criterion'
p372
I0
I0
I00
Ntp373
a(S'TTreeStopCriteria'
p374
S'stop'
p375
g375
S'stop criterion'
p376
I0
I0
I00
Ntp377
a(S'TComputeDomainContingency'
p378
S'contingencyComputer'
p379
S'contingency_computer'
p380
S'computes contingency matrix'
p381
I0
I0
I00
Ntp382
a(S'TLearner'
p383
S'nodeLearner'
p384
S'node_learner'
p385
S'node learner'
p386
I0
I0
I00
Ntp387
a(S'TTreeExampleSplitter'
p388
S'exampleSplitter'
p389
S'example_splitter'
p390
S'splits examples to branches'
p391
I0
I0
I00
Ntp392
a(S'int'
p393
S'maxDepth'
p394
S'max_depth'
p395
S'maximal tree depth (0 = root only, -1 = no limit)'
p396
I0
I0
I01
Ntp397
a(S'bool'
p398
S'storeExamples'
p399
S'store_examples'
p400
S'if true (default: false), learning examples in nodes are stored'
p401
I0
I0
I01
Ntp402
a(S'bool'
p403
S'storeDistributions'
p404
S'store_distributions'
p405
S'if true (default), class distributions of learning examples in nodes are stored'
p406
I0
I0
I01
Ntp407
a(S'bool'
p408
S'storeContingencies'
p409
S'store_contingencies'
p410
S'if true (default), contingency matrices for examples are stored'
p411
I0
I0
I01
Ntp412
a(S'bool'
p413
S'storeNodeClassifier'
p414
S'store_node_classifier'
p415
S'if true (default), the internal nodes have classifiers; needed for pruning'
p416
I0
I0
I01
Ntp417
a(S'TTreeDescender'
p418
S'descender'
p419
g419
S'descends down the tree'
p420
I0
I0
I00
Ntp421
ag110
asg29
(dp422
sbsS'TPreprocessor_shuffle'
p423
(i__main__
ClassDefinition
p424
(dp425
g4
I1
sg5
I01
sg6
g423
sg7
S'TPreprocessor'
p426
sg9
I00
sg10
(lp427
sg12
(lp428
(S'TVarList'
p429
S'attributes'
p430
g430
S'tells which attributes to shuffle'
p431
I0
I0
I00
Ntp432
a(S'TRandomGenerator'
p433
S'randomGenerator'
p434
S'random_generator'
p435
S'random number generator'
p436
I0
I0
I00
Ntp437
asg29
(dp438
sbsS'TLearner'
p439
(i__main__
ClassDefinition
p440
(dp441
g4
I1
sg5
I01
sg6
g439
sg7
S'TOrange'
p442
sg9
I00
sg10
(lp443
sg12
(lp444
g110
asg29
(dp445
sbsS'TExamplesDistance_Maximal'
p446
(i__main__
ClassDefinition
p447
(dp448
g4
I1
sg5
I01
sg6
g446
sg7
S'TExamplesDistance_Normalized'
p449
sg9
I00
sg10
(lp450
sg12
(lp451
(S'TAttributedFloatList'
p452
S'normalizers'
p453
g453
S'normalizing factors for attributes'
p454
I0
I0
I00
Ntp455
a(S'TAttributedFloatList'
p456
S'bases'
p457
g457
S'lowest values for attributes'
p458
I0
I0
I00
Ntp459
a(S'TAttributedFloatList'
p460
S'averages'
p461
g461
S'average values for continuous attribute values'
p462
I0
I0
I00
Ntp463
a(S'TAttributedFloatList'
p464
S'variances'
p465
g465
S'variations for continuous attribute values'
p466
I0
I0
I00
Ntp467
a(S'int'
p468
S'domainVersion'
p469
S'domain_version'
p470
S'version of domain on which the ranges were computed'
p471
I0
I0
I01
Ntp472
a(S'bool'
p473
S'normalize'
p474
g474
S'tells whether to normalize distances between attributes'
p475
I0
I0
I01
Ntp476
a(S'bool'
p477
S'ignoreUnknowns'
p478
S'ignore_unknowns'
p479
S'if true (default: false) unknown values are ignored in computation'
p480
I0
I0
I01
Ntp481
asg29
(dp482
sbsS'TSubsetsGenerator_withRestrictions_iterator'
p483
(i__main__
ClassDefinition
p484
(dp485
g4
I1
sg5
I01
sg6
g483
sg7
S'TSubsetsGenerator_iterator'
p486
sg9
I00
sg10
(lp487
sg12
(lp488
(S'TSubsetsGenerator_iterator'
p489
S'subGenerator_iterator'
p490
S'sub_generator_iterator'
p491
S'subset generator'
p492
I0
I0
I00
Ntp493
a(S'TVarList'
p494
S'required'
p495
g495
S'set of required attributes'
p496
I0
I0
I00
Ntp497
a(S'TVarList'
p498
S'forbidden'
p499
g499
S'set of forbidden attributes'
p500
I0
I0
I00
Ntp501
a(S'TVarListList'
p502
S'forbiddenSubSubsets'
p503
S'forbidden_sub_subsets'
p504
S'set of forbidden subsets (attributes that must not occur together)'
p505
I0
I0
I00
Ntp506
a(S'TVarList'
p507
S'varList'
p508
S'var_list'
p509
S'a set of attributes from which subsets are generated'
p510
I0
I0
I00
Ntp511
asg29
(dp512
sbsS'TPreprocessor_discretize'
p513
(i__main__
ClassDefinition
p514
(dp515
g4
I1
sg5
I01
sg6
g513
sg7
S'TPreprocessor'
p516
sg9
I00
sg10
(lp517
sg12
(lp518
(S'TVarList'
p519
S'attributes'
p520
g520
S'attributes to be discretized (all, if not defined or empty)'
p521
I0
I0
I00
Ntp522
a(S'bool'
p523
S'discretizeClass'
p524
S'discretize_class'
p525
S'also discretize the class attribute (default: false)'
p526
I0
I0
I01
Ntp527
a(S'TDiscretization'
p528
S'method'
p529
g529
S'discretization method'
p530
I0
I0
I00
Ntp531
asg29
(dp532
sbsS'TRuleClassifier_logit'
p533
(i__main__
ClassDefinition
p534
(dp535
g4
I1
sg5
I01
sg6
g533
sg7
S'TRuleClassifier'
p536
sg9
I00
sg10
(lp537
sg12
(lp538
(S'TDistribution'
p539
S'prior'
p540
g540
S'prior distribution'
p541
I0
I0
I00
Ntp542
a(S'TDomain'
p543
S'domain'
p544
g544
S'Domain'
p545
I0
I0
I00
Ntp546
a(S'TFloatList'
p547
S'ruleBetas'
p548
S'rule_betas'
p549
S'Rule betas'
p550
I0
I0
I00
Ntp551
a(S'float'
p552
S'minSignificance'
p553
S'min_significance'
p554
S'minimum requested significance for betas. '
p555
I0
I0
I01
Ntp556
a(S'float'
p557
S'minBeta'
p558
S'min_beta'
p559
S'minimum beta by rule to be included in the model. '
p560
I0
I0
I01
Ntp561
a(S'bool'
p562
S'setPrefixRules'
p563
S'set_prefix_rules'
p564
S'should we order prefix rules ? '
p565
I0
I0
I01
Ntp566
a(S'bool'
p567
S'optimizeBetasFlag'
p568
S'optimize_betas_flag'
p569
S'should we assign betas to rules ? '
p570
I0
I0
I01
Ntp571
a(S'float'
p572
S'penalty'
p573
g573
S''
p574
I0
I0
I01
Ntp575
a(S'TClassifier'
p576
S'priorClassifier'
p577
S'prior_classifier'
p578
S'prior classifier used if provided'
p579
I0
I0
I00
Ntp580
a(S'TLogitClassifierState'
p581
S'currentState'
p582
S'current_state'
p583
g574
I0
I0
I00
Ntp584
a(S'TFloatList'
p585
S'wsd'
p586
g586
g574
I0
I0
I00
Ntp587
a(S'TFloatList'
p588
S'wavgCov'
p589
S'wavg_cov'
p590
g574
I0
I0
I00
Ntp591
a(S'TFloatList'
p592
S'wSatQ'
p593
S'w_sat_q'
p594
g574
I0
I0
I00
Ntp595
a(S'TFloatList'
p596
S'wsig'
p597
g597
g574
I0
I0
I00
Ntp598
a(S'TRuleList'
p599
S'prefixRules'
p600
S'prefix_rules'
p601
S'rules that trigger before logit sum.'
p602
I0
I0
I00
Ntp603
a(S'TRuleList'
p604
S'rules'
p605
g605
g574
I0
I0
I00
Ntp606
a(S'TExampleTable'
p607
S'examples'
p608
g608
g574
I0
I0
I00
Ntp609
a(S'int'
p610
S'weightID'
p611
S'weight_ID'
p612
g574
I0
I0
I01
Ntp613
ag94
ag99
asg29
(dp614
sbsS'TProgressCallback_Python'
p615
(i__main__
ClassDefinition
p616
(dp617
g4
I1
sg5
I01
sg6
g615
sg7
S'TProgressCallback'
p618
sg9
I00
sg10
(lp619
sg12
(lp620
sg29
(dp621
sbsS'TImputeClassifier'
p622
(i__main__
ClassDefinition
p623
(dp624
g4
I1
sg5
I01
sg6
g622
sg7
S'TClassifier'
p625
sg9
I00
sg10
(lp626
sg12
(lp627
(S'TClassifierFromVar'
p628
S'classifierFromVar'
p629
S'classifier_from_var'
p630
S'ClassifierFromVar that is used to retrieve defined values'
p631
I0
I0
I00
Ntp632
a(S'TClassifier'
p633
S'imputer'
p634
g634
S'classifier that is used to determine the missing values '
p635
I0
I0
I00
Ntp636
ag94
ag99
asg29
(dp637
sbsS'TRuleCovererAndRemover'
p638
(i__main__
ClassDefinition
p639
(dp640
g4
I1
sg5
I01
sg6
g638
sg7
S'TOrange'
p641
sg9
I01
sg10
(lp642
sg12
(lp643
sg29
(dp644
sbsS'TFilterList'
p645
(ipyprops
ClassDefinition
p646
(dp647
g136
I0
sg137
I01
sg138
g645
sg139
g140
sg141
I0
sg142
(lp648
sg144
(lp649
sg146
(dp650
sbsS'TPythonValue'
p651
(i__main__
ClassDefinition
p652
(dp653
g4
I1
sg5
I01
sg6
g651
sg7
S'TSomeValue'
p654
sg9
I00
sg10
(lp655
sg12
(lp656
sg29
(dp657
sbsS'TAssociationRulesSparseInducer'
p658
(i__main__
ClassDefinition
p659
(dp660
g4
I1
sg5
I01
sg6
g658
sg7
S'TOrange'
p661
sg9
I00
sg10
(lp662
sg12
(lp663
(S'int'
p664
S'maxItemSets'
p665
S'max_item_sets'
p666
S'maximal number of itemsets (increase if you want)'
p667
I0
I0
I01
Ntp668
a(S'float'
p669
S'confidence'
p670
g670
S'required confidence'
p671
I0
I0
I01
Ntp672
a(S'float'
p673
S'support'
p674
g674
S'required support'
p675
I0
I0
I01
Ntp676
a(S'bool'
p677
S'storeExamples'
p678
S'store_examples'
p679
S'stores examples corresponding to rules'
p680
I0
I0
I01
Ntp681
asg29
(dp682
sbsS'TFilter_sameExample'
p683
(i__main__
ClassDefinition
p684
(dp685
g4
I1
sg5
I01
sg6
g683
sg7
S'TFilter'
p686
sg9
I00
sg10
(lp687
sg12
(lp688
(S'TExample'
p689
S'example'
p690
g690
S'example with which examples are compared'
p691
I0
I0
I00
Ntp692
a(S'bool'
p693
S'negate'
p694
g694
S'if true, filter output should be negated.'
p695
I0
I0
I01
Ntp696
a(S'TDomain'
p697
S'domain'
p698
g698
S'domain to which the examples are converted (if needed)'
p699
I0
I0
I00
Ntp700
asg29
(dp701
sbsS'TRuleClassifierConstructor'
p702
(i__main__
ClassDefinition
p703
(dp704
g4
I1
sg5
I01
sg6
g702
sg7
S'TOrange'
p705
sg9
I01
sg10
(lp706
sg12
(lp707
sg29
(dp708
sbsS'TMakeRandomIndicesMultiple'
p709
(i__main__
ClassDefinition
p710
(dp711
g4
I1
sg5
I01
sg6
g709
sg7
S'TMakeRandomIndices'
p712
sg9
I00
sg10
(lp713
sg12
(lp714
(S'int'
p715
S'stratified'
p716
g716
S' requests stratified distributions'
p717
I0
I0
I01
S'MakeRandomIndices_Stratification'
p718
tp719
a(S'int'
p720
S'randseed'
p721
g721
S'a seed for random generator'
p722
I0
I0
I01
Ntp723
a(S'TRandomGenerator'
p724
S'randomGenerator'
p725
S'random_generator'
p726
S'a random generator'
p727
I0
I0
I00
Ntp728
asg29
(dp729
sbsS'TLearnerFD'
p730
(i__main__
ClassDefinition
p731
(dp732
g4
I1
sg5
I01
sg6
g730
sg7
S'TLearner'
p733
sg9
I00
sg10
(lp734
sg12
(lp735
(S'TDomain'
p736
S'domain'
p737
g737
S'domain'
p738
I0
I0
I00
Ntp739
ag110
asg29
(dp740
sbsS'TP2NN'
p741
(i__main__
ClassDefinition
p742
(dp743
g4
I1
sg5
I01
sg6
g741
sg7
S'TPNN'
p744
sg9
I00
sg10
(lp745
sg12
(lp746
(S'int'
p747
S'dimensions'
p748
g748
S'the number of dimensions'
p749
I01
I0
I01
Ntp750
a(S'TFloatList'
p751
S'offsets'
p752
g752
S'offsets to subtract from the attribute values'
p753
I0
I0
I00
Ntp754
a(S'TFloatList'
p755
S'normalizers'
p756
g756
S'number to divide the values by'
p757
I0
I0
I00
Ntp758
a(S'TFloatList'
p759
S'averages'
p760
g760
S'numbers to use instead of the missing'
p761
I0
I0
I00
Ntp762
a(S'bool'
p763
S'normalizeExamples'
p764
S'normalize_examples'
p765
S'if true, attribute values are divided to sum up to 1'
p766
I0
I0
I01
Ntp767
a(S'int'
p768
S'nExamples'
p769
S'n_examples'
p770
S'the number of examples'
p771
I01
I0
I01
Ntp772
a(S'int'
p773
S'law'
p774
g774
S'law'
p775
I0
I0
I01
Ntp776
ag292
ag94
ag99
asg29
(dp777
sbsS'TTreeSplitConstructor'
p778
(i__main__
ClassDefinition
p779
(dp780
g4
I1
sg5
I01
sg6
g778
sg7
S'TOrange'
p781
sg9
I01
sg10
(lp782
sg12
(lp783
(S'float'
p784
S'minSubset'
p785
S'min_subset'
p786
S'minimal number of examples in a subset'
p787
I0
I0
I01
Ntp788
asg29
(dp789
sbsS'TMultiClassifier'
p790
(i__main__
ClassDefinition
p791
(dp792
g4
I1
sg5
I01
sg6
g790
sg7
S'TOrange'
p793
sg9
I00
sg10
(lp794
sg12
(lp795
(S'TVarList'
p796
S'classVars'
p797
S'class_vars'
p798
S'class variables'
p799
I0
I0
I00
Ntp800
a(S'TDomain'
p801
S'domain'
p802
g802
S'domain'
p803
I0
I0
I00
Ntp804
a(S'bool'
p805
S'computesProbabilities'
p806
S'computes_probabilities'
p807
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p808
I0
I0
I01
Ntp809
asg29
(dp810
sbsS'TMapIntValue'
p811
(i__main__
ClassDefinition
p812
(dp813
g4
I1
sg5
I01
sg6
g811
sg7
S'TTransformValue'
p814
sg9
I00
sg10
(lp815
sg12
(lp816
(S'TIntList'
p817
S'mapping'
p818
g818
S'a lookup table'
p819
I0
I0
I00
Ntp820
a(S'TTransformValue'
p821
S'subTransform'
p822
S'sub_transform'
p823
S'transformation executed prior to this'
p824
I0
I0
I00
Ntp825
asg29
(dp826
sbsS'TDistributionAssessor_Kramer'
p827
(i__main__
ClassDefinition
p828
(dp829
g4
I1
sg5
I01
sg6
g827
sg7
S'TDistributionAssessor'
p830
sg9
I00
sg10
(lp831
sg12
(lp832
sg29
(dp833
sbsS'TTreeExampleSplitter_UnknownsToBranch'
p834
(i__main__
ClassDefinition
p835
(dp836
g4
I1
sg5
I01
sg6
g834
sg7
S'TTreeExampleSplitter'
p837
sg9
I00
sg10
(lp838
sg12
(lp839
sg29
(dp840
sbsS'TMajorityLearner'
p841
(i__main__
ClassDefinition
p842
(dp843
g4
I1
sg5
I01
sg6
g841
sg7
S'TLearner'
p844
sg9
I00
sg10
(lp845
sg12
(lp846
(S'TProbabilityEstimatorConstructor'
p847
S'estimatorConstructor'
p848
S'estimator_constructor'
p849
S'constructs probability estimator'
p850
I0
I0
I00
Ntp851
a(S'TDistribution'
p852
S'aprioriDistribution'
p853
S'apriori_distribution'
p854
S'apriori class distribution'
p855
I0
I0
I00
Ntp856
ag110
asg29
(dp857
sbsS'TEVDistGetter_Standard'
p858
(i__main__
ClassDefinition
p859
(dp860
g4
I1
sg5
I01
sg6
g858
sg7
S'TEVDistGetter'
p861
sg9
I00
sg10
(lp862
sg12
(lp863
(S'TEVDistList'
p864
S'dists'
p865
g865
S'EVC distribution (sorted by rule length, 0 = for rules without conditions)'
p866
I0
I0
I00
Ntp867
asg29
(dp868
sbsS'TFeatureByIM'
p869
(i__main__
ClassDefinition
p870
(dp871
g4
I1
sg5
I01
sg6
g869
sg7
S'TFeatureInducer'
p872
sg9
I00
sg10
(lp873
sg12
(lp874
(S'TIMConstructor'
p875
S'IMconstructor'
p876
g876
S'incompatibility matrix constructor'
p877
I0
I0
I00
Ntp878
a(S'TClustersFromIM'
p879
S'clustersFromIM'
p880
S'clusters_from_IM'
p881
S'clustering algorithm'
p882
I0
I0
I00
Ntp883
a(S'int'
p884
S'completion'
p885
g885
S' decides how to determine the class for points not covered by any cluster'
p886
I0
I0
I01
S'FeatureByIM_Completion'
p887
tp888
asg29
(dp889
S'Completion'
p890
(lp891
(S'NoCompletion'
p892
S'completion_no'
p893
tp894
a(S'CompletionByDefault'
p895
S'completion_default'
p896
tp897
a(S'CompletionByBayes'
p898
S'completion_bayes'
p899
tp900
assbsS'TMeasureAttributeFromProbabilities'
p901
(i__main__
ClassDefinition
p902
(dp903
g4
I1
sg5
I01
sg6
g901
sg7
S'TMeasureAttribute'
p904
sg9
I01
sg10
(lp905
sg12
(lp906
(S'TProbabilityEstimatorConstructor'
p907
S'estimatorConstructor'
p908
S'estimator_constructor'
p909
S'probability estimator (none by default)'
p910
I0
I0
I00
Ntp911
a(S'TConditionalProbabilityEstimatorConstructor'
p912
S'conditionalEstimatorConstructor'
p913
S'conditional_estimator_constructor'
p914
S'conditional probability estimator (none by default)'
p915
I0
I0
I00
Ntp916
a(S'int'
p917
S'unknownsTreatment'
p918
S'unknowns_treatment'
p919
S' treatment of unknown values'
p920
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p921
tp922
a(S'int'
p923
S'needs'
p924
g924
S' describes what kind of data is needed for computation'
p925
I0
I0
I01
S'MeasureAttribute_Needs'
p926
tp927
a(S'bool'
p928
S'handlesDiscrete'
p929
S'handles_discrete'
p930
S'tells whether the measure can handle discrete attributes'
p931
I0
I0
I01
Ntp932
a(S'bool'
p933
S'handlesContinuous'
p934
S'handles_continuous'
p935
S'tells whether the measure can handle continuous attributes'
p936
I0
I0
I01
Ntp937
a(S'bool'
p938
S'computesThresholds'
p939
S'computes_thresholds'
p940
S'tells whether the measure can compute threshold functions/maxima for continuous attributes'
p941
I0
I0
I01
Ntp942
asg29
(dp943
sbsS'TProbabilityEstimatorConstructor_relative'
p944
(i__main__
ClassDefinition
p945
(dp946
g4
I1
sg5
I01
sg6
g944
sg7
S'TProbabilityEstimatorConstructor'
p947
sg9
I00
sg10
(lp948
sg12
(lp949
sg29
(dp950
sbsS'TClassifierByLookupTable3'
p951
(i__main__
ClassDefinition
p952
(dp953
g4
I1
sg5
I01
sg6
g951
sg7
S'TClassifierByLookupTable'
p954
sg9
I00
sg10
(lp955
sg12
(lp956
(S'TVariable'
p957
S'variable1'
p958
g958
S'the first attribute used for classification'
p959
I01
I0
I00
Ntp960
a(S'TVariable'
p961
S'variable2'
p962
g962
S'the second attribute used for classification'
p963
I01
I0
I00
Ntp964
a(S'TVariable'
p965
S'variable3'
p966
g966
S'the third attribute used for classification'
p967
I01
I0
I00
Ntp968
a(S'int'
p969
S'noOfValues1'
p970
S'no_of_values1'
p971
S'number of values of the first attribute'
p972
I01
I0
I01
Ntp973
a(S'int'
p974
S'noOfValues2'
p975
S'no_of_values2'
p976
S'number of values of the second attribute'
p977
I01
I0
I01
Ntp978
a(S'int'
p979
S'noOfValues3'
p980
S'no_of_values3'
p981
S'number of values of the third attribute'
p982
I01
I0
I01
Ntp983
a(S'TEFMDataDescription'
p984
S'dataDescription'
p985
S'data_description'
p986
S'data description'
p987
I0
I0
I00
Ntp988
ag85
ag89
ag94
ag99
asg29
(dp989
sbsS'TImputerConstructor_maximal'
p990
(i__main__
ClassDefinition
p991
(dp992
g4
I1
sg5
I01
sg6
g990
sg7
S'TImputerConstructor'
p993
sg9
I00
sg10
(lp994
sg12
(lp995
g165
asg29
(dp996
sbsS'TRuleBeamRefiner'
p997
(i__main__
ClassDefinition
p998
(dp999
g4
I1
sg5
I01
sg6
g997
sg7
S'TOrange'
p1000
sg9
I01
sg10
(lp1001
sg12
(lp1002
sg29
(dp1003
sbsS'TSubsetsGenerator_iterator'
p1004
(i__main__
ClassDefinition
p1005
(dp1006
g4
I1
sg5
I01
sg6
g1004
sg7
S'TOrange'
p1007
sg9
I01
sg10
(lp1008
sg12
(lp1009
g511
asg29
(dp1010
sbsS'TEquiDistDiscretizer'
p1011
(i__main__
ClassDefinition
p1012
(dp1013
g4
I1
sg5
I01
sg6
g1011
sg7
S'TDiscretizer'
p1014
sg9
I00
sg10
(lp1015
sg12
(lp1016
(S'int'
p1017
S'numberOfIntervals'
p1018
(g1018
S'n'
p1019
tp1020
S' number of intervals'
p1021
I0
I0
I01
Ntp1022
a(S'float'
p1023
S'firstCut'
p1024
S'first_cut'
p1025
S'the first cut-off point'
p1026
I0
I0
I01
Ntp1027
a(S'float'
p1028
S'step'
p1029
g1029
S'step (width of interval)'
p1030
I0
I0
I01
Ntp1031
ag825
asg29
(dp1032
sbsS'TValueFilter_string'
p1033
(i__main__
ClassDefinition
p1034
(dp1035
g4
I1
sg5
I01
sg6
g1033
sg7
S'TValueFilter'
p1036
sg9
I00
sg10
(lp1037
sg12
(lp1038
(S'string'
p1039
S'min'
p1040
(g1040
S'ref'
p1041
tp1042
S' reference value (lower bound for interval operators)'
p1043
I0
I0
I01
Ntp1044
a(S'string'
p1045
S'max'
p1046
g1046
S'upper bound for interval operators'
p1047
I0
I0
I01
Ntp1048
a(S'int'
p1049
S'oper'
p1050
g1050
S' operator'
p1051
I0
I0
I01
S'ValueFilter_Operator'
p1052
tp1053
a(S'bool'
p1054
S'caseSensitive'
p1055
S'case_sensitive'
p1056
S'if true (default), the operator is case sensitive'
p1057
I0
I0
I01
Ntp1058
a(S'int'
p1059
S'position'
p1060
g1060
S"attribute's position in domain"
p1061
I0
I0
I01
Ntp1062
a(S'int'
p1063
S'acceptSpecial'
p1064
S'accept_special'
p1065
S'tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)'
p1066
I0
I0
I01
Ntp1067
asg29
(dp1068
sbsS'TFindNearest_BruteForce'
p1069
(i__main__
ClassDefinition
p1070
(dp1071
g4
I1
sg5
I01
sg6
g1069
sg7
S'TFindNearest'
p1072
sg9
I00
sg10
(lp1073
sg12
(lp1074
(S'TExamplesDistance'
p1075
S'distance'
p1076
g1076
S'metrics'
p1077
I0
I0
I00
Ntp1078
a(S'TExampleGenerator'
p1079
S'examples'
p1080
g1080
S'a list of stored examples'
p1081
I0
I0
I00
Ntp1082
a(S'int'
p1083
S'weightID'
p1084
S'weight_ID'
p1085
S'weight to use when counting examples'
p1086
I0
I0
I01
Ntp1087
a(S'int'
p1088
S'distanceID'
p1089
S'distance_ID'
p1090
S'id of meta attribute where the distance should be stored (0 = no storing)'
p1091
I0
I0
I01
Ntp1092
a(S'bool'
p1093
S'includeSame'
p1094
S'include_same'
p1095
S'tells whether to include examples that are same as the reference example'
p1096
I0
I0
I01
Ntp1097
asg29
(dp1098
sbsS'TRuleBeamInitializer'
p1099
(i__main__
ClassDefinition
p1100
(dp1101
g4
I1
sg5
I01
sg6
g1099
sg7
S'TOrange'
p1102
sg9
I01
sg10
(lp1103
sg12
(lp1104
sg29
(dp1105
sbsS'TMeasureAttribute_relevance'
p1106
(i__main__
ClassDefinition
p1107
(dp1108
g4
I1
sg5
I01
sg6
g1106
sg7
S'TMeasureAttributeFromProbabilities'
p1109
sg9
I00
sg10
(lp1110
sg12
(lp1111
g911
ag916
ag922
ag927
ag932
ag937
ag942
asg29
(dp1112
sbsS'TFilter_hasSpecial'
p1113
(i__main__
ClassDefinition
p1114
(dp1115
g4
I1
sg5
I01
sg6
g1113
sg7
S'TFilter'
p1116
sg9
I00
sg10
(lp1117
sg12
(lp1118
g696
ag700
asg29
(dp1119
sbsS'TDiscDistribution'
p1120
(i__main__
ClassDefinition
p1121
(dp1122
g4
I1
sg5
I01
sg6
g1120
sg7
S'TDistribution'
p1123
sg9
I00
sg10
(lp1124
sg12
(lp1125
(S'TFloatList'
p1126
S'variances'
p1127
g1127
S'variances'
p1128
I0
I0
I00
Ntp1129
a(S'TVariable'
p1130
S'variable'
p1131
g1131
S'attribute descriptor (optional)'
p1132
I0
I0
I00
Ntp1133
a(S'float'
p1134
S'unknowns'
p1135
g1135
S'number of unknown values'
p1136
I0
I0
I01
Ntp1137
a(S'float'
p1138
S'abs'
p1139
g1139
S'sum of frequencies (not including unknown values!)'
p1140
I0
I0
I01
Ntp1141
a(S'float'
p1142
S'cases'
p1143
g1143
S"number of cases; as abs, but doesn't change at *= and normalize()"
p1144
I0
I0
I01
Ntp1145
a(S'bool'
p1146
S'normalized'
p1147
g1147
S'distribution is normalized'
p1148
I0
I0
I01
Ntp1149
a(S'bool'
p1150
S'supportsDiscrete'
p1151
S'supports_discrete'
p1152
S'distribution supports discrete interface'
p1153
I01
I0
I01
Ntp1154
a(S'bool'
p1155
S'supportsContinuous'
p1156
S'supports_continuous'
p1157
S'distribution supports continuous interface'
p1158
I01
I0
I01
Ntp1159
a(S'TRandomGenerator'
p1160
S'randomGenerator'
p1161
S'random_generator'
p1162
S'random generator; initialized when needed, if not given earlier'
p1163
I0
I0
I00
Ntp1164
asg29
(dp1165
sbsS'TBayesLearner'
p1166
(i__main__
ClassDefinition
p1167
(dp1168
g4
I1
sg5
I01
sg6
g1166
sg7
S'TLearner'
p1169
sg9
I00
sg10
(lp1170
sg12
(lp1171
(S'TProbabilityEstimatorConstructor'
p1172
S'estimatorConstructor'
p1173
S'estimator_constructor'
p1174
S'constructs a probability estimator for P(C)'
p1175
I0
I0
I00
Ntp1176
a(S'TConditionalProbabilityEstimatorConstructor'
p1177
S'conditionalEstimatorConstructor'
p1178
S'conditional_estimator_constructor'
p1179
S'constructs a probability estimator for P(C|A) '
p1180
I0
I0
I00
Ntp1181
a(S'TConditionalProbabilityEstimatorConstructor'
p1182
S'conditionalEstimatorConstructorContinuous'
p1183
S'conditional_estimator_constructor_continuous'
p1184
S'constructs a probability estimator for P(C|A) for continuous attributes'
p1185
I0
I0
I00
Ntp1186
a(S'bool'
p1187
S'normalizePredictions'
p1188
S'normalize_predictions'
p1189
S'instructs learner to construct a classifier that normalizes probabilities'
p1190
I0
I0
I01
Ntp1191
a(S'bool'
p1192
S'adjustThreshold'
p1193
S'adjust_threshold'
p1194
S'adjust probability thresholds (for binary classes only)'
p1195
I0
I0
I01
Ntp1196
ag110
asg29
(dp1197
sbsS'TIMByRelief'
p1198
(i__main__
ClassDefinition
p1199
(dp1200
g4
I1
sg5
I01
sg6
g1198
sg7
S'TIMConstructor'
p1201
sg9
I00
sg10
(lp1202
sg12
(lp1203
(S'TExamplesDistance_Relief'
p1204
S'distance'
p1205
g1205
S'distance measure'
p1206
I0
I0
I00
Ntp1207
a(S'float'
p1208
S'k'
p1209
g1209
S'number of neighbours'
p1210
I0
I0
I01
Ntp1211
a(S'float'
p1212
S'm'
p1213
g1213
S'number of reference examples'
p1214
I0
I0
I01
Ntp1215
a(S'float'
p1216
S'kFromColumns'
p1217
S'k_from_columns'
p1218
S'if positive, number of neighbours is #columns*kFromColumns'
p1219
I0
I0
I01
Ntp1220
a(S'bool'
p1221
S'ignoreSameExample'
p1222
S'ignore_same_example'
p1223
S'does not put reference example into M'
p1224
I0
I0
I01
Ntp1225
a(S'bool'
p1226
S'convertToBinary'
p1227
S'convert_to_binary'
p1228
S'convert to binary class (hit-miss)'
p1229
I0
I0
I01
Ntp1230
a(S'bool'
p1231
S'correctClassFirst'
p1232
S'correct_class_first'
p1233
S'puts the correct class proportion to the first place'
p1234
I0
I0
I01
Ntp1235
a(S'bool'
p1236
S'allExamples'
p1237
S'all_examples'
p1238
S'uses all examples for reference examples'
p1239
I0
I0
I01
Ntp1240
a(S'bool'
p1241
S'allSameNeighbours'
p1242
S'all_same_neighbours'
p1243
S'uses all the examples same to the reference as neighbours'
p1244
I0
I0
I01
Ntp1245
a(S'bool'
p1246
S'recordRowExamples'
p1247
S'record_row_examples'
p1248
S'enables creation of rowExample list'
p1249
I0
I0
I01
Ntp1250
asg29
(dp1251
sbsNNsS'TConditionalProbabilityEstimator'
p1252
(i__main__
ClassDefinition
p1253
(dp1254
g4
I1
sg5
I01
sg6
g1252
sg7
S'TOrange'
p1255
sg9
I01
sg10
(lp1256
sg12
(lp1257
g126
ag131
asg29
(dp1258
sbsS'TColumnAssessor_Laplace'
p1259
(i__main__
ClassDefinition
p1260
(dp1261
g4
I1
sg5
I01
sg6
g1259
sg7
S'TColumnAssessor'
p1262
sg9
I00
sg10
(lp1263
sg12
(lp1264
sg29
(dp1265
sbsS'TPreprocessor_addGaussianNoise'
p1266
(i__main__
ClassDefinition
p1267
(dp1268
g4
I1
sg5
I01
sg6
g1266
sg7
S'TPreprocessor'
p1269
sg9
I00
sg10
(lp1270
sg12
(lp1271
(S'TVariableFloatMap'
p1272
S'deviations'
p1273
g1273
S'deviations individual attribute values'
p1274
I0
I0
I00
Ntp1275
a(S'float'
p1276
S'defaultDeviation'
p1277
S'default_deviation'
p1278
S'default deviation'
p1279
I0
I0
I01
Ntp1280
a(S'TRandomGenerator'
p1281
S'randomGenerator'
p1282
S'random_generator'
p1283
S'random number generator'
p1284
I0
I0
I00
Ntp1285
asg29
(dp1286
sbsS'TRuleStoppingCriteria_NegativeDistribution'
p1287
(i__main__
ClassDefinition
p1288
(dp1289
g4
I1
sg5
I01
sg6
g1287
sg7
S'TRuleStoppingCriteria'
p1290
sg9
I00
sg10
(lp1291
sg12
(lp1292
sg29
(dp1293
sbsS'TTreeSplitConstructor_ExhaustiveBinary'
p1294
(i__main__
ClassDefinition
p1295
(dp1296
g4
I1
sg5
I01
sg6
g1294
sg7
S'TTreeSplitConstructor_Measure'
p1297
sg9
I00
sg10
(lp1298
sg12
(lp1299
(S'TMeasureAttribute'
p1300
S'measure'
p1301
g1301
S'attribute quality measure'
p1302
I0
I0
I00
Ntp1303
a(S'float'
p1304
S'worstAcceptable'
p1305
S'worst_acceptable'
p1306
S'the worst acceptable quality of the attribute'
p1307
I0
I0
I01
Ntp1308
ag788
asg29
(dp1309
sbsS'TTreeClassifier'
p1310
(i__main__
ClassDefinition
p1311
(dp1312
g4
I1
sg5
I01
sg6
g1310
sg7
S'TClassifierFD'
p1313
sg9
I00
sg10
(lp1314
sg12
(lp1315
(S'TTreeNode'
p1316
S'tree'
p1317
g1317
S'decision tree'
p1318
I0
I0
I00
Ntp1319
a(S'TTreeDescender'
p1320
S'descender'
p1321
g1321
S'object that descends down the tree'
p1322
I0
I0
I00
Ntp1323
ag292
ag94
ag99
asg29
(dp1324
sbsS'TFilter_compatibleExample'
p1325
(i__main__
ClassDefinition
p1326
(dp1327
g4
I1
sg5
I01
sg6
g1325
sg7
S'TFilter'
p1328
sg9
I00
sg10
(lp1329
sg12
(lp1330
(S'TExample'
p1331
S'example'
p1332
g1332
S'example with which examples are compared'
p1333
I0
I0
I00
Ntp1334
ag696
ag700
asg29
(dp1335
sbsS'TRemoveRedundant'
p1336
(i__main__
ClassDefinition
p1337
(dp1338
g4
I1
sg5
I01
sg6
g1336
sg7
S'TOrange'
p1339
sg9
I01
sg10
(lp1340
sg12
(lp1341
(S'bool'
p1342
S'keepValues'
p1343
S'keep_values'
p1344
S'keep an attribute if number values is only smaller, not one'
p1345
I0
I0
I01
Ntp1346
asg29
(dp1347
sbsS'TExamplesDistanceConstructor_Hamming'
p1348
(i__main__
ClassDefinition
p1349
(dp1350
g4
I1
sg5
I01
sg6
g1348
sg7
S'TExamplesDistanceConstructor'
p1351
sg9
I00
sg10
(lp1352
sg12
(lp1353
(S'bool'
p1354
S'ignoreClass'
p1355
S'ignore_class'
p1356
S'if true (default), class value is ignored when computing distances'
p1357
I0
I0
I01
Ntp1358
a(S'bool'
p1359
S'ignoreUnknowns'
p1360
S'ignore_unknowns'
p1361
S'if true (default: false) unknown values are ignored in computation'
p1362
I0
I0
I01
Ntp1363
a(S'bool'
p1364
S'ignoreClass'
p1365
S'ignore_class'
p1366
S'if true (default), class value is ignored when computing distances'
p1367
I0
I0
I01
Ntp1368
asg29
(dp1369
sbsS'TSomeValue'
p1370
(i__main__
ClassDefinition
p1371
(dp1372
g4
I1
sg5
I01
sg6
g1370
sg7
S'TOrange'
p1373
sg9
I01
sg10
(lp1374
sg12
(lp1375
sg29
(dp1376
sbsS'TRuleClassifierConstructor_firstRule'
p1377
(i__main__
ClassDefinition
p1378
(dp1379
g4
I1
sg5
I01
sg6
g1377
sg7
S'TRuleClassifierConstructor'
p1380
sg9
I00
sg10
(lp1381
sg12
(lp1382
sg29
(dp1383
sbsS'TStopDistributionClustering_noProfit'
p1384
(i__main__
ClassDefinition
p1385
(dp1386
g4
I1
sg5
I01
sg6
g1384
sg7
S'TStopDistributionClustering'
p1387
sg9
I00
sg10
(lp1388
sg12
(lp1389
(S'float'
p1390
S'minProfitProportion'
p1391
S'min_profit_proportion'
p1392
S'minimal allowable profit proportion'
p1393
I0
I0
I01
Ntp1394
asg29
(dp1395
sbsS'TBiModalDiscretization'
p1396
(i__main__
ClassDefinition
p1397
(dp1398
g4
I1
sg5
I01
sg6
g1396
sg7
S'TDiscretization'
p1399
sg9
I00
sg10
(lp1400
sg12
(lp1401
(S'bool'
p1402
S'splitInTwo'
p1403
S'split_in_two'
p1404
S'if true (default), flanks are merged into a single interval'
p1405
I0
I0
I01
Ntp1406
asg29
(dp1407
sbsS'TColoredIG'
p1408
(i__main__
ClassDefinition
p1409
(dp1410
g4
I1
sg5
I01
sg6
g1408
sg7
S'TGeneralExampleClustering'
p1411
sg9
I00
sg10
(lp1412
sg12
(lp1413
(S'TIG'
p1414
S'ig'
p1415
g1415
S'incompatibility graph'
p1416
I0
I0
I00
Ntp1417
a(S'TIntList'
p1418
S'colors'
p1419
g1419
S'colors (one element corresponding to each ig node)'
p1420
I0
I0
I00
Ntp1421
asg29
(dp1422
sbsS'TMeasureAttribute'
p1423
(i__main__
ClassDefinition
p1424
(dp1425
g4
I1
sg5
I01
sg6
g1423
sg7
S'TOrange'
p1426
sg9
I00
sg10
(lp1427
sg12
(lp1428
g927
ag932
ag937
ag942
asg29
(dp1429
S'Needs'
p1430
(lp1431
(S'Contingency_Class'
p1432
I0
tp1433
a(S'DomainContingency'
p1434
I1
tp1435
a(S'Generator'
p1436
I2
tp1437
asS'UnknownsTreatment'
p1438
(lp1439
(S'IgnoreUnknowns'
p1440
I0
tp1441
a(S'ReduceByUnknowns'
p1442
I1
tp1443
a(S'UnknownsToCommon'
p1444
I2
tp1445
a(S'UnknownsAsValue'
p1446
I3
tp1447
assbsS'TRuleEvaluator'
p1448
(i__main__
ClassDefinition
p1449
(dp1450
g4
I1
sg5
I01
sg6
g1448
sg7
S'TOrange'
p1451
sg9
I01
sg10
(lp1452
sg12
(lp1453
sg29
(dp1454
sbsS'TStringVariable'
p1455
(i__main__
ClassDefinition
p1456
(dp1457
g4
I1
sg5
I01
sg6
g1455
sg7
S'TVariable'
p1458
sg9
I00
sg10
(lp1459
sg12
(lp1460
g334
ag338
ag342
ag347
ag352
ag357
ag362
asg29
(dp1461
sbsS'TAssessIMQuality'
p1462
(i__main__
ClassDefinition
p1463
(dp1464
g4
I1
sg5
I01
sg6
g1462
sg7
S'TOrange'
p1465
sg9
I00
sg10
(lp1466
sg12
(lp1467
(S'TColumnAssessor'
p1468
S'columnAssessor'
p1469
S'column_assessor'
p1470
S'column quality assessor'
p1471
I0
I0
I00
Ntp1472
asg29
(dp1473
sbsS'TGraphAsTree'
p1474
(i__main__
ClassDefinition
p1475
(dp1476
g4
I1
sg5
I01
sg6
g1474
sg7
S'TGraph'
p1477
sg9
I00
sg10
(lp1478
sg12
(lp1479
(S'int'
p1480
S'nVertices'
p1481
S'n_vertices'
p1482
S'the number of vertices'
p1483
I01
I0
I01
Ntp1484
a(S'int'
p1485
S'nEdgeTypes'
p1486
S'n_edge_types'
p1487
S'the number of edge types'
p1488
I01
I0
I01
Ntp1489
a(S'bool'
p1490
S'directed'
p1491
g1491
S'directed'
p1492
I01
I0
I01
Ntp1493
asg29
(dp1494
sbsS'TTreeExampleSplitter_IgnoreUnknowns'
p1495
(i__main__
ClassDefinition
p1496
(dp1497
g4
I1
sg5
I01
sg6
g1495
sg7
S'TTreeExampleSplitter'
p1498
sg9
I00
sg10
(lp1499
sg12
(lp1500
sg29
(dp1501
sbsS'TProbabilityEstimator_FromDistribution'
p1502
(i__main__
ClassDefinition
p1503
(dp1504
g4
I1
sg5
I01
sg6
g1502
sg7
S'TProbabilityEstimator'
p1505
sg9
I00
sg10
(lp1506
sg12
(lp1507
(S'TDistribution'
p1508
S'probabilities'
p1509
g1509
S'probabilities'
p1510
I0
I0
I00
Ntp1511
a(S'bool'
p1512
S'supportsDiscrete'
p1513
S'supports_discrete'
p1514
S'can estimate probabilities of discrete attributes'
p1515
I01
I0
I01
Ntp1516
a(S'bool'
p1517
S'supportsContinuous'
p1518
S'supports_continuous'
p1519
S'can estimate probabilities of continuous attributes'
p1520
I01
I0
I01
Ntp1521
asg29
(dp1522
sbsS'TC45TreeNode'
p1523
(i__main__
ClassDefinition
p1524
(dp1525
g4
I1
sg5
I01
sg6
g1523
sg7
S'TOrange'
p1526
sg9
I00
sg10
(lp1527
sg12
(lp1528
(S'int'
p1529
S'nodeType'
p1530
S'node_type'
p1531
S' 0 = leaf,  1 = branch,  2 = cut,  3 = subset'
p1532
I0
I0
I01
S'C45TreeNode_NodeType'
p1533
tp1534
a(S'TValue'
p1535
S'leaf'
p1536
g1536
S'most frequent class at this node'
p1537
I0
I0
I01
Ntp1538
a(S'float'
p1539
S'items'
p1540
g1540
S'no of items at this node'
p1541
I0
I0
I01
Ntp1542
a(S'TDiscDistribution'
p1543
S'classDist'
p1544
S'class_dist'
p1545
S'class distribution of items'
p1546
I0
I0
I00
Ntp1547
a(S'TVariable'
p1548
S'tested'
p1549
g1549
S'attribute referenced in test'
p1550
I0
I0
I00
Ntp1551
a(S'float'
p1552
S'cut'
p1553
g1553
S'threshold for continuous attribute'
p1554
I0
I0
I01
Ntp1555
a(S'float'
p1556
S'lower'
p1557
g1557
S'lower limit of soft threshold'
p1558
I0
I0
I01
Ntp1559
a(S'float'
p1560
S'upper'
p1561
g1561
S'upper limit of soft threshold'
p1562
I0
I0
I01
Ntp1563
a(S'TIntList'
p1564
S'mapping'
p1565
g1565
S'mapping for discrete value'
p1566
I0
I0
I00
Ntp1567
a(S'TC45TreeNodeList'
p1568
S'branch'
p1569
g1569
S'branch[x] = (sub)tree for outcome x */'
p1570
I0
I0
I00
Ntp1571
asg29
(dp1572
S'NodeType'
p1573
(lp1574
(S'Leaf'
p1575
S'0'
p1576
tp1577
a(S'Branch'
p1578
I1
tp1579
a(S'Cut'
p1580
I2
tp1581
a(S'Subset'
p1582
I3
tp1583
assbsS'TDistributionList'
p1584
(ipyprops
ClassDefinition
p1585
(dp1586
g136
I0
sg137
I01
sg138
g1584
sg139
g140
sg141
I0
sg142
(lp1587
sg144
(lp1588
sg146
(dp1589
sbsS'TTreeDescender_UnknownMergeAsBranchSizes'
p1590
(i__main__
ClassDefinition
p1591
(dp1592
g4
I1
sg5
I01
sg6
g1590
sg7
S'TTreeDescender'
p1593
sg9
I0
sg10
(lp1594
sg12
(lp1595
sg29
(dp1596
sbsS'THierarchicalClusterOrdering'
p1597
(i__main__
ClassDefinition
p1598
(dp1599
g4
I1
sg5
I01
sg6
g1597
sg7
S'TOrange'
p1600
sg9
I00
sg10
(lp1601
sg12
(lp1602
(S'TProgressCallback'
p1603
S'progress_callback'
p1604
g1604
S'progress callback function'
p1605
I0
I0
I00
Ntp1606
asg29
(dp1607
sbsS'TLogitClassifierState'
p1608
(i__main__
ClassDefinition
p1609
(dp1610
g4
I1
sg5
I01
sg6
g1608
sg7
S'TOrange'
p1611
sg9
I00
sg10
(lp1612
sg12
(lp1613
(S'TRuleList'
p1614
S'rules'
p1615
g1615
g574
I0
I0
I00
Ntp1616
a(S'TExampleTable'
p1617
S'examples'
p1618
g1618
g574
I0
I0
I00
Ntp1619
a(S'TFloatList'
p1620
S'avgProb'
p1621
S'avg_prob'
p1622
g574
I0
I0
I00
Ntp1623
a(S'TFloatList'
p1624
S'avgPriorProb'
p1625
S'avg_prior_prob'
p1626
g574
I0
I0
I00
Ntp1627
a(S'TIntList'
p1628
S'prefixRules'
p1629
S'prefix_rules'
p1630
g574
I0
I0
I00
Ntp1631
asg29
(dp1632
sbsS'TExamplesDistance'
p1633
(i__main__
ClassDefinition
p1634
(dp1635
g4
I1
sg5
I01
sg6
g1633
sg7
S'TOrange'
p1636
sg9
I01
sg10
(lp1637
sg12
(lp1638
sg29
(dp1639
sbsS'TFileExampleGenerator'
p1640
(i__main__
ClassDefinition
p1641
(dp1642
g4
I1
sg5
I01
sg6
g1640
sg7
S'TExampleGenerator'
p1643
sg9
I01
sg10
(lp1644
sg12
(lp1645
(S'string'
p1646
S'filename'
p1647
g1647
S'filename'
p1648
I0
I0
I01
Ntp1649
a(S'int'
p1650
S'startDataPos'
p1651
S'start_data_pos'
p1652
S'starting position of the data in file'
p1653
I0
I0
I01
Ntp1654
a(S'int'
p1655
S'startDataLine'
p1656
S'start_data_line'
p1657
S'line in the file where the data starts'
p1658
I0
I0
I01
Ntp1659
ag307
ag311
asg29
(dp1660
sbsS'TMeasureAttribute_gainRatio'
p1661
(i__main__
ClassDefinition
p1662
(dp1663
g4
I1
sg5
I01
sg6
g1661
sg7
S'TMeasureAttributeFromProbabilities'
p1664
sg9
I00
sg10
(lp1665
sg12
(lp1666
g911
ag916
ag922
ag927
ag932
ag937
ag942
asg29
(dp1667
sbsS'TContingencyClassAttr'
p1668
(i__main__
ClassDefinition
p1669
(dp1670
g4
I1
sg5
I01
sg6
g1668
sg7
S'TContingencyClass'
p1671
sg9
I00
sg10
(lp1672
sg12
(lp1673
(S'TVariable'
p1674
S'outerVariable'
p1675
S'outer_variable'
p1676
S'outer attribute'
p1677
I0
I0
I00
Ntp1678
a(S'TVariable'
p1679
S'innerVariable'
p1680
S'inner_variable'
p1681
S'inner attribute'
p1682
I0
I0
I00
Ntp1683
a(S'int'
p1684
S'varType'
p1685
S'var_type'
p1686
S' outer attribute type'
p1687
I0
I0
I01
S'Variable_Type'
p1688
tp1689
a(S'TDistribution'
p1690
S'outerDistribution'
p1691
S'outer_distribution'
p1692
S'distribution of values of outer attributes'
p1693
I0
I0
I00
Ntp1694
a(S'TDistribution'
p1695
S'innerDistribution'
p1696
S'inner_distribution'
p1697
S'distribution of values of inner attributes'
p1698
I0
I0
I00
Ntp1699
a(S'TDistribution'
p1700
S'innerDistributionUnknown'
p1701
S'inner_distribution_unknown'
p1702
S'distribution of inner variable for examples where the outer value was unknown'
p1703
I0
I0
I00
Ntp1704
asg29
(dp1705
sbsS'TMissValuesGenerator'
p1706
(i__main__
ClassDefinition
p1707
(dp1708
g4
I1
sg5
I01
sg6
g1706
sg7
S'TChangeExampleGenerator'
p1709
sg9
I00
sg10
(lp1710
sg12
(lp1711
(S'TIntFloatList'
p1712
S'replaceProbabilities'
p1713
S'replace_probabilities'
p1714
S"probabilities for replacing attributes' values"
p1715
I0
I0
I00
Ntp1716
a(S'TRandomGenerator'
p1717
S'randomGenerator'
p1718
S'random_generator'
p1719
S'random generator'
p1720
I0
I0
I00
Ntp1721
ag307
ag311
asg29
(dp1722
sbsS'TLogRegClassifier'
p1723
(i__main__
ClassDefinition
p1724
(dp1725
g4
I1
sg5
I01
sg6
g1723
sg7
S'TClassifierFD'
p1726
sg9
I00
sg10
(lp1727
sg12
(lp1728
(S'TDomain'
p1729
S'continuizedDomain'
p1730
S'continuized_domain'
p1731
S'if absent, there is no continuous attributes in original domain'
p1732
I0
I0
I00
Ntp1733
a(S'TEFMDataDescription'
p1734
S'dataDescription'
p1735
S'data_description'
p1736
S'Data needed for classification in presence of undefined values'
p1737
I0
I0
I00
Ntp1738
a(S'TAttributedFloatList'
p1739
S'beta'
p1740
g1740
S'estimated beta coefficients for logistic regression'
p1741
I0
I0
I00
Ntp1742
a(S'TAttributedFloatList'
p1743
S'beta_se'
p1744
g1744
S'estimated standard errors for beta coefficients'
p1745
I0
I0
I00
Ntp1746
a(S'TAttributedFloatList'
p1747
S'wald_Z'
p1748
g1748
S'Wald Z statstic for beta coefficients'
p1749
I0
I0
I00
Ntp1750
a(S'TAttributedFloatList'
p1751
S'P'
p1752
g1752
S'estimated significances for beta coefficients'
p1753
I0
I0
I00
Ntp1754
a(S'float'
p1755
S'likelihood'
p1756
g1756
S"Likelihood: The likelihood function is the function which specifies the probability of the sample observed on the basis of a known model, as a function of the model's parameters. "
p1757
I0
I0
I01
Ntp1758
a(S'int'
p1759
S'fit_status'
p1760
g1760
S"Tells how the model fitting ended - either regularly (LogRegFitter.OK), or it was interrupted due to one of beta coefficients escaping towards infinity (LogRegFitter.Infinity) or since the values didn't converge (LogRegFitter.Divergence)."
p1761
I0
I0
I01
Ntp1762
a(S'TImputer'
p1763
S'imputer'
p1764
g1764
S'if present, it imputes unknown values'
p1765
I0
I0
I00
Ntp1766
ag292
ag94
ag99
asg29
(dp1767
sbsS'TEquiDistDiscretization'
p1768
(i__main__
ClassDefinition
p1769
(dp1770
g4
I1
sg5
I01
sg6
g1768
sg7
S'TDiscretization'
p1771
sg9
I00
sg10
(lp1772
sg12
(lp1773
(S'int'
p1774
S'numberOfIntervals'
p1775
(g1775
g1019
tp1776
S' number of intervals'
p1777
I0
I0
I01
Ntp1778
asg29
(dp1779
sbsS'TPreprocessor_select'
p1780
(i__main__
ClassDefinition
p1781
(dp1782
g4
I1
sg5
I01
sg6
g1780
sg7
S'TPreprocessor'
p1783
sg9
I00
sg10
(lp1784
sg12
(lp1785
(S'TVarList'
p1786
S'attributes'
p1787
g1787
S'tells which attributes to select'
p1788
I0
I0
I00
Ntp1789
asg29
(dp1790
sbsS'TSVMClassifierSparse'
p1791
(i__main__
ClassDefinition
p1792
(dp1793
g4
I1
sg5
I01
sg6
g1791
sg7
S'TSVMClassifier'
p1794
sg9
I00
sg10
(lp1795
sg12
(lp1796
(S'bool'
p1797
S'useNonMeta'
p1798
S'use_non_meta'
p1799
S'include non meta attributes'
p1800
I0
I0
I01
Ntp1801
ag246
ag250
ag254
ag259
ag264
ag269
ag273
ag278
ag283
ag288
ag292
ag94
ag99
asg29
(dp1802
sbsS'TFilter_disjunction'
p1803
(i__main__
ClassDefinition
p1804
(dp1805
g4
I1
sg5
I01
sg6
g1803
sg7
S'TFilter'
p1806
sg9
I00
sg10
(lp1807
sg12
(lp1808
(S'TFilterList'
p1809
S'filters'
p1810
g1810
S'a list of filters;'
p1811
I0
I0
I00
Ntp1812
ag696
ag700
asg29
(dp1813
sbsS'TMeasureAttribute_gini'
p1814
(i__main__
ClassDefinition
p1815
(dp1816
g4
I1
sg5
I01
sg6
g1814
sg7
S'TMeasureAttributeFromProbabilities'
p1817
sg9
I00
sg10
(lp1818
sg12
(lp1819
g911
ag916
ag922
ag927
ag932
ag937
ag942
asg29
(dp1820
sbsS'TAttributedFloatList'
p1821
(ipyprops
ClassDefinition
p1822
(dp1823
g136
I0
sg137
I01
sg138
g1821
sg139
S'TFloatList'
p1824
sg141
I0
sg142
(lp1825
sg144
(lp1826
sg146
(dp1827
sbsS'TIMByRowsByRelief'
p1828
(i__main__
ClassDefinition
p1829
(dp1830
g4
I1
sg5
I01
sg6
g1828
sg7
S'TIMByRowsConstructor'
p1831
sg9
I00
sg10
(lp1832
sg12
(lp1833
(S'float'
p1834
g1209
g1209
S'number of neighbours'
p1835
I0
I0
I01
Ntp1836
a(S'float'
p1837
g1213
g1213
S'number of reference examples'
p1838
I0
I0
I01
Ntp1839
a(S'float'
p1840
S'kFromColumns'
p1841
S'k_from_columns'
p1842
S'if positive, number of neighbours is #columns*kFromColumns'
p1843
I0
I0
I01
Ntp1844
a(S'bool'
p1845
S'ignoreSameExample'
p1846
S'ignore_same_example'
p1847
S'does not put reference example into M'
p1848
I0
I0
I01
Ntp1849
a(S'bool'
p1850
S'convertToBinary'
p1851
S'convert_to_binary'
p1852
S'convert to binary class (hit-miss)'
p1853
I0
I0
I01
Ntp1854
a(S'bool'
p1855
S'correctClassFirst'
p1856
S'correct_class_first'
p1857
S'puts the correct class proportion to the first place'
p1858
I0
I0
I01
Ntp1859
a(S'bool'
p1860
S'allExamples'
p1861
S'all_examples'
p1862
S'uses all examples for reference examples'
p1863
I0
I0
I01
Ntp1864
a(S'bool'
p1865
S'allSameNeighbours'
p1866
S'all_same_neighbours'
p1867
S'uses all the examples same to the reference as neighbours'
p1868
I0
I0
I01
Ntp1869
asg29
(dp1870
sbsS'TFindNearestConstructor'
p1871
(i__main__
ClassDefinition
p1872
(dp1873
g4
I1
sg5
I01
sg6
g1871
sg7
S'TOrange'
p1874
sg9
I01
sg10
(lp1875
sg12
(lp1876
(S'TExamplesDistanceConstructor'
p1877
S'distanceConstructor'
p1878
S'distance_constructor'
p1879
S'metrics'
p1880
I0
I0
I00
Ntp1881
a(S'bool'
p1882
S'includeSame'
p1883
S'include_same'
p1884
S'tells whether to include examples that are same as the reference example'
p1885
I0
I0
I01
Ntp1886
asg29
(dp1887
sbsS'TRuleClassifier_firstRule'
p1888
(i__main__
ClassDefinition
p1889
(dp1890
g4
I1
sg5
I01
sg6
g1888
sg7
S'TRuleClassifier'
p1891
sg9
I00
sg10
(lp1892
sg12
(lp1893
(S'TDistribution'
p1894
S'prior'
p1895
g1895
S'prior distribution'
p1896
I0
I0
I00
Ntp1897
ag606
ag609
ag613
ag94
ag99
asg29
(dp1898
sbsS'TColumnAssessor'
p1899
(i__main__
ClassDefinition
p1900
(dp1901
g4
I1
sg5
I01
sg6
g1899
sg7
S'TOrange'
p1902
sg9
I01
sg10
(lp1903
sg12
(lp1904
sg29
(dp1905
sbsS'TTableAverager'
p1906
(i__main__
ClassDefinition
p1907
(dp1908
g4
I1
sg5
I01
sg6
g1906
sg7
S'TOrange'
p1909
sg9
I00
sg10
(lp1910
sg12
(lp1911
sg29
(dp1912
sbsS'TComputeDomainContingency_Preprocessor'
p1913
(i__main__
ClassDefinition
p1914
(dp1915
g4
I1
sg5
I01
sg6
g1913
sg7
S'TComputeDomainContingency'
p1916
sg9
I00
sg10
(lp1917
sg12
(lp1918
(S'TPreprocessor'
p1919
S'preprocessor'
p1920
g1920
S'preprocesses the exmaples (see the manual for restrictions!)'
p1921
I0
I0
I00
Ntp1922
a(S'bool'
p1923
S'resultInOriginalDomain'
p1924
S'result_in_original_domain'
p1925
S'tells whether the resulting DomainContingency should consist of original attributes'
p1926
I0
I0
I01
Ntp1927
ag28
asg29
(dp1928
sbsS'TFloatFloatList'
p1929
(ipyprops
ClassDefinition
p1930
(dp1931
g136
I0
sg137
I01
sg138
g1929
sg139
g140
sg141
I0
sg142
(lp1932
sg144
(lp1933
sg146
(dp1934
sbsS'TMeasureAttribute_MSE'
p1935
(i__main__
ClassDefinition
p1936
(dp1937
g4
I1
sg5
I01
sg6
g1935
sg7
S'TMeasureAttribute'
p1938
sg9
I00
sg10
(lp1939
sg12
(lp1940
(S'float'
p1941
g1213
g1213
S'm for m-estimate'
p1942
I0
I0
I01
Ntp1943
a(S'int'
p1944
S'unknownsTreatment'
p1945
S'unknowns_treatment'
p1946
S' treatment of unknown values'
p1947
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p1948
tp1949
ag927
ag932
ag937
ag942
asg29
(dp1950
sbsS'TRuleList'
p1951
(ipyprops
ClassDefinition
p1952
(dp1953
g136
I0
sg137
I01
sg138
g1951
sg139
g140
sg141
I0
sg142
(lp1954
sg144
(lp1955
sg146
(dp1956
sbsS'TClusteringTreeClassifier'
p1957
(i__main__
ClassDefinition
p1958
(dp1959
g4
I1
sg5
I01
sg6
g1957
sg7
S'TMultiClassifier'
p1960
sg9
I00
sg10
(lp1961
sg12
(lp1962
g800
ag804
ag809
asg29
(dp1963
sbsS'TStopIMClusteringByAssessor_noBigChange'
p1964
(i__main__
ClassDefinition
p1965
(dp1966
g4
I1
sg5
I01
sg6
g1964
sg7
S'TStopIMClusteringByAssessor'
p1967
sg9
I00
sg10
(lp1968
sg12
(lp1969
sg29
(dp1970
sbsS'TItemsetsSparseInducer'
p1971
(i__main__
ClassDefinition
p1972
(dp1973
g4
I1
sg5
I01
sg6
g1971
sg7
S'TOrange'
p1974
sg9
I00
sg10
(lp1975
sg12
(lp1976
(S'int'
p1977
S'maxItemSets'
p1978
S'max_item_sets'
p1979
S'maximal number of itemsets (increase if you want)'
p1980
I0
I0
I01
Ntp1981
a(S'float'
p1982
S'support'
p1983
g1983
S'required support'
p1984
I0
I0
I01
Ntp1985
a(S'bool'
p1986
S'storeExamples'
p1987
S'store_examples'
p1988
S'stores examples corresponding to itemsets'
p1989
I0
I0
I01
Ntp1990
asg29
(dp1991
sbsS'TPreprocessor_dropMissing'
p1992
(i__main__
ClassDefinition
p1993
(dp1994
g4
I1
sg5
I01
sg6
g1992
sg7
S'TPreprocessor'
p1995
sg9
I00
sg10
(lp1996
sg12
(lp1997
sg29
(dp1998
sbsS'TDomainContinuizer'
p1999
(i__main__
ClassDefinition
p2000
(dp2001
g4
I1
sg5
I01
sg6
g1999
sg7
S'TOrange'
p2002
sg9
I00
sg10
(lp2003
sg12
(lp2004
(S'bool'
p2005
S'zeroBased'
p2006
S'zero_based'
p2007
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p2008
I0
I0
I01
Ntp2009
a(S'int'
p2010
S'continuousTreatment'
p2011
S'continuous_treatment'
p2012
S' 0-leave as they are, 1-divide by span, 1-normalize'
p2013
I0
I0
I01
S'DomainContinuizer_ContinuousTreatment'
p2014
tp2015
a(S'int'
p2016
S'multinomialTreatment'
p2017
S'multinomial_treatment'
p2018
S' 0-lowest value, 1-most frequent (or baseValue), 2-n binary, 3-ignore, 4-ignore all discrete, 5-error, 6-convert as ordinal, 7-ordinal,normalized'
p2019
I0
I0
I01
S'DomainContinuizer_MultinomialTreatment'
p2020
tp2021
a(S'int'
p2022
S'classTreatment'
p2023
S'class_treatment'
p2024
S' 3-leave as is unless target is given, 5-error if not continuous nor binary nor target given, 6-convert as ordinal (unless target given)'
p2025
I0
I0
I01
S'DomainContinuizer_ClassTreatment'
p2026
tp2027
asg29
(dp2028
S'MultinomialTreatment'
p2029
(lp2030
(S'LowestIsBase'
p2031
I0
tp2032
a(S'FrequentIsBase'
p2033
I1
tp2034
a(S'NValues'
p2035
I2
tp2036
a(S'Ignore'
p2037
I3
tp2038
a(S'IgnoreAllDiscrete'
p2039
I4
tp2040
a(S'ReportError'
p2041
I5
tp2042
a(S'AsOrdinal'
p2043
I6
tp2044
a(S'AsNormalizedOrdinal'
p2045
I7
tp2046
asS'ClassTreatment'
p2047
(lp2048
(S'LeaveUnlessTarget'
p2049
S'3'
p2050
tp2051
a(S'ErrorIfCannotHandle'
p2052
S'5'
p2053
tp2054
a(S'AsOrdinal'
p2055
S'6'
p2056
tp2057
asS'ContinuousTreatment'
p2058
(lp2059
(S'Leave'
p2060
I0
tp2061
a(S'NormalizeBySpan'
p2062
I1
tp2063
a(S'NormalizeByVariance'
p2064
I2
tp2065
assbsS'TNormalizeContinuous'
p2066
(i__main__
ClassDefinition
p2067
(dp2068
g4
I1
sg5
I01
sg6
g2066
sg7
S'TTransformValue'
p2069
sg9
I00
sg10
(lp2070
sg12
(lp2071
(S'float'
p2072
S'average'
p2073
g2073
S'the average value'
p2074
I0
I0
I01
Ntp2075
a(S'float'
p2076
S'span'
p2077
g2077
S'the value span'
p2078
I0
I0
I01
Ntp2079
ag825
asg29
(dp2080
sbsS'TSimpleTreeClassifier'
p2081
(i__main__
ClassDefinition
p2082
(dp2083
g4
I1
sg5
I01
sg6
g2081
sg7
S'TClassifier'
p2084
sg9
I00
sg10
(lp2085
sg12
(lp2086
g94
ag99
asg29
(dp2087
sbsS'TBiModalDiscretizer'
p2088
(i__main__
ClassDefinition
p2089
(dp2090
g4
I1
sg5
I01
sg6
g2088
sg7
S'TDiscretizer'
p2091
sg9
I00
sg10
(lp2092
sg12
(lp2093
(S'float'
p2094
S'low'
p2095
g2095
S'low threshold'
p2096
I0
I0
I01
Ntp2097
a(S'float'
p2098
S'high'
p2099
g2099
S'high threshold'
p2100
I0
I0
I01
Ntp2101
ag825
asg29
(dp2102
sbsS'TExamplesDistanceConstructor_Euclidean'
p2103
(i__main__
ClassDefinition
p2104
(dp2105
g4
I1
sg5
I01
sg6
g2103
sg7
S'TExamplesDistanceConstructor_Normalized'
p2106
sg9
I00
sg10
(lp2107
sg12
(lp2108
(S'bool'
p2109
S'normalize'
p2110
g2110
S'tells whether to normalize distances between attributes'
p2111
I0
I0
I01
Ntp2112
a(S'bool'
p2113
S'ignoreUnknowns'
p2114
S'ignore_unknowns'
p2115
S'if true (default: false) unknown values are ignored in computation'
p2116
I0
I0
I01
Ntp2117
ag1368
asg29
(dp2118
sbsS'TContingencyAttrAttr'
p2119
(i__main__
ClassDefinition
p2120
(dp2121
g4
I1
sg5
I01
sg6
g2119
sg7
S'TContingency'
p2122
sg9
I00
sg10
(lp2123
sg12
(lp2124
g1678
ag1683
ag1689
ag1694
ag1699
ag1704
asg29
(dp2125
sbsS'TRuleBeamRefiner_Selector'
p2126
(i__main__
ClassDefinition
p2127
(dp2128
g4
I1
sg5
I01
sg6
g2126
sg7
S'TRuleBeamRefiner'
p2129
sg9
I00
sg10
(lp2130
sg12
(lp2131
(S'TDiscretization'
p2132
S'discretization'
p2133
g2133
S'discretization for continuous attributes'
p2134
I0
I0
I00
Ntp2135
asg29
(dp2136
sbsS'TProbabilityEstimatorConstructor_Laplace'
p2137
(i__main__
ClassDefinition
p2138
(dp2139
g4
I1
sg5
I01
sg6
g2137
sg7
S'TProbabilityEstimatorConstructor'
p2140
sg9
I00
sg10
(lp2141
sg12
(lp2142
(S'float'
p2143
S'l'
p2144
g2144
S'number of examples added to each class (default: 1)'
p2145
I0
I0
I01
Ntp2146
a(S'bool'
p2147
S'renormalize'
p2148
g2148
S'computes the estimate on the original (not the normalized) distribution'
p2149
I0
I0
I01
Ntp2150
asg29
(dp2151
sbsS'TExamplesDistance_Relief'
p2152
(i__main__
ClassDefinition
p2153
(dp2154
g4
I1
sg5
I01
sg6
g2152
sg7
S'TExamplesDistance'
p2155
sg9
I00
sg10
(lp2156
sg12
(lp2157
(S'TDomainDistributions'
p2158
S'distributions'
p2159
g2159
S"distributions of attributes' values"
p2160
I0
I0
I00
Ntp2161
a(S'TAttributedFloatList'
p2162
S'averages'
p2163
g2163
S'average values of attributes'
p2164
I0
I0
I00
Ntp2165
a(S'TAttributedFloatList'
p2166
S'normalizations'
p2167
g2167
S"ranges of attributes' values"
p2168
I0
I0
I00
Ntp2169
a(S'TAttributedFloatList'
p2170
S'bothSpecial'
p2171
S'both_special'
p2172
S'distance if both values of both attributes are undefined'
p2173
I0
I0
I00
Ntp2174
asg29
(dp2175
sbsS'TExamplesDistance_Manhattan'
p2176
(i__main__
ClassDefinition
p2177
(dp2178
g4
I1
sg5
I01
sg6
g2176
sg7
S'TExamplesDistance_Normalized'
p2179
sg9
I00
sg10
(lp2180
sg12
(lp2181
g455
ag459
ag463
ag467
ag472
ag476
ag481
asg29
(dp2182
sbsS'TExamplesDistanceConstructor_Manhattan'
p2183
(i__main__
ClassDefinition
p2184
(dp2185
g4
I1
sg5
I01
sg6
g2183
sg7
S'TExamplesDistanceConstructor_Normalized'
p2186
sg9
I00
sg10
(lp2187
sg12
(lp2188
g2112
ag2117
ag1368
asg29
(dp2189
sbsS'TStringList'
p2190
(ipyprops
ClassDefinition
p2191
(dp2192
g136
I0
sg137
I01
sg138
g2190
sg139
g140
sg141
I0
sg142
(lp2193
sg144
(lp2194
sg146
(dp2195
sbsS'TTreeDescender'
p2196
(i__main__
ClassDefinition
p2197
(dp2198
g4
I1
sg5
I01
sg6
g2196
sg7
S'TOrange'
p2199
sg9
I01
sg10
(lp2200
sg12
(lp2201
sg29
(dp2202
sbsS'TColumnAssessor_Measure'
p2203
(i__main__
ClassDefinition
p2204
(dp2205
g4
I1
sg5
I01
sg6
g2203
sg7
S'TColumnAssessor'
p2206
sg9
I00
sg10
(lp2207
sg12
(lp2208
(S'TMeasureAttribute'
p2209
S'measure'
p2210
g2210
S'attribute quality measure'
p2211
I0
I0
I00
Ntp2212
asg29
(dp2213
sbsS'TIMBlurer'
p2214
(i__main__
ClassDefinition
p2215
(dp2216
g4
I1
sg5
I01
sg6
g2214
sg7
S'TIMByRowsPreprocessor'
p2217
sg9
I00
sg10
(lp2218
sg12
(lp2219
(S'float'
p2220
S'weight'
p2221
g2221
S'weight of neighbours'
p2222
I0
I0
I01
Ntp2223
a(S'float'
p2224
S'origWeight'
p2225
S'orig_weight'
p2226
S'weight of original row'
p2227
I0
I0
I01
Ntp2228
a(S'TFloatList'
p2229
S'attrWeights'
p2230
S'attr_weights'
p2231
S'weights by individual (different) attributes'
p2232
I0
I0
I00
Ntp2233
a(S'bool'
p2234
S'adjustOrigWeight'
p2235
S'adjust_orig_weight'
p2236
S'uses 1-weight(s) for weight of original row'
p2237
I0
I0
I01
Ntp2238
a(S'bool'
p2239
S'onlyEmpty'
p2240
S'only_empty'
p2241
S'blurs only empty cells'
p2242
I0
I0
I01
Ntp2243
asg29
(dp2244
sbsS'TFilter'
p2245
(i__main__
ClassDefinition
p2246
(dp2247
g4
I1
sg5
I01
sg6
g2245
sg7
S'TOrange'
p2248
sg9
I01
sg10
(lp2249
sg12
(lp2250
g696
ag700
asg29
(dp2251
sbsS'TC45Learner'
p2252
(i__main__
ClassDefinition
p2253
(dp2254
g4
I1
sg5
I01
sg6
g2252
sg7
S'TLearner'
p2255
sg9
I00
sg10
(lp2256
sg12
(lp2257
(S'bool'
p2258
S'gainRatio'
p2259
(g2259
S'g'
p2260
tp2261
S' use gain ratio (instead of information gain)'
p2262
I0
I0
I01
Ntp2263
a(S'bool'
p2264
S'subset'
p2265
(g2265
S's'
p2266
tp2267
S' use subsetting'
p2268
I0
I0
I01
Ntp2269
a(S'bool'
p2270
S'batch'
p2271
(g2271
S'b'
p2272
tp2273
S' batch'
p2274
I0
I0
I01
Ntp2275
a(S'bool'
p2276
S'probThresh'
p2277
(g2277
S'p'
p2278
tp2279
S' probability threshold'
p2280
I0
I0
I01
Ntp2281
a(S'int'
p2282
S'minObjs'
p2283
(g2283
g1213
tp2284
S' minimal number of objects (examples) in leaves'
p2285
I0
I0
I01
Ntp2286
a(S'int'
p2287
S'window'
p2288
(g2288
S'w'
p2289
tp2290
S' window'
p2291
I0
I0
I01
Ntp2292
a(S'int'
p2293
S'increment'
p2294
(g2294
S'i'
p2295
tp2296
S' increment'
p2297
I0
I0
I01
Ntp2298
a(S'float'
p2299
S'cf'
p2300
(g2300
S'c'
p2301
tp2302
S' cf'
p2303
I0
I0
I01
Ntp2304
a(S'int'
p2305
S'trials'
p2306
(g2306
S't'
p2307
tp2308
S' trials'
p2309
I0
I0
I01
Ntp2310
a(S'bool'
p2311
S'prune'
p2312
g2312
S'return pruned tree'
p2313
I0
I0
I01
Ntp2314
a(S'bool'
p2315
S'convertToOrange'
p2316
S'convert_to_orange'
p2317
S'return TreeClassifier instead of C45TreeClassifier'
p2318
I0
I0
I01
Ntp2319
a(S'bool'
p2320
S'storeExamples'
p2321
S'store_examples'
p2322
S'stores examples when (if) converting to TreeClassifier'
p2323
I0
I0
I01
Ntp2324
a(S'bool'
p2325
S'storeContingencies'
p2326
S'store_contingencies'
p2327
S'stores contingencies when (if) converting to TreeClassifier'
p2328
I0
I0
I01
Ntp2329
ag110
asg29
(dp2330
sbsS'TAttributedBoolList'
p2331
(ipyprops
ClassDefinition
p2332
(dp2333
g136
I0
sg137
I01
sg138
g2331
sg139
S'TBoolList'
p2334
sg141
I0
sg142
(lp2335
sg144
(lp2336
sg146
(dp2337
sbsS'TFeatureByMinComplexity'
p2338
(i__main__
ClassDefinition
p2339
(dp2340
g4
I1
sg5
I01
sg6
g2338
sg7
S'TFeatureInducer'
p2341
sg9
I00
sg10
(lp2342
sg12
(lp2343
(S'TColorIG'
p2344
S'colorIG'
p2345
S'color_IG'
p2346
S'graph coloring algorithm'
p2347
I0
I0
I00
Ntp2348
a(S'int'
p2349
S'completion'
p2350
g2350
S' decides how to determine the class for points not covered by any cluster'
p2351
I0
I0
I01
S'FeatureByMinComplexity_Completion'
p2352
tp2353
asg29
(dp2354
S'Completion'
p2355
(lp2356
(S'NoCompletion'
p2357
S'completion_no'
p2358
tp2359
a(S'CompletionByDefault'
p2360
S'completion_default'
p2361
tp2362
a(S'CompletionByBayes'
p2363
S'completion_bayes'
p2364
tp2365
assbsS'TPreprocessor_dropMissingClasses'
p2366
(i__main__
ClassDefinition
p2367
(dp2368
g4
I1
sg5
I01
sg6
g2366
sg7
S'TPreprocessor'
p2369
sg9
I00
sg10
(lp2370
sg12
(lp2371
sg29
(dp2372
sbsS'TkNNClassifier'
p2373
(i__main__
ClassDefinition
p2374
(dp2375
g4
I1
sg5
I01
sg6
g2373
sg7
S'TClassifierFD'
p2376
sg9
I00
sg10
(lp2377
sg12
(lp2378
(S'TFindNearest'
p2379
S'findNearest'
p2380
S'find_nearest'
p2381
g574
I0
I0
I00
Ntp2382
a(S'float'
p2383
g1209
g1209
S'number of neighbours (0 for sqrt of #examples)'
p2384
I0
I0
I01
Ntp2385
a(S'bool'
p2386
S'rankWeight'
p2387
S'rank_weight'
p2388
S'enable weighting by ranks'
p2389
I0
I0
I01
Ntp2390
a(S'int'
p2391
S'weightID'
p2392
S'weight_ID'
p2393
S'id of meta-attribute with weight'
p2394
I0
I0
I01
Ntp2395
a(S'int'
p2396
S'nExamples'
p2397
S'n_examples'
p2398
S'the number of learning examples '
p2399
I0
I0
I01
Ntp2400
ag292
ag94
ag99
asg29
(dp2401
sbsS'TMeasureAttribute_info'
p2402
(i__main__
ClassDefinition
p2403
(dp2404
g4
I1
sg5
I01
sg6
g2402
sg7
S'TMeasureAttributeFromProbabilities'
p2405
sg9
I00
sg10
(lp2406
sg12
(lp2407
g911
ag916
ag922
ag927
ag932
ag937
ag942
asg29
(dp2408
sbsS'TRuleBeamCandidateSelector_TakeAll'
p2409
(i__main__
ClassDefinition
p2410
(dp2411
g4
I1
sg5
I01
sg6
g2409
sg7
S'TRuleBeamCandidateSelector'
p2412
sg9
I00
sg10
(lp2413
sg12
(lp2414
sg29
(dp2415
sbsS'TExamplesDistanceConstructor_Relief'
p2416
(i__main__
ClassDefinition
p2417
(dp2418
g4
I1
sg5
I01
sg6
g2416
sg7
S'TExamplesDistanceConstructor'
p2419
sg9
I00
sg10
(lp2420
sg12
(lp2421
g1368
asg29
(dp2422
sbsS'TOrange'
p2423
(i__main__
ClassDefinition
p2424
(dp2425
g4
I1
sg5
I01
sg6
g2423
sg7
Nsg9
I00
sg10
(lp2426
sg12
(lp2427
sg29
(dp2428
sbsS'TRuleValidator'
p2429
(i__main__
ClassDefinition
p2430
(dp2431
g4
I1
sg5
I01
sg6
g2429
sg7
S'TOrange'
p2432
sg9
I01
sg10
(lp2433
sg12
(lp2434
sg29
(dp2435
sbsS'TColorIG'
p2436
(i__main__
ClassDefinition
p2437
(dp2438
g4
I1
sg5
I01
sg6
g2436
sg7
S'TOrange'
p2439
sg9
I01
sg10
(lp2440
sg12
(lp2441
sg29
(dp2442
sbsS'TRuleValidator_Python'
p2443
(i__main__
ClassDefinition
p2444
(dp2445
g4
I1
sg5
I01
sg6
g2443
sg7
S'TRuleValidator'
p2446
sg9
I00
sg10
(lp2447
sg12
(lp2448
sg29
(dp2449
sbsS'TSubsetsGenerator_constSize_iterator'
p2450
(i__main__
ClassDefinition
p2451
(dp2452
g4
I1
sg5
I01
sg6
g2450
sg7
S'TSubsetsGenerator_iterator'
p2453
sg9
I00
sg10
(lp2454
sg12
(lp2455
(S'bool'
p2456
S'moreToCome'
p2457
S'more_to_come'
p2458
g574
I01
I0
I01
Ntp2459
ag511
asg29
(dp2460
sbsS'TIMByRowsBySorting'
p2461
(i__main__
ClassDefinition
p2462
(dp2463
g4
I1
sg5
I01
sg6
g2461
sg7
S'TIMByRowsConstructor'
p2464
sg9
I00
sg10
(lp2465
sg12
(lp2466
sg29
(dp2467
sbsS'TAssociationLearner'
p2468
(i__main__
ClassDefinition
p2469
(dp2470
g4
I1
sg5
I01
sg6
g2468
sg7
S'TLearner'
p2471
sg9
I00
sg10
(lp2472
sg12
(lp2473
(S'float'
p2474
S'confidence'
p2475
g2475
S'required confidence'
p2476
I0
I0
I01
Ntp2477
a(S'float'
p2478
S'support'
p2479
g2479
S'required support'
p2480
I0
I0
I01
Ntp2481
a(S'int'
p2482
S'voteWeight'
p2483
S'vote_weight'
p2484
S'vote weight (s=support, c=confidence, p=product)'
p2485
I0
I0
I01
Ntp2486
a(S'int'
p2487
S'maxItemSets'
p2488
S'max_item_sets'
p2489
S'maximal number of itemsets (increase if you want)'
p2490
I0
I0
I01
Ntp2491
ag110
asg29
(dp2492
sbsS'TRuleBeamInitializer_Python'
p2493
(i__main__
ClassDefinition
p2494
(dp2495
g4
I1
sg5
I01
sg6
g2493
sg7
S'TRuleBeamInitializer'
p2496
sg9
I00
sg10
(lp2497
sg12
(lp2498
sg29
(dp2499
sbsS'TDistributionAssessor'
p2500
(i__main__
ClassDefinition
p2501
(dp2502
g4
I1
sg5
I01
sg6
g2500
sg7
S'TOrange'
p2503
sg9
I01
sg10
(lp2504
sg12
(lp2505
sg29
(dp2506
sbsS'TRuleCovererAndRemover_Python'
p2507
(i__main__
ClassDefinition
p2508
(dp2509
g4
I1
sg5
I01
sg6
g2507
sg7
S'TRuleCovererAndRemover'
p2510
sg9
I00
sg10
(lp2511
sg12
(lp2512
sg29
(dp2513
sbsS'TMeasureAttribute_gainRatioA'
p2514
(i__main__
ClassDefinition
p2515
(dp2516
g4
I1
sg5
I01
sg6
g2514
sg7
S'TMeasureAttribute_gainRatio'
p2517
sg9
I00
sg10
(lp2518
sg12
(lp2519
g911
ag916
ag922
ag927
ag932
ag937
ag942
asg29
(dp2520
sbsS'TConditionalProbabilityEstimatorConstructor_ByRows'
p2521
(i__main__
ClassDefinition
p2522
(dp2523
g4
I1
sg5
I01
sg6
g2521
sg7
S'TConditionalProbabilityEstimatorConstructor'
p2524
sg9
I00
sg10
(lp2525
sg12
(lp2526
(S'TProbabilityEstimatorConstructor'
p2527
S'estimatorConstructor'
p2528
S'estimator_constructor'
p2529
S'ProbabilityEstimator to be used '
p2530
I0
I0
I00
Ntp2531
asg29
(dp2532
sbsS'TCartesianClassifier'
p2533
(i__main__
ClassDefinition
p2534
(dp2535
g4
I1
sg5
I01
sg6
g2533
sg7
S'TClassifierFD'
p2536
sg9
I00
sg10
(lp2537
sg12
(lp2538
g292
ag94
ag99
asg29
(dp2539
sbsS'TLinearClassifier'
p2540
(i__main__
ClassDefinition
p2541
(dp2542
g4
I1
sg5
I01
sg6
g2540
sg7
S'TClassifierFD'
p2543
sg9
I00
sg10
(lp2544
sg12
(lp2545
(S'TFloatListList'
p2546
S'weights'
p2547
g2547
S'Computed feature weights'
p2548
I0
I0
I00
Ntp2549
a(S'TExampleTable'
p2550
S'examples'
p2551
g2551
S'Examples used to train the classifier'
p2552
I0
I0
I00
Ntp2553
a(S'float'
p2554
S'bias'
p2555
g2555
S'bias'
p2556
I01
I0
I01
Ntp2557
ag292
ag94
ag99
asg29
(dp2558
sbsS'TTreeDescender_UnknownToBranch'
p2559
(i__main__
ClassDefinition
p2560
(dp2561
g4
I1
sg5
I01
sg6
g2559
sg7
g1593
sg9
I0
sg10
(lp2562
sg12
(lp2563
sg29
(dp2564
sbsS'TSubsetsGenerator_constSize'
p2565
(i__main__
ClassDefinition
p2566
(dp2567
g4
I1
sg5
I01
sg6
g2565
sg7
S'TSubsetsGenerator'
p2568
sg9
I00
sg10
(lp2569
sg12
(lp2570
(S'int'
p2571
S'B'
p2572
g2572
S'subset size'
p2573
I0
I0
I01
Ntp2574
ag208
asg29
(dp2575
sbsS'TColorIG_MCF'
p2576
(i__main__
ClassDefinition
p2577
(dp2578
g4
I1
sg5
I01
sg6
g2576
sg7
S'TColorIG'
p2579
sg9
I00
sg10
(lp2580
sg12
(lp2581
sg29
(dp2582
sbsS'TBasicAttrStat'
p2583
(i__main__
ClassDefinition
p2584
(dp2585
g4
I1
sg5
I01
sg6
g2583
sg7
S'TOrange'
p2586
sg9
I00
sg10
(lp2587
sg12
(lp2588
(S'float'
p2589
S'sum'
p2590
g2590
S'sum of values'
p2591
I0
I0
I01
Ntp2592
a(S'float'
p2593
S'sum2'
p2594
g2594
S'sum of squares of values'
p2595
I0
I0
I01
Ntp2596
a(S'float'
p2597
g1019
g1019
S'number of examples for which the attribute is defined'
p2598
I0
I0
I01
Ntp2599
a(S'float'
p2600
S'min'
p2601
g2601
S'the lowest value of the attribute'
p2602
I0
I0
I01
Ntp2603
a(S'float'
p2604
S'max'
p2605
g2605
S'the highest value of the attribute'
p2606
I0
I0
I01
Ntp2607
a(S'float'
p2608
S'avg'
p2609
g2609
S'the average value of the attribute'
p2610
I0
I0
I01
Ntp2611
a(S'float'
p2612
S'dev'
p2613
g2613
S'the deviation of the value of the attribute'
p2614
I0
I0
I01
Ntp2615
a(S'TVariable'
p2616
S'variable'
p2617
g2617
S'the attribute to which the data applies'
p2618
I0
I0
I00
Ntp2619
a(S'bool'
p2620
S'holdRecomputation'
p2621
S'hold_recomputation'
p2622
S'temporarily disables recomputation of avg and dev while adding values'
p2623
I0
I0
I01
Ntp2624
asg29
(dp2625
sbsS'TTreeSplitConstructor_Attribute'
p2626
(i__main__
ClassDefinition
p2627
(dp2628
g4
I1
sg5
I01
sg6
g2626
sg7
S'TTreeSplitConstructor_Measure'
p2629
sg9
I00
sg10
(lp2630
sg12
(lp2631
g1303
ag1308
ag788
asg29
(dp2632
sbsS'TRemoveRedundantByInduction'
p2633
(i__main__
ClassDefinition
p2634
(dp2635
g4
I1
sg5
I01
sg6
g2633
sg7
S'TRemoveRedundant'
p2636
sg9
I00
sg10
(lp2637
sg12
(lp2638
(S'TFeatureInducer'
p2639
S'featureReducer'
p2640
S'feature_reducer'
p2641
S'feature construction algorithm'
p2642
I0
I0
I00
Ntp2643
a(S'TMeasureAttribute'
p2644
S'measure'
p2645
g2645
S'measure for initial ordering of attributes'
p2646
I0
I0
I00
Ntp2647
a(S'TDiscretization'
p2648
S'discretization'
p2649
g2649
S'discretization method'
p2650
I0
I0
I00
Ntp2651
ag1346
asg29
(dp2652
sbsS'TFilter_conjunction'
p2653
(i__main__
ClassDefinition
p2654
(dp2655
g4
I1
sg5
I01
sg6
g2653
sg7
S'TFilter'
p2656
sg9
I00
sg10
(lp2657
sg12
(lp2658
(S'TFilterList'
p2659
S'filters'
p2660
g2660
S'a list of filters;'
p2661
I0
I0
I00
Ntp2662
ag696
ag700
asg29
(dp2663
sbsS'TExampleForMissing'
p2664
(i__main__
ClassDefinition
p2665
(dp2666
g4
I1
sg5
I01
sg6
g2664
sg7
S'TExample'
p2667
sg9
I00
sg10
(lp2668
sg12
(lp2669
(S'TEFMDataDescription'
p2670
S'dataDescription'
p2671
S'data_description'
p2672
S'data description'
p2673
I0
I0
I00
Ntp2674
a(S'TDomain'
p2675
S'domain'
p2676
g2676
S"Example's domain"
p2677
I01
I0
I00
Ntp2678
a(S'int'
p2679
S'id'
p2680
g2680
g574
I0
I0
I01
Ntp2681
asg29
(dp2682
sbsS'TRuleBeamFilter'
p2683
(i__main__
ClassDefinition
p2684
(dp2685
g4
I1
sg5
I01
sg6
g2683
sg7
S'TOrange'
p2686
sg9
I01
sg10
(lp2687
sg12
(lp2688
sg29
(dp2689
sbsS'TBayesClassifier'
p2690
(i__main__
ClassDefinition
p2691
(dp2692
g4
I1
sg5
I01
sg6
g2690
sg7
S'TClassifierFD'
p2693
sg9
I00
sg10
(lp2694
sg12
(lp2695
(S'TDistribution'
p2696
S'distribution'
p2697
g2697
S'class distributions (P(C))'
p2698
I0
I0
I00
Ntp2699
a(S'TDomainContingency'
p2700
S'conditionalDistributions'
p2701
S'conditional_distributions'
p2702
S'conditional distributions, P(C|A)'
p2703
I0
I0
I00
Ntp2704
a(S'TProbabilityEstimator'
p2705
S'estimator'
p2706
g2706
S'a probability estimator for P(C)'
p2707
I0
I0
I00
Ntp2708
a(S'TConditionalProbabilityEstimatorList'
p2709
S'conditionalEstimators'
p2710
S'conditional_estimators'
p2711
S'a probability estimator for P(C|A)'
p2712
I0
I0
I00
Ntp2713
a(S'bool'
p2714
S'normalizePredictions'
p2715
S'normalize_predictions'
p2716
S'if true, classifier will normalize predictions'
p2717
I0
I0
I01
Ntp2718
a(S'float'
p2719
S'threshold'
p2720
g2720
S'threshold probability for class 1 (for binary classes only)'
p2721
I0
I0
I01
Ntp2722
ag292
ag94
ag99
asg29
(dp2723
sbsS'TGraph'
p2724
(i__main__
ClassDefinition
p2725
(dp2726
g4
I1
sg5
I01
sg6
g2724
sg7
S'TOrange'
p2727
sg9
I01
sg10
(lp2728
sg12
(lp2729
g1484
ag1489
ag1493
asg29
(dp2730
sbsS'TPreprocessor_addClassWeight'
p2731
(i__main__
ClassDefinition
p2732
(dp2733
g4
I1
sg5
I01
sg6
g2731
sg7
S'TPreprocessor'
p2734
sg9
I00
sg10
(lp2735
sg12
(lp2736
(S'TFloatList'
p2737
S'classWeights'
p2738
S'class_weights'
p2739
S'weights of examples of particular classes'
p2740
I0
I0
I00
Ntp2741
a(S'bool'
p2742
S'equalize'
p2743
g2743
S'reweight examples to equalize class proportions'
p2744
I0
I0
I01
Ntp2745
a(S'TRandomGenerator'
p2746
S'randomGenerator'
p2747
S'random_generator'
p2748
S'random number generator'
p2749
I0
I0
I00
Ntp2750
asg29
(dp2751
sbsS'THierarchicalClusterList'
p2752
(ipyprops
ClassDefinition
p2753
(dp2754
g136
I0
sg137
I01
sg138
g2752
sg139
g140
sg141
I0
sg142
(lp2755
sg144
(lp2756
sg146
(dp2757
sbsS'TStopIMClusteringByAssessor'
p2758
(i__main__
ClassDefinition
p2759
(dp2760
g4
I1
sg5
I01
sg6
g2758
sg7
S'TOrange'
p2761
sg9
I01
sg10
(lp2762
sg12
(lp2763
sg29
(dp2764
sbsS'TValueFilter_continuous'
p2765
(i__main__
ClassDefinition
p2766
(dp2767
g4
I1
sg5
I01
sg6
g2765
sg7
S'TValueFilter'
p2768
sg9
I00
sg10
(lp2769
sg12
(lp2770
(S'float'
p2771
S'min'
p2772
(g2772
S'ref'
p2773
tp2774
S' reference value (lower bound for interval operators)'
p2775
I0
I0
I01
Ntp2776
a(S'float'
p2777
S'max'
p2778
g2778
S'upper bound for interval operators'
p2779
I0
I0
I01
Ntp2780
a(S'bool'
p2781
S'outside'
p2782
g2782
S'obsolete: if true, the filter accepts the values outside the interval, not inside'
p2783
I0
I0
I01
Ntp2784
a(S'int'
p2785
S'oper'
p2786
g2786
S' operator'
p2787
I0
I0
I01
S'ValueFilter_Operator'
p2788
tp2789
ag1062
ag1067
asg29
(dp2790
sbsS'TAssociationRule'
p2791
(i__main__
ClassDefinition
p2792
(dp2793
g4
I1
sg5
I01
sg6
g2791
sg7
S'TOrange'
p2794
sg9
I00
sg10
(lp2795
sg12
(lp2796
(S'TExample'
p2797
S'left'
p2798
g2798
S'left side of the rule'
p2799
I01
I0
I00
Ntp2800
a(S'TExample'
p2801
S'right'
p2802
g2802
S'right side of the rule'
p2803
I01
I0
I00
Ntp2804
a(S'float'
p2805
S'support'
p2806
g2806
S'support for the rule'
p2807
I0
I0
I01
Ntp2808
a(S'float'
p2809
S'confidence'
p2810
g2810
S'confidence of the rule'
p2811
I0
I0
I01
Ntp2812
a(S'float'
p2813
S'coverage'
p2814
g2814
S"rule's coverage"
p2815
I0
I0
I01
Ntp2816
a(S'float'
p2817
S'strength'
p2818
g2818
S"rule's strength"
p2819
I0
I0
I01
Ntp2820
a(S'float'
p2821
S'lift'
p2822
g2822
S"rule's lift"
p2823
I0
I0
I01
Ntp2824
a(S'float'
p2825
S'leverage'
p2826
g2826
S"rule's leverage"
p2827
I0
I0
I01
Ntp2828
a(S'float'
p2829
S'nAppliesLeft'
p2830
S'n_applies_left'
p2831
S"number of examples covered by the rule's left side"
p2832
I0
I0
I01
Ntp2833
a(S'float'
p2834
S'nAppliesRight'
p2835
S'n_applies_right'
p2836
S"number of examples covered by the rule's right side"
p2837
I0
I0
I01
Ntp2838
a(S'float'
p2839
S'nAppliesBoth'
p2840
S'n_applies_both'
p2841
S'number of examples covered by the rule'
p2842
I0
I0
I01
Ntp2843
a(S'float'
p2844
S'nExamples'
p2845
S'n_examples'
p2846
S'number of learning examples'
p2847
I0
I0
I01
Ntp2848
a(S'int'
p2849
S'nLeft'
p2850
S'n_left'
p2851
S"number of items on the rule's left side"
p2852
I01
I0
I01
Ntp2853
a(S'int'
p2854
S'nRight'
p2855
S'n_right'
p2856
S"number of items on the rule's right side"
p2857
I01
I0
I01
Ntp2858
a(S'TExampleTable'
p2859
S'examples'
p2860
g2860
S'examples which the rule was built from'
p2861
I01
I0
I00
Ntp2862
a(S'TIntList'
p2863
S'matchLeft'
p2864
S'match_left'
p2865
S'indices of examples that match the left side of the rule'
p2866
I01
I0
I00
Ntp2867
a(S'TIntList'
p2868
S'matchBoth'
p2869
S'match_both'
p2870
S'indices to examples that match both sides of the rule'
p2871
I01
I0
I00
Ntp2872
asg29
(dp2873
sbsS'TValueFilter'
p2874
(i__main__
ClassDefinition
p2875
(dp2876
g4
I1
sg5
I01
sg6
g2874
sg7
S'TOrange'
p2877
sg9
I01
sg10
(lp2878
sg12
(lp2879
g1062
ag1067
asg29
(dp2880
S'Operator'
p2881
(lp2882
(S'None'
p2883
I0
tp2884
a(S'Equal'
p2885
I1
tp2886
a(S'NotEqual'
p2887
I2
tp2888
a(S'Less'
p2889
I3
tp2890
a(S'LessEqual'
p2891
I4
tp2892
a(S'Greater'
p2893
I5
tp2894
a(S'GreaterEqual'
p2895
I6
tp2896
a(S'Between'
p2897
I7
tp2898
a(S'Outside'
p2899
I8
tp2900
a(S'Contains'
p2901
I9
tp2902
a(S'NotContains'
p2903
I10
tp2904
a(S'BeginsWith'
p2905
I11
tp2906
a(S'EndsWith'
p2907
I12
tp2908
a(S'Listed'
p2909
I13
tp2910
assbsS'TClustersFromDistributions'
p2911
(i__main__
ClassDefinition
p2912
(dp2913
g4
I1
sg5
I01
sg6
g2911
sg7
S'TOrange'
p2914
sg9
I01
sg10
(lp2915
sg12
(lp2916
sg29
(dp2917
sbsS'TVariable'
p2918
(i__main__
ClassDefinition
p2919
(dp2920
g4
I1
sg5
I01
sg6
g2918
sg7
S'TOrange'
p2921
sg9
I01
sg10
(lp2922
sg12
(lp2923
g334
ag338
ag342
ag347
ag352
ag357
ag362
asg29
(dp2924
S'Type'
p2925
(lp2926
(S'None'
p2927
S'(int)TValue::NONE'
p2928
tp2929
a(S'Discrete'
p2930
S'(int)TValue::INTVAR'
p2931
tp2932
a(S'Continuous'
p2933
S'(int)TValue::FLOATVAR'
p2934
tp2935
a(S'Other'
p2936
S'(int)(TValue::FLOATVAR+1)'
p2937
tp2938
a(S'String'
p2939
S'(int)STRINGVAR'
p2940
tp2941
asS'MakeStatus'
p2942
(lp2943
(S'OK'
p2944
I0
tp2945
a(S'MissingValues'
p2946
I1
tp2947
a(S'NoRecognizedValues'
p2948
I2
tp2949
a(S'Incompatible'
p2950
I3
tp2951
a(S'NotFound'
p2952
I4
tp2953
assbsS'TNoiseValuesGenerator'
p2954
(i__main__
ClassDefinition
p2955
(dp2956
g4
I1
sg5
I01
sg6
g2954
sg7
S'TChangeExampleGenerator'
p2957
sg9
I00
sg10
(lp2958
sg12
(lp2959
(S'TIntFloatList'
p2960
S'replaceProbabilities'
p2961
S'replace_probabilities'
p2962
S"probabilities for replacing attributes' values"
p2963
I0
I0
I00
Ntp2964
a(S'TRandomGenerator'
p2965
S'randomGenerator'
p2966
S'random_generator'
p2967
S'random generator'
p2968
I0
I0
I00
Ntp2969
ag307
ag311
asg29
(dp2970
sbsS'TC45TreeNodeList'
p2971
(ipyprops
ClassDefinition
p2972
(dp2973
g136
I0
sg137
I01
sg138
g2971
sg139
g140
sg141
I0
sg142
(lp2974
sg144
(lp2975
sg146
(dp2976
sbsS'TFilter_sameValue'
p2977
(i__main__
ClassDefinition
p2978
(dp2979
g4
I1
sg5
I01
sg6
g2977
sg7
S'TFilter'
p2980
sg9
I00
sg10
(lp2981
sg12
(lp2982
(S'int'
p2983
S'position'
p2984
g2984
S'position of the observed attribute'
p2985
I0
I0
I01
Ntp2986
a(S'TValue'
p2987
S'value'
p2988
g2988
S'value that the selected examples should have'
p2989
I0
I0
I01
Ntp2990
ag696
ag700
asg29
(dp2991
sbsS'TEquiNDiscretization'
p2992
(i__main__
ClassDefinition
p2993
(dp2994
g4
I1
sg5
I01
sg6
g2992
sg7
S'TDiscretization'
p2995
sg9
I00
sg10
(lp2996
sg12
(lp2997
(S'int'
p2998
S'numberOfIntervals'
p2999
(g2999
g1019
tp3000
S' number of intervals'
p3001
I0
I0
I01
Ntp3002
a(S'bool'
p3003
S'recursiveDivision'
p3004
S'recursive_division'
p3005
S'find cut-off points by recursive division (default = true)'
p3006
I0
I0
I01
Ntp3007
asg29
(dp3008
sbsS'TImputerConstructor_average'
p3009
(i__main__
ClassDefinition
p3010
(dp3011
g4
I1
sg5
I01
sg6
g3009
sg7
S'TImputerConstructor'
p3012
sg9
I00
sg10
(lp3013
sg12
(lp3014
g165
asg29
(dp3015
sbsS'TDomainBasicAttrStat'
p3016
(ipyprops
ClassDefinition
p3017
(dp3018
g136
I0
sg137
I01
sg138
S'TDomainBasicAttrStat'
p3019
sg139
g140
sg141
I0
sg142
(lp3020
sg144
(lp3021
sg146
(dp3022
sbsS'TStopDistributionClustering'
p3023
(i__main__
ClassDefinition
p3024
(dp3025
g4
I1
sg5
I01
sg6
g3023
sg7
S'TOrange'
p3026
sg9
I01
sg10
(lp3027
sg12
(lp3028
sg29
(dp3029
sbsS'TImputerConstructor_random'
p3030
(i__main__
ClassDefinition
p3031
(dp3032
g4
I1
sg5
I01
sg6
g3030
sg7
S'TImputerConstructor'
p3033
sg9
I00
sg10
(lp3034
sg12
(lp3035
(S'bool'
p3036
S'deterministic'
p3037
g3037
S"tells whether to initialize random by example's CRC (default: false)"
p3038
I0
I0
I01
Ntp3039
ag165
asg29
(dp3040
sbsS'TCostWrapperClassifier'
p3041
(i__main__
ClassDefinition
p3042
(dp3043
g4
I1
sg5
I01
sg6
g3041
sg7
S'TClassifier'
p3044
sg9
I00
sg10
(lp3045
sg12
(lp3046
(S'TClassifier'
p3047
S'classifier'
p3048
g3048
S'basic classifier'
p3049
I0
I0
I00
Ntp3050
a(S'TCostMatrix'
p3051
S'costMatrix'
p3052
S'cost_matrix'
p3053
S'cost matrix'
p3054
I0
I0
I00
Ntp3055
ag94
ag99
asg29
(dp3056
sbsS'TPreprocessor_ignore'
p3057
(i__main__
ClassDefinition
p3058
(dp3059
g4
I1
sg5
I01
sg6
g3057
sg7
S'TPreprocessor'
p3060
sg9
I00
sg10
(lp3061
sg12
(lp3062
(S'TVarList'
p3063
S'attributes'
p3064
g3064
S'tells which attributes to remove'
p3065
I0
I0
I00
Ntp3066
asg29
(dp3067
sbsS'TEVDist'
p3068
(i__main__
ClassDefinition
p3069
(dp3070
g4
I1
sg5
I01
sg6
g3068
sg7
S'TOrange'
p3071
sg9
I00
sg10
(lp3072
sg12
(lp3073
(S'float'
p3074
S'mu'
p3075
g3075
S'mu of Fisher-Tippett distribution'
p3076
I0
I0
I01
Ntp3077
a(S'float'
p3078
S'beta'
p3079
g3079
S'beta of Fisher-Tippett distribution'
p3080
I0
I0
I01
Ntp3081
a(S'TFloatList'
p3082
S'percentiles'
p3083
g3083
S'usually 10 values - 0 = 5th percentile, 1 = 15th percentile, 9 = 95th percentile, change maxPercentile and step for other settings'
p3084
I0
I0
I00
Ntp3085
a(S'float'
p3086
S'maxPercentile'
p3087
S'max_percentile'
p3088
S'maxPercentile Value, default 0.95'
p3089
I0
I0
I01
Ntp3090
a(S'float'
p3091
S'step'
p3092
g3092
S'step of percentiles, default 0.1'
p3093
I0
I0
I01
Ntp3094
asg29
(dp3095
sbsS'TMeasureAttribute_Python'
p3096
(i__main__
ClassDefinition
p3097
(dp3098
g4
I1
sg5
I01
sg6
g3096
sg7
S'TMeasureAttribute'
p3099
sg9
I00
sg10
(lp3100
sg12
(lp3101
g927
ag932
ag937
ag942
asg29
(dp3102
sbsS'TDistributionAssessor_Measure'
p3103
(i__main__
ClassDefinition
p3104
(dp3105
g4
I1
sg5
I01
sg6
g3103
sg7
S'TDistributionAssessor'
p3106
sg9
I00
sg10
(lp3107
sg12
(lp3108
(S'TMeasureAttribute'
p3109
S'measure'
p3110
g3110
S'attribute quality measure'
p3111
I0
I0
I00
Ntp3112
asg29
(dp3113
sbsS'TDistributionAssessor_m'
p3114
(i__main__
ClassDefinition
p3115
(dp3116
g4
I1
sg5
I01
sg6
g3114
sg7
S'TDistributionAssessor'
p3117
sg9
I00
sg10
(lp3118
sg12
(lp3119
(S'float'
p3120
g1213
g1213
S'm for m-estimate'
p3121
I0
I0
I01
Ntp3122
asg29
(dp3123
sbsS'TClassifierRandomGenerator'
p3124
(i__main__
ClassDefinition
p3125
(dp3126
g4
I1
sg5
I01
sg6
g3124
sg7
S'TExampleGenerator'
p3127
sg9
I00
sg10
(lp3128
sg12
(lp3129
(S'TClassifier'
p3130
S'classify'
p3131
g3131
S'classifier'
p3132
I0
I0
I00
Ntp3133
a(S'int'
p3134
S'noOfEx'
p3135
S'no_of_ex'
p3136
S'number of examples'
p3137
I0
I0
I01
Ntp3138
ag307
ag311
asg29
(dp3139
sbsS'TThresholdDiscretizer'
p3140
(i__main__
ClassDefinition
p3141
(dp3142
g4
I1
sg5
I01
sg6
g3140
sg7
S'TDiscretizer'
p3143
sg9
I00
sg10
(lp3144
sg12
(lp3145
(S'float'
p3146
S'threshold'
p3147
g3147
S'threshold'
p3148
I0
I0
I01
Ntp3149
ag825
asg29
(dp3150
sbsS'TExampleTable'
p3151
(i__main__
ClassDefinition
p3152
(dp3153
g4
I1
sg5
I01
sg6
g3151
sg7
S'TExampleGenerator'
p3154
sg9
I00
sg10
(lp3155
sg12
(lp3156
(S'TRandomGenerator'
p3157
S'randomGenerator'
p3158
S'random_generator'
p3159
S'random generator used by randomExample'
p3160
I0
I0
I00
Ntp3161
a(S'TExampleGenerator'
p3162
S'lock'
p3163
(g3163
S'owner'
p3164
tp3165
S' the real owner of examples'
p3166
I01
I0
I00
Ntp3167
a(S'bool'
p3168
S'ownsExamples'
p3169
(g3169
S'owns_instances'
p3170
tp3171
S' if false, examples in this table are references to examples in another table'
p3172
I01
I0
I01
Ntp3173
ag307
ag311
asg29
(dp3174
sbsS'TEVDistGetter'
p3175
(i__main__
ClassDefinition
p3176
(dp3177
g4
I1
sg5
I01
sg6
g3175
sg7
S'TOrange'
p3178
sg9
I01
sg10
(lp3179
sg12
(lp3180
sg29
(dp3181
sbsS'TTreeSplitConstructor_Threshold'
p3182
(i__main__
ClassDefinition
p3183
(dp3184
g4
I1
sg5
I01
sg6
g3182
sg7
S'TTreeSplitConstructor_Measure'
p3185
sg9
I00
sg10
(lp3186
sg12
(lp3187
g1303
ag1308
ag788
asg29
(dp3188
sbsS'TMakeRandomIndicesN'
p3189
(i__main__
ClassDefinition
p3190
(dp3191
g4
I1
sg5
I01
sg6
g3189
sg7
S'TMakeRandomIndices'
p3192
sg9
I00
sg10
(lp3193
sg12
(lp3194
(S'TFloatList'
p3195
g2278
g2278
S'probabilities of indices (last is 1-sum(p))'
p3196
I0
I0
I00
Ntp3197
ag719
ag723
ag728
asg29
(dp3198
sbsS'TStopDistributionClustering_n'
p3199
(i__main__
ClassDefinition
p3200
(dp3201
g4
I1
sg5
I01
sg6
g3199
sg7
S'TStopDistributionClustering'
p3202
sg9
I00
sg10
(lp3203
sg12
(lp3204
(S'int'
p3205
g1019
g1019
S'number of clusters'
p3206
I0
I0
I01
Ntp3207
asg29
(dp3208
sbsS'TTreeExampleSplitter_UnknownsAsSelector'
p3209
(i__main__
ClassDefinition
p3210
(dp3211
g4
I1
sg5
I01
sg6
g3209
sg7
S'TTreeExampleSplitter'
p3212
sg9
I00
sg10
(lp3213
sg12
(lp3214
sg29
(dp3215
sbsS'TClassifier_Python'
p3216
(i__main__
ClassDefinition
p3217
(dp3218
g4
I1
sg5
I01
sg6
g3216
sg7
S'TClassifier'
p3219
sg9
I00
sg10
(lp3220
sg12
(lp3221
g94
ag99
asg29
(dp3222
sbsS'TFilter_isDefined'
p3223
(i__main__
ClassDefinition
p3224
(dp3225
g4
I1
sg5
I01
sg6
g3223
sg7
S'TFilter'
p3226
sg9
I00
sg10
(lp3227
sg12
(lp3228
(S'TAttributedBoolList'
p3229
S'check'
p3230
g3230
S'tells which attributes to check; checks all if the list is empty'
p3231
I0
I0
I00
Ntp3232
ag696
ag700
asg29
(dp3233
sbsS'TRemoveRedundantByQuality'
p3234
(i__main__
ClassDefinition
p3235
(dp3236
g4
I1
sg5
I01
sg6
g3234
sg7
S'TRemoveRedundant'
p3237
sg9
I00
sg10
(lp3238
sg12
(lp3239
(S'bool'
p3240
S'remeasure'
p3241
g3241
S'reapply the measure after removal'
p3242
I0
I0
I01
Ntp3243
a(S'float'
p3244
S'minQuality'
p3245
S'min_quality'
p3246
S'minimal acceptable quality'
p3247
I0
I0
I01
Ntp3248
a(S'int'
p3249
S'removeBut'
p3250
S'remove_but'
p3251
S'the desired number of attributes'
p3252
I0
I0
I01
Ntp3253
a(S'TMeasureAttribute'
p3254
S'measure'
p3255
g3255
S'attribute quality measure'
p3256
I0
I0
I00
Ntp3257
ag1346
asg29
(dp3258
sbsS'TGraphAsList'
p3259
(i__main__
ClassDefinition
p3260
(dp3261
g4
I1
sg5
I01
sg6
g3259
sg7
S'TGraph'
p3262
sg9
I00
sg10
(lp3263
sg12
(lp3264
g1484
ag1489
ag1493
asg29
(dp3265
sbsS'TProbabilityEstimatorConstructor_m'
p3266
(i__main__
ClassDefinition
p3267
(dp3268
g4
I1
sg5
I01
sg6
g3266
sg7
S'TProbabilityEstimatorConstructor'
p3269
sg9
I00
sg10
(lp3270
sg12
(lp3271
(S'float'
p3272
g1213
g1213
S'parameter m for m-estimation'
p3273
I0
I0
I01
Ntp3274
a(S'bool'
p3275
S'renormalize'
p3276
g3276
S'computes the estimate on the original (not the normalized) distribution'
p3277
I0
I0
I01
Ntp3278
asg29
(dp3279
sbsS'TDistanceMap'
p3280
(i__main__
ClassDefinition
p3281
(dp3282
g4
I1
sg5
I01
sg6
g3280
sg7
S'TOrange'
p3283
sg9
I00
sg10
(lp3284
sg12
(lp3285
(S'int'
p3286
S'dim'
p3287
g3287
S'bitmap dimension (in cells)'
p3288
I01
I0
I01
Ntp3289
a(S'int'
p3290
S'matrixType'
p3291
S'matrix_type'
p3292
S'0 lower, 1 upper, 2 symmetric'
p3293
I0
I0
I01
Ntp3294
a(S'TIntList'
p3295
S'elementIndices'
p3296
S'element_indices'
p3297
S'indices to elements (one for row + one at the end)'
p3298
I01
I0
I00
Ntp3299
asg29
(dp3300
sbsS'TDistanceMapConstructor'
p3301
(i__main__
ClassDefinition
p3302
(dp3303
g4
I1
sg5
I01
sg6
g3301
sg7
S'TOrange'
p3304
sg9
I00
sg10
(lp3305
sg12
(lp3306
(S'TSymMatrix'
p3307
S'distanceMatrix'
p3308
S'distance_matrix'
p3309
S'distance matrix'
p3310
I0
I0
I00
Ntp3311
a(S'TIntList'
p3312
S'order'
p3313
g3313
S'order of elements'
p3314
I0
I0
I00
Ntp3315
asg29
(dp3316
sbsS'TTransformValue'
p3317
(i__main__
ClassDefinition
p3318
(dp3319
g4
I1
sg5
I01
sg6
g3317
sg7
S'TOrange'
p3320
sg9
I01
sg10
(lp3321
sg12
(lp3322
g825
asg29
(dp3323
sbsS'TComputeDomainContingency_DomainTransformation'
p3324
(i__main__
ClassDefinition
p3325
(dp3326
g4
I1
sg5
I01
sg6
g3324
sg7
S'TComputeDomainContingency'
p3327
sg9
I00
sg10
(lp3328
sg12
(lp3329
(S'TDomainTransformerConstructor'
p3330
S'domainTransformerConstructor'
p3331
S'domain_transformer_constructor'
p3332
S'constructs a domain in which each attribute corresponds one of originals'
p3333
I0
I0
I00
Ntp3334
a(S'bool'
p3335
S'resultInOriginalDomain'
p3336
S'result_in_original_domain'
p3337
S'tells whether the resulting DomainContingency should consist of original attributes'
p3338
I0
I0
I01
Ntp3339
ag28
asg29
(dp3340
sbsS'TStopDistributionClustering_noBigChange'
p3341
(i__main__
ClassDefinition
p3342
(dp3343
g4
I1
sg5
I01
sg6
g3341
sg7
S'TStopDistributionClustering'
p3344
sg9
I00
sg10
(lp3345
sg12
(lp3346
sg29
(dp3347
sbsS'TTreePruner'
p3348
(i__main__
ClassDefinition
p3349
(dp3350
g4
I1
sg5
I01
sg6
g3348
sg7
S'TOrange'
p3351
sg9
I01
sg10
(lp3352
sg12
(lp3353
sg29
(dp3354
sbsg1824
(ipyprops
ClassDefinition
p3355
(dp3356
g136
I0
sg137
I01
sg138
g1824
sg139
g140
sg141
I0
sg142
(lp3357
sg144
(lp3358
sg146
(dp3359
sbsS'TStringValue'
p3360
(i__main__
ClassDefinition
p3361
(dp3362
g4
I1
sg5
I01
sg6
g3360
sg7
S'TSomeValue'
p3363
sg9
I00
sg10
(lp3364
sg12
(lp3365
sg29
(dp3366
sbsS'TVarList'
p3367
(ipyprops
ClassDefinition
p3368
(dp3369
g136
I0
sg137
I01
sg138
g3367
sg139
g140
sg141
I0
sg142
(lp3370
sg144
(lp3371
sg146
(dp3372
sbsS'TRuleLearner'
p3373
(i__main__
ClassDefinition
p3374
(dp3375
g4
I1
sg5
I01
sg6
g3373
sg7
S'TLearner'
p3376
sg9
I00
sg10
(lp3377
sg12
(lp3378
(S'TRuleDataStoppingCriteria'
p3379
S'dataStopping'
p3380
S'data_stopping'
p3381
g574
I0
I0
I00
Ntp3382
a(S'TRuleStoppingCriteria'
p3383
S'ruleStopping'
p3384
S'rule_stopping'
p3385
g574
I0
I0
I00
Ntp3386
a(S'TRuleCovererAndRemover'
p3387
S'coverAndRemove'
p3388
S'cover_and_remove'
p3389
g574
I0
I0
I00
Ntp3390
a(S'TRuleFinder'
p3391
S'ruleFinder'
p3392
S'rule_finder'
p3393
g574
I0
I0
I00
Ntp3394
a(S'TRuleClassifierConstructor'
p3395
S'classifierConstructor'
p3396
S'classifier_constructor'
p3397
S'classifier'
p3398
I0
I0
I00
Ntp3399
a(S'TProgressCallback'
p3400
S'progressCallback'
p3401
S'progress_callback'
p3402
S'progress callback function'
p3403
I0
I0
I00
Ntp3404
a(S'bool'
p3405
S'storeExamples'
p3406
S'store_examples'
p3407
g574
I0
I0
I01
Ntp3408
a(S'int'
p3409
S'targetClass'
p3410
S'target_class'
p3411
g574
I0
I0
I01
Ntp3412
a(S'TRuleList'
p3413
S'baseRules'
p3414
S'base_rules'
p3415
g574
I0
I0
I00
Ntp3416
ag110
asg29
(dp3417
sbsS'TOrdinal2Continuous'
p3418
(i__main__
ClassDefinition
p3419
(dp3420
g4
I1
sg5
I01
sg6
g3418
sg7
S'TTransformValue'
p3421
sg9
I00
sg10
(lp3422
sg12
(lp3423
(S'float'
p3424
S'factor'
p3425
g3425
S'number of values'
p3426
I0
I0
I01
Ntp3427
ag825
asg29
(dp3428
sbsS'TMultiLearner'
p3429
(i__main__
ClassDefinition
p3430
(dp3431
g4
I1
sg5
I01
sg6
g3429
sg7
S'TOrange'
p3432
sg9
I00
sg10
(lp3433
sg12
(lp3434
(S'int'
p3435
S'needs'
p3436
g3436
S'the kind of data that learner needs'
p3437
I01
I0
I01
Ntp3438
a(S'TDomain'
p3439
S'domain'
p3440
g3440
S'domain'
p3441
I0
I0
I00
Ntp3442
asg29
(dp3443
sbsS'TLinearLearner'
p3444
(i__main__
ClassDefinition
p3445
(dp3446
g4
I1
sg5
I01
sg6
g3444
sg7
S'TLearner'
p3447
sg9
I00
sg10
(lp3448
sg12
(lp3449
(S'int'
p3450
S'solver_type'
p3451
g3451
S' Solver type (loss function1)'
p3452
I0
I0
I01
S'LinearLearner_Lossfunction1'
p3453
tp3454
a(S'float'
p3455
S'eps'
p3456
g3456
S'Stopping criteria'
p3457
I0
I0
I01
Ntp3458
a(S'float'
p3459
S'C'
p3460
g3460
S'Regularization parameter'
p3461
I0
I0
I01
Ntp3462
a(S'float'
p3463
S'bias'
p3464
g3464
S'bias parameter (default -1.0 - no bias)'
p3465
I0
I0
I01
Ntp3466
ag110
asg29
(dp3467
S'LIBLINEAR_VERSION'
p3468
(lp3469
(S'VERSION'
p3470
S'180'
p3471
tp3472
asS'Lossfunction1'
p3473
(lp3474
(S'L2R_LR'
p3475
I0
tp3476
a(S'L2R_L2Loss_SVC_Dual'
p3477
I1
tp3478
a(S'L2R_L2Loss_SVC'
p3479
I2
tp3480
a(S'L2R_L1Loss_SVC_Dual'
p3481
I3
tp3482
a(S'MCSVM_CS'
p3483
I4
tp3484
a(S'L1R_L2Loss_SVC'
p3485
I5
tp3486
a(S'L1R_LR'
p3487
I6
tp3488
a(S'L2R_LR_Dual'
p3489
I7
tp3490
asS'Lossfunction1_old_'
p3491
(lp3492
(S'L2_LR'
p3493
I0
tp3494
a(S'L2Loss_SVM_Dual'
p3495
I1
tp3496
a(S'L2Loss_SVM'
p3497
I2
tp3498
a(S'L1Loss_SVM_Dual'
p3499
I3
tp3500
assbsS'TTreeSplitConstructor_Combined'
p3501
(i__main__
ClassDefinition
p3502
(dp3503
g4
I1
sg5
I01
sg6
g3501
sg7
S'TTreeSplitConstructor'
p3504
sg9
I00
sg10
(lp3505
sg12
(lp3506
(S'TTreeSplitConstructor'
p3507
S'discreteSplitConstructor'
p3508
S'discrete_split_constructor'
p3509
S'split constructor for discrete attributes'
p3510
I0
I0
I00
Ntp3511
a(S'TTreeSplitConstructor'
p3512
S'continuousSplitConstructor'
p3513
S'continuous_split_constructor'
p3514
S'split constructor for continuous attributes'
p3515
I0
I0
I00
Ntp3516
ag788
asg29
(dp3517
sbsS'TTransformValue_Python'
p3518
(i__main__
ClassDefinition
p3519
(dp3520
g4
I1
sg5
I01
sg6
g3518
sg7
S'TTransformValue'
p3521
sg9
I00
sg10
(lp3522
sg12
(lp3523
g825
asg29
(dp3524
sbsS'TRuleStoppingCriteria_Python'
p3525
(i__main__
ClassDefinition
p3526
(dp3527
g4
I1
sg5
I01
sg6
g3525
sg7
S'TRuleStoppingCriteria'
p3528
sg9
I00
sg10
(lp3529
sg12
(lp3530
sg29
(dp3531
sbsS'TRuleEvaluator_Python'
p3532
(i__main__
ClassDefinition
p3533
(dp3534
g4
I1
sg5
I01
sg6
g3532
sg7
S'TRuleEvaluator'
p3535
sg9
I00
sg10
(lp3536
sg12
(lp3537
sg29
(dp3538
sbsS'TIGBySorting'
p3539
(i__main__
ClassDefinition
p3540
(dp3541
g4
I1
sg5
I01
sg6
g3539
sg7
S'TIGConstructor'
p3542
sg9
I00
sg10
(lp3543
sg12
(lp3544
sg29
(dp3545
sbsS'TConditionalProbabilityEstimator_ByRows'
p3546
(i__main__
ClassDefinition
p3547
(dp3548
g4
I1
sg5
I01
sg6
g3546
sg7
S'TConditionalProbabilityEstimator'
p3549
sg9
I00
sg10
(lp3550
sg12
(lp3551
(S'TProbabilityEstimatorList'
p3552
S'estimatorList'
p3553
S'estimator_list'
p3554
S'A list of probability estimators'
p3555
I0
I0
I00
Ntp3556
ag126
ag131
asg29
(dp3557
sbsS'TFindNearest'
p3558
(i__main__
ClassDefinition
p3559
(dp3560
g4
I1
sg5
I01
sg6
g3558
sg7
S'TOrange'
p3561
sg9
I01
sg10
(lp3562
sg12
(lp3563
g1092
ag1097
asg29
(dp3564
sbsS'TProgressCallback'
p3565
(i__main__
ClassDefinition
p3566
(dp3567
g4
I1
sg5
I01
sg6
g3565
sg7
S'TOrange'
p3568
sg9
I01
sg10
(lp3569
sg12
(lp3570
sg29
(dp3571
sbsS'THierarchicalClustering'
p3572
(i__main__
ClassDefinition
p3573
(dp3574
g4
I1
sg5
I01
sg6
g3572
sg7
S'TOrange'
p3575
sg9
I00
sg10
(lp3576
sg12
(lp3577
(S'int'
p3578
S'linkage'
p3579
g3579
S' linkage'
p3580
I0
I0
I01
S'HierarchicalClustering_Linkage'
p3581
tp3582
a(S'bool'
p3583
S'overwriteMatrix'
p3584
S'overwrite_matrix'
p3585
S'if true (default is false) it will use (and destroy) the distance matrix given as argument'
p3586
I0
I0
I01
Ntp3587
a(S'TProgressCallback'
p3588
S'progressCallback'
p3589
S'progress_callback'
p3590
S'progress callback function'
p3591
I0
I0
I00
Ntp3592
asg29
(dp3593
S'Linkage'
p3594
(lp3595
(S'Single'
p3596
I0
tp3597
a(S'Average'
p3598
I1
tp3599
a(S'Complete'
p3600
I2
tp3601
a(S'Ward'
p3602
I3
tp3603
assbsS'TLogRegFitter_Cholesky'
p3604
(i__main__
ClassDefinition
p3605
(dp3606
g4
I1
sg5
I01
sg6
g3604
sg7
S'TLogRegFitter'
p3607
sg9
I00
sg10
(lp3608
sg12
(lp3609
sg29
(dp3610
sbsS'TClassifierFromVar'
p3611
(i__main__
ClassDefinition
p3612
(dp3613
g4
I1
sg5
I01
sg6
g3611
sg7
S'TClassifier'
p3614
sg9
I00
sg10
(lp3615
sg12
(lp3616
(S'TVariable'
p3617
S'whichVar'
p3618
(g3618
S'variable'
p3619
tp3620
S' variable'
p3621
I0
I0
I00
Ntp3622
a(S'TTransformValue'
p3623
S'transformer'
p3624
g3624
S'transformer'
p3625
I0
I0
I00
Ntp3626
a(S'TDistribution'
p3627
S'distributionForUnknown'
p3628
S'distribution_for_unknown'
p3629
S'distribution for unknown value'
p3630
I0
I0
I00
Ntp3631
a(S'bool'
p3632
S'transformUnknowns'
p3633
S'transform_unknowns'
p3634
S'if false (default), unknowns stay unknown or are changed into distribution if given'
p3635
I0
I0
I01
Ntp3636
ag94
ag99
asg29
(dp3637
sbsg2334
(ipyprops
ClassDefinition
p3638
(dp3639
g136
I0
sg137
I01
sg138
g2334
sg139
g140
sg141
I0
sg142
(lp3640
sg144
(lp3641
sg146
(dp3642
sbsS'TFilter_index'
p3643
(ipyprops
ClassDefinition
p3644
(dp3645
g136
I0
sg137
I01
sg138
g3643
sg139
g140
sg141
I0
sg142
(lp3646
sg144
(lp3647
sg146
(dp3648
sbsS'TIM'
p3649
(i__main__
ClassDefinition
p3650
(dp3651
g4
I1
sg5
I01
sg6
g3649
sg7
S'TOrange'
p3652
sg9
I00
sg10
(lp3653
sg12
(lp3654
(S'int'
p3655
S'varType'
p3656
S'var_type'
p3657
S' class variable type'
p3658
I0
I0
I01
S'Variable_Type'
p3659
tp3660
a(S'TExampleTable'
p3661
S'rowExamples'
p3662
S'row_examples'
p3663
S'examples with free attributes for each row'
p3664
I0
I0
I00
Ntp3665
asg29
(dp3666
sbsS'TTreeSplitConstructor_OneAgainstOthers'
p3667
(i__main__
ClassDefinition
p3668
(dp3669
g4
I1
sg5
I01
sg6
g3667
sg7
S'TTreeSplitConstructor_Measure'
p3670
sg9
I00
sg10
(lp3671
sg12
(lp3672
g1303
ag1308
ag788
asg29
(dp3673
sbsS'TClassifier'
p3674
(i__main__
ClassDefinition
p3675
(dp3676
g4
I1
sg5
I01
sg6
g3674
sg7
S'TOrange'
p3677
sg9
I00
sg10
(lp3678
sg12
(lp3679
g94
ag99
asg29
(dp3680
sbsS'TTreeSplitConstructor_Python'
p3681
(i__main__
ClassDefinition
p3682
(dp3683
g4
I1
sg5
I01
sg6
g3681
sg7
S'TTreeSplitConstructor'
p3684
sg9
I00
sg10
(lp3685
sg12
(lp3686
g788
asg29
(dp3687
sbsS'TIG'
p3688
(i__main__
ClassDefinition
p3689
(dp3690
g4
I1
sg5
I01
sg6
g3688
sg7
S'TOrange'
p3691
sg9
I00
sg10
(lp3692
sg12
(lp3693
sg29
(dp3694
sbsS'TMeasureAttribute_relief'
p3695
(i__main__
ClassDefinition
p3696
(dp3697
g4
I1
sg5
I01
sg6
g3695
sg7
S'TMeasureAttribute'
p3698
sg9
I00
sg10
(lp3699
sg12
(lp3700
(S'float'
p3701
g1209
g1209
S'number of neighbours'
p3702
I0
I0
I01
Ntp3703
a(S'float'
p3704
g1213
g1213
S'number of reference examples'
p3705
I0
I0
I01
Ntp3706
a(S'bool'
p3707
S'checkCachedData'
p3708
S'check_cached_data'
p3709
S'tells whether to check the checksum of the data before reusing the cached neighbours'
p3710
I0
I0
I01
Ntp3711
ag927
ag932
ag937
ag942
asg29
(dp3712
sbsS'TEarthLearner'
p3713
(i__main__
ClassDefinition
p3714
(dp3715
g4
I1
sg5
I01
sg6
g3713
sg7
S'TLearner'
p3716
sg9
I00
sg10
(lp3717
sg12
(lp3718
(S'int'
p3719
S'max_terms'
p3720
g3720
S'Maximum number of terms.'
p3721
I0
I0
I01
Ntp3722
a(S'int'
p3723
S'max_degree'
p3724
g3724
S'Maximum degree of terms.'
p3725
I0
I0
I01
Ntp3726
a(S'float'
p3727
S'penalty'
p3728
g3728
S'Penalty.'
p3729
I0
I0
I01
Ntp3730
a(S'float'
p3731
S'threshold'
p3732
g3732
S'Forward step threshold.'
p3733
I0
I0
I01
Ntp3734
a(S'bool'
p3735
S'prune'
p3736
g3736
S'Prune terms (do backward pass).'
p3737
I0
I0
I01
Ntp3738
a(S'float'
p3739
S'fast_beta'
p3740
g3740
S'Fast beta (aging coefficient).'
p3741
I0
I0
I01
Ntp3742
a(S'float'
p3743
S'trace'
p3744
g3744
S'Execution trace (for debugging only).'
p3745
I0
I0
I01
Ntp3746
a(S'int'
p3747
S'min_span'
p3748
g3748
S'Min. span (training instances) between knots.'
p3749
I0
I0
I01
Ntp3750
a(S'int'
p3751
S'fast_k'
p3752
g3752
S'Fast K.'
p3753
I0
I0
I01
Ntp3754
a(S'bool'
p3755
S'new_var_penalty'
p3756
g3756
S'Penalty for adding a new variable.'
p3757
I0
I0
I01
Ntp3758
a(S'bool'
p3759
S'use_beta_cache'
p3760
g3760
S'Use caching for betas.'
p3761
I0
I0
I01
Ntp3762
ag110
asg29
(dp3763
sbsS'TMeasureAttribute_logOddsRatio'
p3764
(i__main__
ClassDefinition
p3765
(dp3766
g4
I1
sg5
I01
sg6
g3764
sg7
S'TMeasureAttributeFromProbabilities'
p3767
sg9
I00
sg10
(lp3768
sg12
(lp3769
g911
ag916
ag922
ag927
ag932
ag937
ag942
asg29
(dp3770
sbsS'TTreeExampleSplitter_Python'
p3771
(i__main__
ClassDefinition
p3772
(dp3773
g4
I1
sg5
I01
sg6
g3771
sg7
S'TTreeExampleSplitter'
p3774
sg9
I00
sg10
(lp3775
sg12
(lp3776
sg29
(dp3777
sbsS'TKernelFunc_Python'
p3778
(i__main__
ClassDefinition
p3779
(dp3780
g4
I1
sg5
I01
sg6
g3778
sg7
S'TKernelFunc'
p3781
sg9
I00
sg10
(lp3782
sg12
(lp3783
sg29
(dp3784
sbsS'TAdapterGenerator'
p3785
(i__main__
ClassDefinition
p3786
(dp3787
g4
I1
sg5
I01
sg6
g3785
sg7
S'TExampleGenerator'
p3788
sg9
I00
sg10
(lp3789
sg12
(lp3790
g307
ag311
asg29
(dp3791
sbsS'TIMFromExamples'
p3792
(i__main__
ClassDefinition
p3793
(dp3794
g4
I1
sg5
I01
sg6
g3792
sg7
S'TOrange'
p3795
sg9
I01
sg10
(lp3796
sg12
(lp3797
sg29
(dp3798
sbsS'TFilter_random'
p3799
(i__main__
ClassDefinition
p3800
(dp3801
g4
I1
sg5
I01
sg6
g3799
sg7
S'TFilter'
p3802
sg9
I00
sg10
(lp3803
sg12
(lp3804
(S'float'
p3805
S'prob'
p3806
g3806
S'probability of selecting an example'
p3807
I0
I0
I01
Ntp3808
a(S'TRandomGenerator'
p3809
S'randomGenerator'
p3810
S'random_generator'
p3811
S'random generator'
p3812
I0
I0
I00
Ntp3813
ag696
ag700
asg29
(dp3814
sbsS'TC45ExampleGenerator'
p3815
(i__main__
ClassDefinition
p3816
(dp3817
g4
I1
sg5
I01
sg6
g3815
sg7
S'TFileExampleGenerator'
p3818
sg9
I00
sg10
(lp3819
sg12
(lp3820
(S'TBoolList'
p3821
S'skip'
p3822
g3822
S'a boolean list, one element per attribute, denoting which attributes to skip'
p3823
I0
I0
I00
Ntp3824
ag1649
ag1654
ag1659
ag307
ag311
asg29
(dp3825
sbsS'TProbabilityEstimatorConstructor_loess'
p3826
(i__main__
ClassDefinition
p3827
(dp3828
g4
I1
sg5
I01
sg6
g3826
sg7
S'TProbabilityEstimatorConstructor'
p3829
sg9
I00
sg10
(lp3830
sg12
(lp3831
(S'float'
p3832
S'windowProportion'
p3833
S'window_proportion'
p3834
S'The proportion of points in a window for LR'
p3835
I0
I0
I01
Ntp3836
a(S'int'
p3837
S'nPoints'
p3838
S'n_points'
p3839
S'The number of points on curve (negative means the given number of points is inserted in each interval)'
p3840
I0
I0
I01
Ntp3841
a(S'int'
p3842
S'distributionMethod'
p3843
S'distribution_method'
p3844
S" Meaning of the 'nPoints'"
p3845
I0
I0
I01
S'ProbabilityEstimatorConstructor_loess_DistributionMethod'
p3846
tp3847
asg29
(dp3848
S'DistributionMethod'
p3849
(lp3850
(S'Minimal'
p3851
S'DISTRIBUTE_MINIMAL'
p3852
tp3853
a(S'Factor'
p3854
S'DISTRIBUTE_FACTOR'
p3855
tp3856
a(S'Fixed'
p3857
S'DISTRIBUTE_FIXED'
p3858
tp3859
a(S'Uniform'
p3860
S'DISTRIBUTE_UNIFORM'
p3861
tp3862
a(S'Maximal'
p3863
S'DISTRIBUTE_MAXIMAL'
p3864
tp3865
assbsS'TExamplesDistance_Lp'
p3866
(i__main__
ClassDefinition
p3867
(dp3868
g4
I1
sg5
I01
sg6
g3866
sg7
S'TExamplesDistance_Normalized'
p3869
sg9
I00
sg10
(lp3870
sg12
(lp3871
(S'float'
p3872
g2278
g2278
g2278
I01
I0
I01
Ntp3873
ag455
ag459
ag463
ag467
ag472
ag476
ag481
asg29
(dp3874
sbsS'TLogRegFitter'
p3875
(i__main__
ClassDefinition
p3876
(dp3877
g4
I1
sg5
I01
sg6
g3875
sg7
S'TOrange'
p3878
sg9
I01
sg10
(lp3879
sg12
(lp3880
sg29
(dp3881
S'ErrorCode'
p3882
(lp3883
(S'OK'
p3884
I0
tp3885
a(S'Infinity'
p3886
I1
tp3887
a(S'Divergence'
p3888
I2
tp3889
a(S'Constant'
p3890
I3
tp3891
a(S'Singularity'
p3892
I4
tp3893
assbsS'TProbabilityEstimatorList'
p3894
(ipyprops
ClassDefinition
p3895
(dp3896
g136
I0
sg137
I01
sg138
g3894
sg139
g140
sg141
I0
sg142
(lp3897
sg144
(lp3898
sg146
(dp3899
sbsS'TMakeRandomIndicesCV'
p3900
(i__main__
ClassDefinition
p3901
(dp3902
g4
I1
sg5
I01
sg6
g3900
sg7
S'TMakeRandomIndices'
p3903
sg9
I00
sg10
(lp3904
sg12
(lp3905
(S'int'
p3906
S'folds'
p3907
g3907
S'number of folds'
p3908
I0
I0
I01
Ntp3909
ag719
ag723
ag728
asg29
(dp3910
sbsS'TClassifierList'
p3911
(ipyprops
ClassDefinition
p3912
(dp3913
g136
I0
sg137
I01
sg138
g3911
sg139
g140
sg141
I0
sg142
(lp3914
sg144
(lp3915
sg146
(dp3916
sbsS'TPreprocessor_removeDuplicates'
p3917
(i__main__
ClassDefinition
p3918
(dp3919
g4
I1
sg5
I01
sg6
g3917
sg7
S'TPreprocessor'
p3920
sg9
I00
sg10
(lp3921
sg12
(lp3922
sg29
(dp3923
sbsS'TTreeExampleSplitter_UnknownsAsBranchSizes'
p3924
(i__main__
ClassDefinition
p3925
(dp3926
g4
I1
sg5
I01
sg6
g3924
sg7
S'TTreeExampleSplitter'
p3927
sg9
I00
sg10
(lp3928
sg12
(lp3929
sg29
(dp3930
sbsS'TExamplesDistanceConstructor_Normalized'
p3931
(i__main__
ClassDefinition
p3932
(dp3933
g4
I1
sg5
I01
sg6
g3931
sg7
S'TExamplesDistanceConstructor'
p3934
sg9
I01
sg10
(lp3935
sg12
(lp3936
g2112
ag2117
ag1368
asg29
(dp3937
sbsS'TCostWrapperLearner'
p3938
(i__main__
ClassDefinition
p3939
(dp3940
g4
I1
sg5
I01
sg6
g3938
sg7
S'TLearner'
p3941
sg9
I00
sg10
(lp3942
sg12
(lp3943
(S'TLearner'
p3944
S'basicLearner'
p3945
S'basic_learner'
p3946
S'basic learner'
p3947
I0
I0
I00
Ntp3948
a(S'TCostMatrix'
p3949
S'costMatrix'
p3950
S'cost_matrix'
p3951
S'cost matrix'
p3952
I0
I0
I00
Ntp3953
ag110
asg29
(dp3954
sbsS'TRandomLearner'
p3955
(i__main__
ClassDefinition
p3956
(dp3957
g4
I1
sg5
I01
sg6
g3955
sg7
S'TLearner'
p3958
sg9
I00
sg10
(lp3959
sg12
(lp3960
(S'TDistribution'
p3961
S'probabilities'
p3962
g3962
S'probabilities of predictions'
p3963
I0
I0
I00
Ntp3964
ag110
asg29
(dp3965
sbsS'TImputer_asValue'
p3966
(i__main__
ClassDefinition
p3967
(dp3968
g4
I1
sg5
I01
sg6
g3966
sg7
S'TImputer'
p3969
sg9
I00
sg10
(lp3970
sg12
(lp3971
(S'TDomain'
p3972
S'domain'
p3973
g3973
S'domain to which the values are converted'
p3974
I0
I0
I00
Ntp3975
a(S'TExample'
p3976
S'defaults'
p3977
g3977
S'values to impute instead of missing ones - for continuous attributes only!'
p3978
I0
I0
I00
Ntp3979
asg29
(dp3980
sbsS'TPearsonCorrelation'
p3981
(i__main__
ClassDefinition
p3982
(dp3983
g4
I1
sg5
I01
sg6
g3981
sg7
S'TOrange'
p3984
sg9
I00
sg10
(lp3985
sg12
(lp3986
(S'float'
p3987
S'r'
p3988
g3988
S'correlation coefficient'
p3989
I0
I0
I01
Ntp3990
a(S'float'
p3991
g2307
g2307
S't-statics significance'
p3992
I0
I0
I01
Ntp3993
a(S'int'
p3994
S'df'
p3995
g3995
S'degrees of freedom'
p3996
I0
I0
I01
Ntp3997
a(S'float'
p3998
g2278
g2278
S'significance'
p3999
I0
I0
I01
Ntp4000
asg29
(dp4001
sbsS'TDistributionAssessor_Laplace'
p4002
(i__main__
ClassDefinition
p4003
(dp4004
g4
I1
sg5
I01
sg6
g4002
sg7
S'TDistributionAssessor'
p4005
sg9
I00
sg10
(lp4006
sg12
(lp4007
sg29
(dp4008
sbsS'TColumnAssessor_Relief'
p4009
(i__main__
ClassDefinition
p4010
(dp4011
g4
I1
sg5
I01
sg6
g4009
sg7
S'TColumnAssessor'
p4012
sg9
I00
sg10
(lp4013
sg12
(lp4014
sg29
(dp4015
sbsS'TClassifierByLookupTable'
p4016
(i__main__
ClassDefinition
p4017
(dp4018
g4
I1
sg5
I01
sg6
g4016
sg7
S'TClassifier'
p4019
sg9
I01
sg10
(lp4020
sg12
(lp4021
g85
ag89
ag94
ag99
asg29
(dp4022
sbsS'TRuleBeamFinder'
p4023
(i__main__
ClassDefinition
p4024
(dp4025
g4
I1
sg5
I01
sg6
g4023
sg7
S'TRuleFinder'
p4026
sg9
I00
sg10
(lp4027
sg12
(lp4028
(S'TRuleBeamInitializer'
p4029
S'initializer'
p4030
g4030
g574
I0
I0
I00
Ntp4031
a(S'TRuleBeamRefiner'
p4032
S'refiner'
p4033
g4033
g574
I0
I0
I00
Ntp4034
a(S'TRuleBeamCandidateSelector'
p4035
S'candidateSelector'
p4036
S'candidate_selector'
p4037
g574
I0
I0
I00
Ntp4038
a(S'TRuleBeamFilter'
p4039
S'ruleFilter'
p4040
S'rule_filter'
p4041
g574
I0
I0
I00
Ntp4042
a(S'TRuleValidator'
p4043
S'ruleStoppingValidator'
p4044
S'rule_stopping_validator'
p4045
g574
I0
I0
I00
Ntp4046
a(S'TRuleValidator'
p4047
S'validator'
p4048
g4048
g574
I0
I0
I00
Ntp4049
a(S'TRuleEvaluator'
p4050
S'evaluator'
p4051
g4051
g574
I0
I0
I00
Ntp4052
asg29
(dp4053
sbsS'TC45Classifier'
p4054
(i__main__
ClassDefinition
p4055
(dp4056
g4
I1
sg5
I01
sg6
g4054
sg7
S'TClassifierFD'
p4057
sg9
I00
sg10
(lp4058
sg12
(lp4059
(S'TC45TreeNode'
p4060
S'tree'
p4061
g4061
S'tree'
p4062
I0
I0
I00
Ntp4063
ag292
ag94
ag99
asg29
(dp4064
sbsS'TGeneralExampleClustering'
p4065
(i__main__
ClassDefinition
p4066
(dp4067
g4
I1
sg5
I01
sg6
g4065
sg7
S'TOrange'
p4068
sg9
I01
sg10
(lp4069
sg12
(lp4070
sg29
(dp4071
sbsS'TMeasureAttribute_cost'
p4072
(i__main__
ClassDefinition
p4073
(dp4074
g4
I1
sg5
I01
sg6
g4072
sg7
S'TMeasureAttributeFromProbabilities'
p4075
sg9
I00
sg10
(lp4076
sg12
(lp4077
(S'TCostMatrix'
p4078
S'cost'
p4079
g4079
S'cost matrix'
p4080
I0
I0
I00
Ntp4081
ag911
ag916
ag922
ag927
ag932
ag937
ag942
asg29
(dp4082
sbsS'TImputerConstructor_minimal'
p4083
(i__main__
ClassDefinition
p4084
(dp4085
g4
I1
sg5
I01
sg6
g4083
sg7
S'TImputerConstructor'
p4086
sg9
I00
sg10
(lp4087
sg12
(lp4088
g165
asg29
(dp4089
sbsS'TClustersFromIM'
p4090
(i__main__
ClassDefinition
p4091
(dp4092
g4
I1
sg5
I01
sg6
g4090
sg7
S'TOrange'
p4093
sg9
I01
sg10
(lp4094
sg12
(lp4095
sg29
(dp4096
sbsS'TFilter_values'
p4097
(i__main__
ClassDefinition
p4098
(dp4099
g4
I1
sg5
I01
sg6
g4097
sg7
S'TFilter'
p4100
sg9
I00
sg10
(lp4101
sg12
(lp4102
(S'TValueFilterList'
p4103
S'conditions'
p4104
g4104
S'a list of filters'
p4105
I0
I0
I00
Ntp4106
a(S'bool'
p4107
S'conjunction'
p4108
g4108
S'if true, filter computes conjunction, otherwise disjunction'
p4109
I0
I0
I01
Ntp4110
ag696
ag700
asg29
(dp4111
S'Operator'
p4112
(lp4113
(S'None'
p4114
I0
tp4115
a(S'Equal'
p4116
I1
tp4117
a(S'NotEqual'
p4118
I2
tp4119
a(S'Less'
p4120
I3
tp4121
a(S'LessEqual'
p4122
I4
tp4123
a(S'Greater'
p4124
I5
tp4125
a(S'GreaterEqual'
p4126
I6
tp4127
a(S'Between'
p4128
I7
tp4129
a(S'Outside'
p4130
I8
tp4131
a(S'Contains'
p4132
I9
tp4133
a(S'NotContains'
p4134
I10
tp4135
a(S'BeginsWith'
p4136
I11
tp4137
a(S'EndsWith'
p4138
I12
tp4139
a(S'Listed'
p4140
I13
tp4141
assbsS'TRuleClassifier'
p4142
(i__main__
ClassDefinition
p4143
(dp4144
g4
I1
sg5
I01
sg6
g4142
sg7
S'TClassifier'
p4145
sg9
I01
sg10
(lp4146
sg12
(lp4147
g606
ag609
ag613
ag94
ag99
asg29
(dp4148
sbsS'TAssociationRules'
p4149
(ipyprops
ClassDefinition
p4150
(dp4151
g136
I0
sg137
I01
sg138
g4149
sg139
g140
sg141
I0
sg142
(lp4152
sg144
(lp4153
sg146
(dp4154
sbsS'TSymMatrix'
p4155
(i__main__
ClassDefinition
p4156
(dp4157
g4
I1
sg5
I01
sg6
g4155
sg7
S'TOrange'
p4158
sg9
I00
sg10
(lp4159
sg12
(lp4160
(S'int'
p4161
S'dim'
p4162
g4162
S'matrix dimension'
p4163
I01
I0
I01
Ntp4164
a(S'int'
p4165
S'matrixType'
p4166
S'matrix_type'
p4167
S' 0 lower, 1 upper, 2 symmetric, 3 lower_filled, 4 upper_filled'
p4168
I0
I0
I01
S'SymMatrix_Shape'
p4169
tp4170
asg29
(dp4171
S'Shape'
p4172
(lp4173
(S'Lower'
p4174
I0
tp4175
a(S'Upper'
p4176
I1
tp4177
a(S'Symmetric'
p4178
I2
tp4179
a(S'LowerFilled'
p4180
I3
tp4181
a(S'UpperFilled'
p4182
I4
tp4183
assbsS'TSVMLearner'
p4184
(i__main__
ClassDefinition
p4185
(dp4186
g4
I1
sg5
I01
sg6
g4184
sg7
S'TLearner'
p4187
sg9
I00
sg10
(lp4188
sg12
(lp4189
(S'int'
p4190
S'svm_type'
p4191
g4191
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p4192
I0
I0
I01
S'SVMLearner_SVMType'
p4193
tp4194
a(S'int'
p4195
S'kernel_type'
p4196
g4196
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p4197
I0
I0
I01
S'SVMLearner_Kernel'
p4198
tp4199
a(S'float'
p4200
S'degree'
p4201
g4201
S'polynomial kernel degree'
p4202
I0
I0
I01
Ntp4203
a(S'float'
p4204
S'gamma'
p4205
g4205
S'poly/rbf/sigm parameter'
p4206
I0
I0
I01
Ntp4207
a(S'float'
p4208
S'coef0'
p4209
g4209
S'poly/sigm parameter'
p4210
I0
I0
I01
Ntp4211
a(S'float'
p4212
S'cache_size'
p4213
g4213
S'cache size in MB'
p4214
I0
I0
I01
Ntp4215
a(S'float'
p4216
S'eps'
p4217
g4217
S'stopping criteria'
p4218
I0
I0
I01
Ntp4219
a(S'float'
p4220
g3460
g3460
S'for C_SVC and C_SVR'
p4221
I0
I0
I01
Ntp4222
a(S'float'
p4223
S'nu'
p4224
g4224
S'for NU_SVC and ONE_CLASS'
p4225
I0
I0
I01
Ntp4226
a(S'float'
p4227
g2278
g2278
S'for C_SVR'
p4228
I0
I0
I01
Ntp4229
a(S'int'
p4230
S'shrinking'
p4231
g4231
S'shrinking'
p4232
I0
I0
I01
Ntp4233
a(S'int'
p4234
S'probability'
p4235
g4235
S'probability'
p4236
I0
I0
I01
Ntp4237
a(S'bool'
p4238
S'verbose'
p4239
g4239
S'verbose'
p4240
I0
I0
I01
Ntp4241
a(S'TKernelFunc'
p4242
S'kernelFunc'
p4243
S'kernel_func'
p4244
S'custom kernel function'
p4245
I0
I0
I00
Ntp4246
ag110
asg29
(dp4247
S'Kernel'
p4248
(lp4249
(S'Linear'
p4250
S'LINEAR'
p4251
tp4252
a(S'Polynomial'
p4253
S'POLY'
p4254
tp4255
a(S'RBF'
p4256
S'RBF'
p4257
tp4258
a(S'Sigmoid'
p4259
S'SIGMOID'
p4260
tp4261
a(S'Custom'
p4262
S'PRECOMPUTED'
p4263
tp4264
asS'LIBSVM_VERSION'
p4265
(lp4266
(S'VERSION'
p4267
S'LIBSVM_VERSION'
p4268
tp4269
asS'SVMType'
p4270
(lp4271
(S'C_SVC'
p4272
S'C_SVC'
p4273
tp4274
a(S'Nu_SVC'
p4275
S'NU_SVC'
p4276
tp4277
a(S'OneClass'
p4278
S'ONE_CLASS'
p4279
tp4280
a(S'Epsilon_SVR'
p4281
S'EPSILON_SVR'
p4282
tp4283
a(S'Nu_SVR'
p4284
S'NU_SVR'
p4285
tp4286
assbsS'TPNN'
p4287
(i__main__
ClassDefinition
p4288
(dp4289
g4
I1
sg5
I01
sg6
g4287
sg7
S'TClassifierFD'
p4290
sg9
I00
sg10
(lp4291
sg12
(lp4292
g750
ag754
ag758
ag762
ag767
ag772
ag776
ag292
ag94
ag99
asg29
(dp4293
sbsS'TImputerConstructor_defaults'
p4294
(i__main__
ClassDefinition
p4295
(dp4296
g4
I1
sg5
I01
sg6
g4294
sg7
S'TImputerConstructor'
p4297
sg9
I00
sg10
(lp4298
sg12
(lp4299
(S'TExample'
p4300
S'defaults'
p4301
g4301
S'default values to be imputed instead missing ones'
p4302
I0
I0
I00
Ntp4303
ag165
asg29
(dp4304
sbsS'TConditionalProbabilityEstimatorConstructor'
p4305
(i__main__
ClassDefinition
p4306
(dp4307
g4
I1
sg5
I01
sg6
g4305
sg7
S'TOrange'
p4308
sg9
I01
sg10
(lp4309
sg12
(lp4310
sg29
(dp4311
sbsS'TPreprocessor_takeMissingClasses'
p4312
(i__main__
ClassDefinition
p4313
(dp4314
g4
I1
sg5
I01
sg6
g4312
sg7
S'TPreprocessor'
p4315
sg9
I00
sg10
(lp4316
sg12
(lp4317
sg29
(dp4318
sbsS'TClustersFromIMByAssessor'
p4319
(i__main__
ClassDefinition
p4320
(dp4321
g4
I1
sg5
I01
sg6
g4319
sg7
S'TClustersFromIM'
p4322
sg9
I00
sg10
(lp4323
sg12
(lp4324
(S'TColumnAssessor'
p4325
S'columnAssessor'
p4326
S'column_assessor'
p4327
S'column quality assessor'
p4328
I0
I0
I00
Ntp4329
a(S'TStopIMClusteringByAssessor'
p4330
S'stopCriterion'
p4331
S'stop_criterion'
p4332
S'stop criterion'
p4333
I0
I0
I00
Ntp4334
asg29
(dp4335
sbsS'TRuleValidator_LRS'
p4336
(i__main__
ClassDefinition
p4337
(dp4338
g4
I1
sg5
I01
sg6
g4336
sg7
S'TRuleValidator'
p4339
sg9
I00
sg10
(lp4340
sg12
(lp4341
(S'float'
p4342
S'alpha'
p4343
g4343
g574
I0
I0
I01
Ntp4344
a(S'float'
p4345
S'min_coverage'
p4346
g4346
g574
I0
I0
I01
Ntp4347
a(S'int'
p4348
S'max_rule_complexity'
p4349
g4349
g574
I0
I0
I01
Ntp4350
a(S'float'
p4351
S'min_quality'
p4352
g4352
g574
I0
I0
I01
Ntp4353
asg29
(dp4354
sbsS'TLogRegFitter_Python'
p4355
(i__main__
ClassDefinition
p4356
(dp4357
g4
I1
sg5
I01
sg6
g4355
sg7
S'TLogRegFitter'
p4358
sg9
I00
sg10
(lp4359
sg12
(lp4360
sg29
(dp4361
sbsS'TEarthClassifier'
p4362
(i__main__
ClassDefinition
p4363
(dp4364
g4
I1
sg5
I01
sg6
g4362
sg7
S'TClassifierFD'
p4365
sg9
I00
sg10
(lp4366
sg12
(lp4367
(S'int'
p4368
S'num_preds'
p4369
g4369
S'Number of predictor variables'
p4370
I0
I0
I01
Ntp4371
a(S'int'
p4372
S'num_terms'
p4373
g4373
S'Number of used terms'
p4374
I0
I0
I01
Ntp4375
a(S'int'
p4376
S'max_terms'
p4377
g4377
S'Maximum number of terms'
p4378
I0
I0
I01
Ntp4379
a(S'int'
p4380
S'num_responses'
p4381
g4381
S'Number of response variables'
p4382
I0
I0
I01
Ntp4383
a(S'TBoolList'
p4384
S'best_set'
p4385
g4385
S'Used terms.'
p4386
I0
I0
I00
Ntp4387
a(S'TFloatListList'
p4388
S'dirs'
p4389
g4389
S'max_preds x num_preds matrix'
p4390
I0
I0
I00
Ntp4391
a(S'TFloatListList'
p4392
S'cuts'
p4393
g4393
S'max_preds x num_preds matrix of cuts'
p4394
I0
I0
I00
Ntp4395
a(S'TFloatList'
p4396
S'betas'
p4397
g4397
S'Term coefficients;'
p4398
I0
I0
I00
Ntp4399
ag292
ag94
ag99
asg29
(dp4400
sbsS'TValueList'
p4401
(ipyprops
ClassDefinition
p4402
(dp4403
g136
I0
sg137
I01
sg138
S'TValueList'
p4404
sg139
g140
sg141
I0
sg142
(lp4405
sg144
(lp4406
sg146
(dp4407
sbsS'TTreeExampleSplitter_UnknownsToCommon'
p4408
(i__main__
ClassDefinition
p4409
(dp4410
g4
I1
sg5
I01
sg6
g4408
sg7
S'TTreeExampleSplitter'
p4411
sg9
I00
sg10
(lp4412
sg12
(lp4413
sg29
(dp4414
sbsS'TContDistribution'
p4415
(i__main__
ClassDefinition
p4416
(dp4417
g4
I1
sg5
I01
sg6
g4415
sg7
S'TDistribution'
p4418
sg9
I00
sg10
(lp4419
sg12
(lp4420
(S'TFloatList'
p4421
S'variances'
p4422
g4422
S'variances'
p4423
I0
I0
I00
Ntp4424
a(S'float'
p4425
S'sum'
p4426
g4426
S'weighted sum of elements (i.e. N*average)'
p4427
I01
I0
I01
Ntp4428
a(S'float'
p4429
S'sum2'
p4430
g4430
S'weighted sum of squares of elements'
p4431
I01
I0
I01
Ntp4432
ag1133
ag1137
ag1141
ag1145
ag1149
ag1154
ag1159
ag1164
asg29
(dp4433
sbsS'TTreeDescender_UnknownMergeAsSelector'
p4434
(i__main__
ClassDefinition
p4435
(dp4436
g4
I1
sg5
I01
sg6
g4434
sg7
g1593
sg9
I0
sg10
(lp4437
sg12
(lp4438
sg29
(dp4439
sbsS'TContingencyAttrClass'
p4440
(i__main__
ClassDefinition
p4441
(dp4442
g4
I1
sg5
I01
sg6
g4440
sg7
S'TContingencyClass'
p4443
sg9
I00
sg10
(lp4444
sg12
(lp4445
g1678
ag1683
ag1689
ag1694
ag1699
ag1704
asg29
(dp4446
sbsS'TDomainTransformerConstructor'
p4447
(i__main__
ClassDefinition
p4448
(dp4449
g4
I1
sg5
I01
sg6
g4447
sg7
S'TOrange'
p4450
sg9
I01
sg10
(lp4451
sg12
(lp4452
(S'bool'
p4453
S'preservesOrder'
p4454
S'preserves_order'
p4455
S'a flag telling that original attributes have corresponding attribute in the same order'
p4456
I01
I0
I01
Ntp4457
a(S'bool'
p4458
S'preservesAttributes'
p4459
S'preserves_attributes'
p4460
S'a flag telling whether each original has a corresponding new attribute'
p4461
I01
I0
I01
Ntp4462
asg29
(dp4463
sbsS'TPythonValueSpecial'
p4464
(i__main__
ClassDefinition
p4465
(dp4466
g4
I1
sg5
I01
sg6
g4464
sg7
S'TOrange'
p4467
sg9
I00
sg10
(lp4468
sg12
(lp4469
(S'int'
p4470
S'valueType'
p4471
S'value_type'
p4472
S'value type'
p4473
I0
I0
I01
Ntp4474
asg29
(dp4475
sbsS'TIGConstructor'
p4476
(i__main__
ClassDefinition
p4477
(dp4478
g4
I1
sg5
I01
sg6
g4476
sg7
S'TOrange'
p4479
sg9
I01
sg10
(lp4480
sg12
(lp4481
sg29
(dp4482
sbsS'TProbabilityEstimatorConstructor'
p4483
(i__main__
ClassDefinition
p4484
(dp4485
g4
I1
sg5
I01
sg6
g4483
sg7
S'TOrange'
p4486
sg9
I01
sg10
(lp4487
sg12
(lp4488
sg29
(dp4489
sbsS'TTreeNodeList'
p4490
(ipyprops
ClassDefinition
p4491
(dp4492
g136
I0
sg137
I01
sg138
g4490
sg139
g140
sg141
I0
sg142
(lp4493
sg144
(lp4494
sg146
(dp4495
sbsS'TFloatVariable'
p4496
(i__main__
ClassDefinition
p4497
(dp4498
g4
I1
sg5
I01
sg6
g4496
sg7
S'TVariable'
p4499
sg9
I00
sg10
(lp4500
sg12
(lp4501
(S'float'
p4502
S'startValue'
p4503
S'start_value'
p4504
S'lowest value'
p4505
I0
I0
I01
Ntp4506
a(S'float'
p4507
S'endValue'
p4508
S'end_value'
p4509
S'highest value'
p4510
I0
I0
I01
Ntp4511
a(S'float'
p4512
S'stepValue'
p4513
S'step_value'
p4514
S'step'
p4515
I0
I0
I01
Ntp4516
a(S'int'
p4517
S'numberOfDecimals'
p4518
S'number_of_decimals'
p4519
S'number of digits after decimal point'
p4520
I0
I0
I01
Ntp4521
a(S'bool'
p4522
S'scientificFormat'
p4523
S'scientific_format'
p4524
S'use scientific format in output'
p4525
I0
I0
I01
Ntp4526
a(S'int'
p4527
S'adjustDecimals'
p4528
S'adjust_decimals'
p4529
S"adjust number of decimals according to the values converted (0 - no, 1 - yes, 2 - yes, but haven't seen any yet)"
p4530
I0
I0
I01
Ntp4531
ag334
ag338
ag342
ag347
ag352
ag357
ag362
asg29
(dp4532
sbsS'TImputer_random'
p4533
(i__main__
ClassDefinition
p4534
(dp4535
g4
I1
sg5
I01
sg6
g4533
sg7
S'TImputer'
p4536
sg9
I00
sg10
(lp4537
sg12
(lp4538
(S'bool'
p4539
S'imputeClass'
p4540
S'impute_class'
p4541
S'Tells whether to impute the class values, too (default: true)'
p4542
I0
I0
I01
Ntp4543
a(S'bool'
p4544
S'deterministic'
p4545
g4545
S"tells whether to initialize random by example's CRC (default: false)"
p4546
I0
I0
I01
Ntp4547
a(S'TDistributionList'
p4548
S'distributions'
p4549
g4549
S'probability functions'
p4550
I0
I0
I00
Ntp4551
asg29
(dp4552
sbsS'TFilter_hasMeta'
p4553
(i__main__
ClassDefinition
p4554
(dp4555
g4
I1
sg5
I01
sg6
g4553
sg7
S'TFilter'
p4556
sg9
I00
sg10
(lp4557
sg12
(lp4558
(S'int'
p4559
S'id'
p4560
g4560
S'meta attribute id'
p4561
I0
I0
I01
Ntp4562
ag696
ag700
asg29
(dp4563
sbsS'TProbabilityEstimatorConstructor_kernel'
p4564
(i__main__
ClassDefinition
p4565
(dp4566
g4
I1
sg5
I01
sg6
g4564
sg7
S'TProbabilityEstimatorConstructor'
p4567
sg9
I00
sg10
(lp4568
sg12
(lp4569
(S'float'
p4570
S'minImpact'
p4571
S'min_impact'
p4572
S'Minimal impact the point must have to be counted'
p4573
I0
I0
I01
Ntp4574
a(S'float'
p4575
S'smoothing'
p4576
g4576
S'Smoothing factor'
p4577
I0
I0
I01
Ntp4578
a(S'int'
p4579
S'nPoints'
p4580
S'n_points'
p4581
S'Number of points for curve (negative means the given number of points is inserted in each interval)'
p4582
I0
I0
I01
Ntp4583
asg29
(dp4584
sbsS'TRuleCovererAndRemover_Default'
p4585
(i__main__
ClassDefinition
p4586
(dp4587
g4
I1
sg5
I01
sg6
g4585
sg7
S'TRuleCovererAndRemover'
p4588
sg9
I00
sg10
(lp4589
sg12
(lp4590
sg29
(dp4591
sbsS'TMakeRandomIndices'
p4592
(i__main__
ClassDefinition
p4593
(dp4594
g4
I1
sg5
I01
sg6
g4592
sg7
S'TOrange'
p4595
sg9
I00
sg10
(lp4596
sg12
(lp4597
g719
ag723
ag728
asg29
(dp4598
S'Stratification'
p4599
(lp4600
(S'StratifiedIfPossible'
p4601
S'-1'
p4602
tp4603
a(S'NotStratified'
p4604
I0
tp4605
a(S'Stratified'
p4606
I1
tp4607
assbsS'TFilter_Python'
p4608
(i__main__
ClassDefinition
p4609
(dp4610
g4
I1
sg5
I01
sg6
g4608
sg7
S'TFilter'
p4611
sg9
I00
sg10
(lp4612
sg12
(lp4613
g696
ag700
asg29
(dp4614
sbsS'TRuleBeamInitializer_Default'
p4615
(i__main__
ClassDefinition
p4616
(dp4617
g4
I1
sg5
I01
sg6
g4615
sg7
S'TRuleBeamInitializer'
p4618
sg9
I00
sg10
(lp4619
sg12
(lp4620
sg29
(dp4621
sbsS'TExamplesDistanceConstructor_Python'
p4622
(i__main__
ClassDefinition
p4623
(dp4624
g4
I1
sg5
I01
sg6
g4622
sg7
S'TExamplesDistanceConstructor'
p4625
sg9
I00
sg10
(lp4626
sg12
(lp4627
g1368
asg29
(dp4628
sbsS'TTreeDescender_Python'
p4629
(i__main__
ClassDefinition
p4630
(dp4631
g4
I1
sg5
I01
sg6
g4629
sg7
S'TTreeDescender'
p4632
sg9
I00
sg10
(lp4633
sg12
(lp4634
sg29
(dp4635
sbsS'THeatmap'
p4636
(i__main__
ClassDefinition
p4637
(dp4638
S'extended'
p4639
I1
sS'imported'
p4640
I0
sS'name'
p4641
g4636
sS'parent'
p4642
S'TOrange'
p4643
sS'abstract'
p4644
I00
sS'components'
p4645
(lp4646
sS'properties'
p4647
(lp4648
(S'int'
p4649
S'height'
p4650
g4650
S'bitmap height (in cells)'
p4651
I0
I0
I01
Ntp4652
a(S'int'
p4653
S'width'
p4654
g4654
S'bitmap width (in cells)'
p4655
I0
I0
I01
Ntp4656
a(S'TExampleTable'
p4657
S'examples'
p4658
g4658
S'examples from the whole bitmap'
p4659
I01
I0
I00
Ntp4660
a(S'TIntList'
p4661
S'exampleIndices'
p4662
S'example_indices'
p4663
S"indices to 'examples' (one for row + one at the end)"
p4664
I01
I0
I00
Ntp4665
asS'constants'
p4666
(dp4667
sbsS'TSubsetsGenerator_constant'
p4668
(i__main__
ClassDefinition
p4669
(dp4670
g4
I1
sg5
I01
sg6
g4668
sg7
S'TSubsetsGenerator'
p4671
sg9
I00
sg10
(lp4672
sg12
(lp4673
(S'TVarList'
p4674
S'constant'
p4675
g4675
S'a subset that is returned (once!)'
p4676
I0
I0
I00
Ntp4677
ag208
asg29
(dp4678
sbsS'TGaussianNoiseGenerator'
p4679
(i__main__
ClassDefinition
p4680
(dp4681
g4
I1
sg5
I01
sg6
g4679
sg7
S'TChangeExampleGenerator'
p4682
sg9
I00
sg10
(lp4683
sg12
(lp4684
(S'TIntFloatList'
p4685
S'deviations'
p4686
g4686
S"deviations for attributes' values"
p4687
I0
I0
I00
Ntp4688
a(S'TRandomGenerator'
p4689
S'randomGenerator'
p4690
S'random_generator'
p4691
S'random generator'
p4692
I0
I0
I00
Ntp4693
ag307
ag311
asg29
(dp4694
sbsS'TClustersFromDistributionsByAssessor'
p4695
(i__main__
ClassDefinition
p4696
(dp4697
g4
I1
sg5
I01
sg6
g4695
sg7
S'TClustersFromDistributions'
p4698
sg9
I00
sg10
(lp4699
sg12
(lp4700
(S'TDistributionAssessor'
p4701
S'distributionAssessor'
p4702
S'distribution_assessor'
p4703
S'column quality assessor'
p4704
I0
I0
I00
Ntp4705
a(S'TStopDistributionClustering'
p4706
S'stopCriterion'
p4707
S'stop_criterion'
p4708
S'stop criterion'
p4709
I0
I0
I00
Ntp4710
a(S'float'
p4711
S'minProfitProportion'
p4712
S'min_profit_proportion'
p4713
S'minimal merge profit'
p4714
I0
I0
I01
Ntp4715
asg29
(dp4716
sbsS'TExamplesDistance_Hamming'
p4717
(i__main__
ClassDefinition
p4718
(dp4719
g4
I1
sg5
I01
sg6
g4717
sg7
S'TExamplesDistance'
p4720
sg9
I00
sg10
(lp4721
sg12
(lp4722
(S'bool'
p4723
S'ignoreClass'
p4724
S'ignore_class'
p4725
S'if true (default), class value is ignored when computing distances'
p4726
I0
I0
I01
Ntp4727
a(S'bool'
p4728
S'ignoreUnknowns'
p4729
S'ignore_unknowns'
p4730
S'if true (default: false) unknown values are ignored in computation'
p4731
I0
I0
I01
Ntp4732
asg29
(dp4733
sbsS'TDefaultClassifier'
p4734
(i__main__
ClassDefinition
p4735
(dp4736
g4
I1
sg5
I01
sg6
g4734
sg7
S'TClassifier'
p4737
sg9
I00
sg10
(lp4738
sg12
(lp4739
(S'TValue'
p4740
S'defaultVal'
p4741
S'default_val'
p4742
S'default prediction'
p4743
I0
I0
I01
Ntp4744
a(S'TDistribution'
p4745
S'defaultDistribution'
p4746
S'default_distribution'
p4747
S'default distribution'
p4748
I0
I0
I00
Ntp4749
ag94
ag99
asg29
(dp4750
sbsS'TColumnAssessor_Kramer'
p4751
(i__main__
ClassDefinition
p4752
(dp4753
g4
I1
sg5
I01
sg6
g4751
sg7
S'TColumnAssessor'
p4754
sg9
I00
sg10
(lp4755
sg12
(lp4756
sg29
(dp4757
sbsS'TEVDistGetter_Python'
p4758
(i__main__
ClassDefinition
p4759
(dp4760
g4
I1
sg5
I01
sg6
g4758
sg7
S'TEVDistGetter'
p4761
sg9
I00
sg10
(lp4762
sg12
(lp4763
sg29
(dp4764
sbsS'TDiscretization'
p4765
(i__main__
ClassDefinition
p4766
(dp4767
g4
I1
sg5
I01
sg6
g4765
sg7
S'TOrange'
p4768
sg9
I01
sg10
(lp4769
sg12
(lp4770
sg29
(dp4771
sbsS'TTreeSplitConstructor_Measure'
p4772
(i__main__
ClassDefinition
p4773
(dp4774
g4
I1
sg5
I01
sg6
g4772
sg7
S'TTreeSplitConstructor'
p4775
sg9
I01
sg10
(lp4776
sg12
(lp4777
g1303
ag1308
ag788
asg29
(dp4778
sbsS'TTreeNode'
p4779
(i__main__
ClassDefinition
p4780
(dp4781
g4
I1
sg5
I01
sg6
g4779
sg7
S'TOrange'
p4782
sg9
I00
sg10
(lp4783
sg12
(lp4784
(S'TClassifier'
p4785
S'nodeClassifier'
p4786
S'node_classifier'
p4787
S'classifies an example'
p4788
I0
I0
I00
Ntp4789
a(S'TDistribution'
p4790
S'distribution'
p4791
g4791
S'distribution of classes in the node'
p4792
I0
I0
I00
Ntp4793
a(S'TDomainContingency'
p4794
S'contingency'
p4795
g4795
S'domain contingency for examples in the node'
p4796
I0
I0
I00
Ntp4797
a(S'TExampleGenerator'
p4798
S'examples'
p4799
g4799
S'learning examples (if stored)'
p4800
I0
I0
I00
Ntp4801
a(S'int'
p4802
S'weightID'
p4803
S'weight_ID'
p4804
S'weightID used to construct this node'
p4805
I0
I0
I01
Ntp4806
a(S'TClassifier'
p4807
S'branchSelector'
p4808
S'branch_selector'
p4809
S'classifier that select a branch for an example'
p4810
I0
I0
I00
Ntp4811
a(S'TTreeNodeList'
p4812
S'branches'
p4813
g4813
S'classifiers presenting the branches'
p4814
I0
I0
I00
Ntp4815
a(S'TStringList'
p4816
S'branchDescriptions'
p4817
S'branch_descriptions'
p4818
S'descriptions of branches'
p4819
I0
I0
I00
Ntp4820
a(S'TDiscDistribution'
p4821
S'branchSizes'
p4822
S'branch_sizes'
p4823
S'numbers of examples in branches'
p4824
I0
I0
I00
Ntp4825
asg29
(dp4826
sbsS'TTransformValue_IsDefined'
p4827
(i__main__
ClassDefinition
p4828
(dp4829
g4
I1
sg5
I01
sg6
g4827
sg7
S'TTransformValue'
p4830
sg9
I00
sg10
(lp4831
sg12
(lp4832
g825
asg29
(dp4833
sbsS'TFilter_hasClassValue'
p4834
(i__main__
ClassDefinition
p4835
(dp4836
g4
I1
sg5
I01
sg6
g4834
sg7
S'TFilter'
p4837
sg9
I00
sg10
(lp4838
sg12
(lp4839
g696
ag700
asg29
(dp4840
sbsS'TStopDistributionClustering_binary'
p4841
(i__main__
ClassDefinition
p4842
(dp4843
g4
I1
sg5
I01
sg6
g4841
sg7
S'TStopDistributionClustering'
p4844
sg9
I00
sg10
(lp4845
sg12
(lp4846
sg29
(dp4847
sbsS'TIMByRows'
p4848
(i__main__
ClassDefinition
p4849
(dp4850
g4
I1
sg5
I01
sg6
g4848
sg7
S'TOrange'
p4851
sg9
I00
sg10
(lp4852
sg12
(lp4853
(S'int'
p4854
S'varType'
p4855
S'var_type'
p4856
S' class variable type'
p4857
I0
I0
I01
S'Variable_Type'
p4858
tp4859
asg29
(dp4860
sbsS'TRuleFinder'
p4861
(i__main__
ClassDefinition
p4862
(dp4863
g4
I1
sg5
I01
sg6
g4861
sg7
S'TOrange'
p4864
sg9
I01
sg10
(lp4865
sg12
(lp4866
g4049
ag4052
asg29
(dp4867
sbsS'TClassifierByExampleTable'
p4868
(i__main__
ClassDefinition
p4869
(dp4870
g4
I1
sg5
I01
sg6
g4868
sg7
S'TClassifierFD'
p4871
sg9
I00
sg10
(lp4872
sg12
(lp4873
(S'TExampleTable'
p4874
S'sortedExamples'
p4875
S'sorted_examples'
p4876
S'a table of examples'
p4877
I0
I0
I00
Ntp4878
a(S'bool'
p4879
S'containsUnknowns'
p4880
S'contains_unknowns'
p4881
S'if true, the table contains unknown values'
p4882
I0
I0
I01
Ntp4883
a(S'TClassifier'
p4884
S'classifierForUnknown'
p4885
S'classifier_for_unknown'
p4886
S'a classifier for unknown cases'
p4887
I0
I0
I00
Ntp4888
a(S'TEFMDataDescription'
p4889
S'dataDescription'
p4890
S'data_description'
p4891
S'data description'
p4892
I0
I0
I00
Ntp4893
ag292
ag94
ag99
asg29
(dp4894
sbsS'TKernelFunc'
p4895
(i__main__
ClassDefinition
p4896
(dp4897
g4
I1
sg5
I01
sg6
g4895
sg7
S'TOrange'
p4898
sg9
I01
sg10
(lp4899
sg12
(lp4900
sg29
(dp4901
sbsS'TChangeExampleGenerator'
p4902
(i__main__
ClassDefinition
p4903
(dp4904
g4
I1
sg5
I01
sg6
g4902
sg7
S'TAdapterGenerator'
p4905
sg9
I01
sg10
(lp4906
sg12
(lp4907
g307
ag311
asg29
(dp4908
sbsS'TRule'
p4909
(i__main__
ClassDefinition
p4910
(dp4911
g4
I1
sg5
I01
sg6
g4909
sg7
S'TOrange'
p4912
sg9
I00
sg10
(lp4913
sg12
(lp4914
(S'TFilter'
p4915
S'filter'
p4916
g4916
S'stored filter for this rule'
p4917
I0
I0
I00
Ntp4918
a(S'TFilter'
p4919
S'valuesFilter'
p4920
S'values_filter'
p4921
S'Filter_values representation of main filter (sometimes needed)'
p4922
I0
I0
I00
Ntp4923
a(S'TClassifier'
p4924
S'classifier'
p4925
g4925
S'classifies an example'
p4926
I0
I0
I00
Ntp4927
a(S'TLearner'
p4928
S'learner'
p4929
g4929
S'learns a classifier from data'
p4930
I0
I0
I00
Ntp4931
a(S'TRule'
p4932
S'parentRule'
p4933
S'parent_rule'
p4934
g574
I0
I0
I00
Ntp4935
a(S'TDistribution'
p4936
S'baseDist'
p4937
S'base_dist'
p4938
S'initial distribution'
p4939
I0
I0
I00
Ntp4940
a(S'TDistribution'
p4941
S'classDistribution'
p4942
S'class_distribution'
p4943
S'distribution of classes covered by the rule'
p4944
I0
I0
I00
Ntp4945
a(S'TExampleTable'
p4946
S'examples'
p4947
g4947
S'covered examples'
p4948
I0
I0
I00
Ntp4949
a(S'int'
p4950
S'weightID'
p4951
S'weight_ID'
p4952
S'weight for the stored examples'
p4953
I0
I0
I01
Ntp4954
a(S'float'
p4955
S'quality'
p4956
g4956
S'some measure of rule quality'
p4957
I0
I0
I01
Ntp4958
a(S'int'
p4959
S'complexity'
p4960
g4960
g574
I0
I0
I01
Ntp4961
a(S'float'
p4962
S'chi'
p4963
g4963
g574
I0
I0
I01
Ntp4964
a(S'int'
p4965
S'requiredConditions'
p4966
S'required_conditions'
p4967
S'conditions that are mandatory in rule - rule attribute significance avoids these'
p4968
I0
I0
I01
Ntp4969
asg29
(dp4970
sbsS'TIntervalDiscretizer'
p4971
(i__main__
ClassDefinition
p4972
(dp4973
g4
I1
sg5
I01
sg6
g4971
sg7
S'TDiscretizer'
p4974
sg9
I00
sg10
(lp4975
sg12
(lp4976
(S'TFloatList'
p4977
S'points'
p4978
g4978
S'cut-off points'
p4979
I0
I0
I00
Ntp4980
ag825
asg29
(dp4981
sbsS'TClassifierByLookupTable2'
p4982
(i__main__
ClassDefinition
p4983
(dp4984
g4
I1
sg5
I01
sg6
g4982
sg7
S'TClassifierByLookupTable'
p4985
sg9
I00
sg10
(lp4986
sg12
(lp4987
(S'TVariable'
p4988
S'variable1'
p4989
g4989
S'the first attribute used for classification'
p4990
I01
I0
I00
Ntp4991
a(S'TVariable'
p4992
S'variable2'
p4993
g4993
S'the second attribute used for classification'
p4994
I01
I0
I00
Ntp4995
a(S'int'
p4996
S'noOfValues1'
p4997
S'no_of_values1'
p4998
S'number of values of the first attribute'
p4999
I01
I0
I01
Ntp5000
a(S'int'
p5001
S'noOfValues2'
p5002
S'no_of_values2'
p5003
S'number of values of the second attribute'
p5004
I01
I0
I01
Ntp5005
a(S'TEFMDataDescription'
p5006
S'dataDescription'
p5007
S'data_description'
p5008
S'data description'
p5009
I0
I0
I00
Ntp5010
ag85
ag89
ag94
ag99
asg29
(dp5011
sbsS'TPreprocessor_addClassNoise'
p5012
(i__main__
ClassDefinition
p5013
(dp5014
g4
I1
sg5
I01
sg6
g5012
sg7
S'TPreprocessor'
p5015
sg9
I00
sg10
(lp5016
sg12
(lp5017
(S'float'
p5018
S'proportion'
p5019
g5019
S'proportion of changed class values'
p5020
I0
I0
I01
Ntp5021
a(S'TRandomGenerator'
p5022
S'randomGenerator'
p5023
S'random_generator'
p5024
S'random number generator'
p5025
I0
I0
I00
Ntp5026
asg29
(dp5027
sbsS'TExampleGenerator'
p5028
(i__main__
ClassDefinition
p5029
(dp5030
g4
I1
sg5
I01
sg6
g5028
sg7
S'TOrange'
p5031
sg9
I01
sg10
(lp5032
sg12
(lp5033
g307
ag311
asg29
(dp5034
sbsS'TClassifierByLookupTable1'
p5035
(i__main__
ClassDefinition
p5036
(dp5037
g4
I1
sg5
I01
sg6
g5035
sg7
S'TClassifierByLookupTable'
p5038
sg9
I00
sg10
(lp5039
sg12
(lp5040
(S'TVariable'
p5041
S'variable1'
p5042
(g5042
S'variable'
p5043
tp5044
S' attribute used for classification'
p5045
I01
I0
I00
Ntp5046
ag85
ag89
ag94
ag99
asg29
(dp5047
sbsS'TRuleClassifierConstructor_Python'
p5048
(i__main__
ClassDefinition
p5049
(dp5050
g4
I1
sg5
I01
sg6
g5048
sg7
S'TRuleClassifierConstructor'
p5051
sg9
I00
sg10
(lp5052
sg12
(lp5053
sg29
(dp5054
sbsS'TRemoveRedundantOneValue'
p5055
(i__main__
ClassDefinition
p5056
(dp5057
g4
I1
sg5
I01
sg6
g5055
sg7
S'TRemoveRedundant'
p5058
sg9
I00
sg10
(lp5059
sg12
(lp5060
(S'bool'
p5061
S'onData'
p5062
S'on_data'
p5063
S'observe the actual number of value on the data (not on attribute definitions)'
p5064
I0
I0
I01
Ntp5065
ag1346
asg29
(dp5066
sbsS'TDistributionAssessor_Relief'
p5067
(i__main__
ClassDefinition
p5068
(dp5069
g4
I1
sg5
I01
sg6
g5067
sg7
S'TDistributionAssessor'
p5070
sg9
I00
sg10
(lp5071
sg12
(lp5072
sg29
(dp5073
sbsS'TEnumVariable'
p5074
(i__main__
ClassDefinition
p5075
(dp5076
g4
I1
sg5
I01
sg6
g5074
sg7
S'TVariable'
p5077
sg9
I00
sg10
(lp5078
sg12
(lp5079
(S'TStringList'
p5080
S'values'
p5081
g5081
S"attribute's values"
p5082
I0
I0
I00
Ntp5083
a(S'int'
p5084
S'baseValue'
p5085
S'base_value'
p5086
S'the index of the base value'
p5087
I0
I0
I01
Ntp5088
ag334
ag338
ag342
ag347
ag352
ag357
ag362
asg29
(dp5089
sbsS'THeatmapConstructor'
p5090
(i__main__
ClassDefinition
p5091
(dp5092
g4639
I1
sg4640
I0
sg4641
g5090
sg4642
S'TOrange'
p5093
sg4644
I00
sg4645
(lp5094
sg4647
(lp5095
(S'TExampleTable'
p5096
S'sortedExamples'
p5097
S'sorted_examples'
p5098
S'sortedExamples'
p5099
I01
I0
I00
Ntp5100
a(S'int'
p5101
S'nColumns'
p5102
S'n_columns'
p5103
S'number of columns'
p5104
I01
I0
I01
Ntp5105
a(S'int'
p5106
S'nRows'
p5107
S'n_rows'
p5108
S'number of rows'
p5109
I01
I0
I01
Ntp5110
a(S'int'
p5111
S'nClasses'
p5112
S'n_classes'
p5113
S'number of classes (0 if the data is not classified)'
p5114
I01
I0
I01
Ntp5115
asg4666
(dp5116
sbsS'TConditionalProbabilityEstimatorConstructor_loess'
p5117
(i__main__
ClassDefinition
p5118
(dp5119
g4
I1
sg5
I01
sg6
g5117
sg7
S'TConditionalProbabilityEstimatorConstructor'
p5120
sg9
I00
sg10
(lp5121
sg12
(lp5122
(S'float'
p5123
S'windowProportion'
p5124
S'window_proportion'
p5125
S'The proportion of points in a window for LR'
p5126
I0
I0
I01
Ntp5127
a(S'int'
p5128
S'nPoints'
p5129
S'n_points'
p5130
S'The number of points on curve'
p5131
I0
I0
I01
Ntp5132
a(S'int'
p5133
S'distributionMethod'
p5134
S'distribution_method'
p5135
S" Meaning of the 'nPoints'"
p5136
I0
I0
I01
S'ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod'
p5137
tp5138
asg29
(dp5139
S'DistributionMethod'
p5140
(lp5141
(S'Minimal'
p5142
S'DISTRIBUTE_MINIMAL'
p5143
tp5144
a(S'Factor'
p5145
S'DISTRIBUTE_FACTOR'
p5146
tp5147
a(S'Fixed'
p5148
S'DISTRIBUTE_FIXED'
p5149
tp5150
a(S'Uniform'
p5151
S'DISTRIBUTE_UNIFORM'
p5152
tp5153
a(S'Maximal'
p5154
S'DISTRIBUTE_MAXIMAL'
p5155
tp5156
assbsS'TPreprocessor_addMissing'
p5157
(i__main__
ClassDefinition
p5158
(dp5159
g4
I1
sg5
I01
sg6
g5157
sg7
S'TPreprocessor'
p5160
sg9
I00
sg10
(lp5161
sg12
(lp5162
(S'TVariableFloatMap'
p5163
S'proportions'
p5164
g5164
S'proportion of removed values for individual values'
p5165
I0
I0
I00
Ntp5166
a(S'float'
p5167
S'defaultProportion'
p5168
S'default_proportion'
p5169
S'default proportion of removed values (for attributes not specified above)'
p5170
I0
I0
I01
Ntp5171
a(S'int'
p5172
S'specialType'
p5173
S'special_type'
p5174
S'special value type (1=DC, 2=DK)'
p5175
I0
I0
I01
Ntp5176
a(S'TRandomGenerator'
p5177
S'randomGenerator'
p5178
S'random_generator'
p5179
S'random number generator'
p5180
I0
I0
I00
Ntp5181
asg29
(dp5182
sbsS'TRuleBeamCandidateSelector'
p5183
(i__main__
ClassDefinition
p5184
(dp5185
g4
I1
sg5
I01
sg6
g5183
sg7
S'TOrange'
p5186
sg9
I01
sg10
(lp5187
sg12
(lp5188
sg29
(dp5189
sbsS'TSubsetsGenerator_minMaxSize'
p5190
(i__main__
ClassDefinition
p5191
(dp5192
g4
I1
sg5
I01
sg6
g5190
sg7
S'TSubsetsGenerator'
p5193
sg9
I00
sg10
(lp5194
sg12
(lp5195
(S'int'
p5196
S'min'
p5197
g5197
S'minimal subset size'
p5198
I0
I0
I01
Ntp5199
a(S'int'
p5200
S'max'
p5201
g5201
S'maximal subset size'
p5202
I0
I0
I01
Ntp5203
ag208
asg29
(dp5204
sbsS'TClusteringTreeLearner'
p5205
(i__main__
ClassDefinition
p5206
(dp5207
g4
I1
sg5
I01
sg6
g5205
sg7
S'TMultiLearner'
p5208
sg9
I00
sg10
(lp5209
sg12
(lp5210
(S'float'
p5211
S'minMajority'
p5212
S'min_majority'
p5213
S'the minimal majority each class variable must exceed to stop building'
p5214
I0
I0
I01
Ntp5215
a(S'float'
p5216
S'minMSE'
p5217
S'min_MSE'
p5218
S'the minimal MSE each class variable must be lower than to stop building'
p5219
I0
I0
I01
Ntp5220
a(S'int'
p5221
S'minInstances'
p5222
S'min_instances'
p5223
S'the minimal number of examples for division to continue'
p5224
I0
I0
I01
Ntp5225
a(S'int'
p5226
S'maxDepth'
p5227
S'max_depth'
p5228
S'the maximal depth a tree can reach'
p5229
I0
I0
I01
Ntp5230
a(S'int'
p5231
S'method'
p5232
g5232
g574
I0
I0
I01
Ntp5233
a(S'float'
p5234
S'skipProb'
p5235
S'skip_prob'
p5236
g574
I0
I0
I01
Ntp5237
a(S'TRandomGenerator'
p5238
S'randomGenerator'
p5239
S'random_generator'
p5240
g574
I0
I0
I00
Ntp5241
ag3438
ag3442
asg29
(dp5242
sbsS'TTreeExampleSplitter_UnknownsToAll'
p5243
(i__main__
ClassDefinition
p5244
(dp5245
g4
I1
sg5
I01
sg6
g5243
sg7
S'TTreeExampleSplitter'
p5246
sg9
I00
sg10
(lp5247
sg12
(lp5248
sg29
(dp5249
sbsS'TValueFilter_stringList'
p5250
(i__main__
ClassDefinition
p5251
(dp5252
g4
I1
sg5
I01
sg6
g5250
sg7
S'TValueFilter'
p5253
sg9
I00
sg10
(lp5254
sg12
(lp5255
(S'TStringList'
p5256
S'values'
p5257
g5257
S'accepted values'
p5258
I0
I0
I00
Ntp5259
a(S'bool'
p5260
S'caseSensitive'
p5261
S'case_sensitive'
p5262
S'if true (default), the comparison is case sensitive'
p5263
I0
I0
I01
Ntp5264
ag1062
ag1067
asg29
(dp5265
sbsS'TContingencyClass'
p5266
(i__main__
ClassDefinition
p5267
(dp5268
g4
I1
sg5
I01
sg6
g5266
sg7
S'TContingency'
p5269
sg9
I01
sg10
(lp5270
sg12
(lp5271
g1678
ag1683
ag1689
ag1694
ag1699
ag1704
asg29
(dp5272
sbsS'TAssociationClassifier'
p5273
(i__main__
ClassDefinition
p5274
(dp5275
g4
I1
sg5
I01
sg6
g5273
sg7
S'TClassifierFD'
p5276
sg9
I00
sg10
(lp5277
sg12
(lp5278
(S'TAssociationRules'
p5279
S'rules'
p5280
g5280
S'association rules'
p5281
I0
I0
I00
Ntp5282
a(S'int'
p5283
S'voteWeight'
p5284
S'vote_weight'
p5285
S'vote weight (s=support, c=confidence, p=product)'
p5286
I0
I0
I01
Ntp5287
ag292
ag94
ag99
asg29
(dp5288
sbsS'TDomainDistributions'
p5289
(ipyprops
ClassDefinition
p5290
(dp5291
g136
I0
sg137
I01
sg138
S'TDomainDistributions'
p5292
sg139
g140
sg141
I0
sg142
(lp5293
sg144
(lp5294
sg146
(dp5295
sbsS'TSVMLearnerSparse'
p5296
(i__main__
ClassDefinition
p5297
(dp5298
g4
I1
sg5
I01
sg6
g5296
sg7
S'TSVMLearner'
p5299
sg9
I00
sg10
(lp5300
sg12
(lp5301
(S'bool'
p5302
S'useNonMeta'
p5303
S'use_non_meta'
p5304
S'include non meta attributes in the learning process'
p5305
I0
I0
I01
Ntp5306
ag4194
ag4199
ag4203
ag4207
ag4211
ag4215
ag4219
ag4222
ag4226
ag4229
ag4233
ag4237
ag4241
ag4246
ag110
asg29
(dp5307
sbsS'TDomain'
p5308
(i__main__
ClassDefinition
p5309
(dp5310
g4
I1
sg5
I01
sg6
g5308
sg7
S'TOrange'
p5311
sg9
I00
sg10
(lp5312
sg12
(lp5313
(S'TVariable'
p5314
S'classVar'
p5315
S'class_var'
p5316
S'class variable'
p5317
I01
I0
I00
Ntp5318
a(S'TVarList'
p5319
S'attributes'
p5320
(g5320
S'features'
p5321
tp5322
S' list of attributes, excluding the class'
p5323
I01
I0
I00
Ntp5324
a(S'TVarList'
p5325
S'variables'
p5326
g5326
S'list of attributes, including the class at the end of the list'
p5327
I01
I0
I00
Ntp5328
a(S'TVarList'
p5329
S'classVars'
p5330
S'class_vars'
p5331
S'list of class variables, if multiple; else None'
p5332
I01
I0
I00
Ntp5333
a(S'int'
p5334
S'version'
p5335
g5335
S"unique version identifier; it's changed each time a domain is changed"
p5336
I01
I0
I01
Ntp5337
asg29
(dp5338
sbsS'TTreePruner_SameMajority'
p5339
(i__main__
ClassDefinition
p5340
(dp5341
g4
I1
sg5
I01
sg6
g5339
sg7
S'TTreePruner'
p5342
sg9
I00
sg10
(lp5343
sg12
(lp5344
sg29
(dp5345
sbsS'TSubsetsGenerator_constant_iterator'
p5346
(i__main__
ClassDefinition
p5347
(dp5348
g4
I1
sg5
I01
sg6
g5346
sg7
S'TSubsetsGenerator_iterator'
p5349
sg9
I00
sg10
(lp5350
sg12
(lp5351
(S'TVarList'
p5352
S'constant'
p5353
g5353
S'a subset that is returned (once!)'
p5354
I0
I0
I00
Ntp5355
a(S'bool'
p5356
S'moreToCome'
p5357
S'more_to_come'
p5358
g574
I0
I0
I01
Ntp5359
ag511
asg29
(dp5360
sbsS'TExampleDistConstructor'
p5361
(i__main__
ClassDefinition
p5362
(dp5363
g4
I1
sg5
I01
sg6
g5361
sg7
S'TOrange'
p5364
sg9
I01
sg10
(lp5365
sg12
(lp5366
sg29
(dp5367
sbsS'TIMByIMByRows'
p5368
(i__main__
ClassDefinition
p5369
(dp5370
g4
I1
sg5
I01
sg6
g5368
sg7
S'TIMConstructor'
p5371
sg9
I00
sg10
(lp5372
sg12
(lp5373
g1250
asg29
(dp5374
sbsS'TAlignmentList'
p5375
(ipyprops
ClassDefinition
p5376
(dp5377
g136
I0
sg137
I01
sg138
g5375
sg139
g140
sg141
I0
sg142
(lp5378
sg144
(lp5379
sg146
(dp5380
sbsS'TDiscrete2Continuous'
p5381
(i__main__
ClassDefinition
p5382
(dp5383
g4
I1
sg5
I01
sg6
g5381
sg7
S'TTransformValue'
p5384
sg9
I00
sg10
(lp5385
sg12
(lp5386
(S'int'
p5387
S'value'
p5388
g5388
S'target value'
p5389
I0
I0
I01
Ntp5390
a(S'bool'
p5391
S'invert'
p5392
g5392
S'give 1.0 to values not equal to the target'
p5393
I0
I0
I01
Ntp5394
a(S'bool'
p5395
S'zeroBased'
p5396
S'zero_based'
p5397
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p5398
I0
I0
I01
Ntp5399
ag825
asg29
(dp5400
sbsS'TDomainDiscretization'
p5401
(i__main__
ClassDefinition
p5402
(dp5403
g4
I1
sg5
I01
sg6
g5401
sg7
S'TOrange'
p5404
sg9
I00
sg10
(lp5405
sg12
(lp5406
(S'TDiscretization'
p5407
S'discretization'
p5408
g5408
S'discretization'
p5409
I0
I0
I00
Ntp5410
asg29
(dp5411
sbsS'TColumnAssessor_m'
p5412
(i__main__
ClassDefinition
p5413
(dp5414
g4
I1
sg5
I01
sg6
g5412
sg7
S'TColumnAssessor'
p5415
sg9
I00
sg10
(lp5416
sg12
(lp5417
(S'float'
p5418
g1213
g1213
S'm for m-estimate'
p5419
I0
I0
I01
Ntp5420
asg29
(dp5421
sbsS'TImputer_defaults'
p5422
(i__main__
ClassDefinition
p5423
(dp5424
g4
I1
sg5
I01
sg6
g5422
sg7
S'TImputer'
p5425
sg9
I00
sg10
(lp5426
sg12
(lp5427
(S'TExample'
p5428
S'defaults'
p5429
g5429
S'values that are to be inserted instead of missing ones'
p5430
I0
I0
I00
Ntp5431
asg29
(dp5432
sbsS'TRuleEvaluator_mEVC'
p5433
(i__main__
ClassDefinition
p5434
(dp5435
g4
I1
sg5
I01
sg6
g5433
sg7
S'TRuleEvaluator'
p5436
sg9
I00
sg10
(lp5437
sg12
(lp5438
(S'float'
p5439
g1213
g1213
S'Parameter m for m-estimate after EVC correction'
p5440
I0
I0
I01
Ntp5441
a(S'TEVDistGetter'
p5442
S'evDistGetter'
p5443
S'ev_dist_getter'
p5444
S'get EVC distribution for chi correction'
p5445
I0
I0
I00
Ntp5446
a(S'TVariable'
p5447
S'probVar'
p5448
S'prob_var'
p5449
S'probability coverage variable (meta usually)'
p5450
I0
I0
I00
Ntp5451
a(S'TRuleValidator'
p5452
S'validator'
p5453
g5453
S'rule validator for best rule'
p5454
I0
I0
I00
Ntp5455
a(S'int'
p5456
S'min_improved'
p5457
g5457
S'minimal number of improved examples'
p5458
I0
I0
I01
Ntp5459
a(S'float'
p5460
S'min_improved_perc'
p5461
g5461
S'minimal percentage of improved examples'
p5462
I0
I0
I01
Ntp5463
a(S'TRule'
p5464
S'bestRule'
p5465
S'best_rule'
p5466
S'best rule found and evaluated given conditions (min_improved, validator)'
p5467
I0
I0
I00
Ntp5468
a(S'float'
p5469
S'ruleAlpha'
p5470
S'rule_alpha'
p5471
S"minimal 'true' rule significance"
p5472
I0
I0
I01
Ntp5473
a(S'float'
p5474
S'attributeAlpha'
p5475
S'attribute_alpha'
p5476
S'minimal attribute significance'
p5477
I0
I0
I01
Ntp5478
a(S'bool'
p5479
S'returnExpectedProb'
p5480
S'return_expected_prob'
p5481
S'if true, evaluator returns expected class probability, if false, current class probability'
p5482
I0
I0
I01
Ntp5483
a(S'int'
p5484
S'optimismReduction'
p5485
S'optimism_reduction'
p5486
S'to select optimstic (0), pessimistic (1) or EVC (2) evaluation'
p5487
I0
I0
I01
Ntp5488
asg29
(dp5489
sbsS'TContingency'
p5490
(i__main__
ClassDefinition
p5491
(dp5492
g4
I1
sg5
I01
sg6
g5490
sg7
S'TOrange'
p5493
sg9
I00
sg10
(lp5494
sg12
(lp5495
g1678
ag1683
ag1689
ag1694
ag1699
ag1704
asg29
(dp5496
sbsS'TImputer_Python'
p5497
(i__main__
ClassDefinition
p5498
(dp5499
g4
I1
sg5
I01
sg6
g5497
sg7
S'TImputer'
p5500
sg9
I00
sg10
(lp5501
sg12
(lp5502
sg29
(dp5503
sbsS'TClassifierGenerator'
p5504
(i__main__
ClassDefinition
p5505
(dp5506
g4
I1
sg5
I01
sg6
g5504
sg7
S'TExampleGenerator'
p5507
sg9
I00
sg10
(lp5508
sg12
(lp5509
(S'TClassifier'
p5510
S'classify'
p5511
g5511
S'classifier'
p5512
I0
I0
I00
Ntp5513
ag307
ag311
asg29
(dp5514
sbsS'TRuleDataStoppingCriteria_Python'
p5515
(i__main__
ClassDefinition
p5516
(dp5517
g4
I1
sg5
I01
sg6
g5515
sg7
S'TRuleDataStoppingCriteria'
p5518
sg9
I00
sg10
(lp5519
sg12
(lp5520
sg29
(dp5521
sbsS'TTreeDescender_UnknownToCommonSelector'
p5522
(i__main__
ClassDefinition
p5523
(dp5524
g4
I1
sg5
I01
sg6
g5522
sg7
g1593
sg9
I0
sg10
(lp5525
sg12
(lp5526
sg29
(dp5527
sbsS'THierarchicalCluster'
p5528
(i__main__
ClassDefinition
p5529
(dp5530
g4
I1
sg5
I01
sg6
g5528
sg7
S'TOrange'
p5531
sg9
I00
sg10
(lp5532
sg12
(lp5533
(S'THierarchicalClusterList'
p5534
S'branches'
p5535
g5535
S'subclusters'
p5536
I0
I0
I00
Ntp5537
a(S'float'
p5538
S'height'
p5539
g5539
S'height'
p5540
I0
I0
I01
Ntp5541
a(S'TIntList'
p5542
S'mapping'
p5543
g5543
S'indices to the list of all elements in the clustering'
p5544
I0
I0
I00
Ntp5545
a(S'int'
p5546
S'first'
p5547
g5547
S"the index into 'elements' to the first element of the cluster"
p5548
I0
I0
I01
Ntp5549
a(S'int'
p5550
S'last'
p5551
g5551
S"the index into 'elements' to the one after the last element of the cluster"
p5552
I0
I0
I01
Ntp5553
asg29
(dp5554
sbsS'TPreprocessIM'
p5555
(i__main__
ClassDefinition
p5556
(dp5557
g4
I1
sg5
I01
sg6
g5555
sg7
S'TOrange'
p5558
sg9
I01
sg10
(lp5559
sg12
(lp5560
sg29
(dp5561
sbsS'TLongList'
p5562
(ipyprops
ClassDefinition
p5563
(dp5564
g136
I0
sg137
I01
sg138
g5562
sg139
g140
sg141
I0
sg142
(lp5565
sg144
(lp5566
sg146
(dp5567
sbsS'TBasketFeeder'
p5568
(i__main__
ClassDefinition
p5569
(dp5570
g4
I1
sg5
I01
sg6
g5568
sg7
S'TOrange'
p5571
sg9
I00
sg10
(lp5572
sg12
(lp5573
(S'bool'
p5574
S'dontStore'
p5575
S'dont_store'
p5576
S'disables items storing'
p5577
I0
I0
I01
Ntp5578
a(S'bool'
p5579
S'dontCheckStored'
p5580
S'dont_check_stored'
p5581
S'disables items lookup in the global cache'
p5582
I0
I0
I01
Ntp5583
a(S'TDomain'
p5584
S'domain'
p5585
g5585
S'domain where the meta attributes are stored'
p5586
I0
I0
I00
Ntp5587
a(S'TDomain'
p5588
S'sourceDomain'
p5589
S'source_domain'
p5590
S'domain with items that can be reused'
p5591
I0
I0
I00
Ntp5592
asg29
(dp5593
sbsS'TRuleEvaluator_Laplace'
p5594
(i__main__
ClassDefinition
p5595
(dp5596
g4
I1
sg5
I01
sg6
g5594
sg7
S'TRuleEvaluator'
p5597
sg9
I00
sg10
(lp5598
sg12
(lp5599
sg29
(dp5600
sbsS'TColumnAssessor_N'
p5601
(i__main__
ClassDefinition
p5602
(dp5603
g4
I1
sg5
I01
sg6
g5601
sg7
S'TColumnAssessor'
p5604
sg9
I00
sg10
(lp5605
sg12
(lp5606
sg29
(dp5607
sbsS'TSubsetsGenerator_minMaxSize_iterator'
p5608
(i__main__
ClassDefinition
p5609
(dp5610
g4
I1
sg5
I01
sg6
g5608
sg7
S'TSubsetsGenerator_iterator'
p5611
sg9
I00
sg10
(lp5612
sg12
(lp5613
(S'int'
p5614
g2572
g2572
g574
I01
I0
I01
Ntp5615
a(S'int'
p5616
S'max'
p5617
g5617
S'maximal subset size'
p5618
I0
I0
I01
Ntp5619
a(S'bool'
p5620
S'moreToCome'
p5621
S'more_to_come'
p5622
g574
I01
I0
I01
Ntp5623
ag511
asg29
(dp5624
sbsS'TExamplesDistanceConstructor_Lp'
p5625
(i__main__
ClassDefinition
p5626
(dp5627
g4
I1
sg5
I01
sg6
g5625
sg7
S'TExamplesDistanceConstructor_Normalized'
p5628
sg9
I00
sg10
(lp5629
sg12
(lp5630
(S'float'
p5631
g2278
g2278
g2278
I0
I0
I01
Ntp5632
ag2112
ag2117
ag1368
asg29
(dp5633
sbsS'TComputeDomainContingency'
p5634
(i__main__
ClassDefinition
p5635
(dp5636
g4
I1
sg5
I01
sg6
g5634
sg7
S'TOrange'
p5637
sg9
I00
sg10
(lp5638
sg12
(lp5639
g28
asg29
(dp5640
sbsS'TExample'
p5641
(i__main__
ClassDefinition
p5642
(dp5643
g4
I1
sg5
I01
sg6
g5641
sg7
S'TOrange'
p5644
sg9
I00
sg10
(lp5645
sg12
(lp5646
g2678
ag2681
asg29
(dp5647
sbsS'TFixedDiscretization'
p5648
(i__main__
ClassDefinition
p5649
(dp5650
g4
I1
sg5
I01
sg6
g5648
sg7
S'TDiscretization'
p5651
sg9
I00
sg10
(lp5652
sg12
(lp5653
(S'TFloatList'
p5654
S'points'
p5655
g5655
S'cut-off points'
p5656
I0
I0
I00
Ntp5657
asg29
(dp5658
sbsS'TDomainContingency'
p5659
(ipyprops
ClassDefinition
p5660
(dp5661
g136
I0
sg137
I01
sg138
S'TDomainContingency'
p5662
sg139
g140
sg141
I0
sg142
(lp5663
sg144
(lp5664
sg146
(dp5665
sbsS'TPreprocessor_addGaussianClassNoise'
p5666
(i__main__
ClassDefinition
p5667
(dp5668
g4
I1
sg5
I01
sg6
g5666
sg7
S'TPreprocessor'
p5669
sg9
I00
sg10
(lp5670
sg12
(lp5671
(S'float'
p5672
S'deviation'
p5673
g5673
S'class deviation'
p5674
I0
I0
I01
Ntp5675
a(S'TRandomGenerator'
p5676
S'randomGenerator'
p5677
S'random_generator'
p5678
S'random number generator'
p5679
I0
I0
I00
Ntp5680
asg29
(dp5681
sbsS'TRuleDataStoppingCriteria'
p5682
(i__main__
ClassDefinition
p5683
(dp5684
g4
I1
sg5
I01
sg6
g5682
sg7
S'TOrange'
p5685
sg9
I01
sg10
(lp5686
sg12
(lp5687
sg29
(dp5688
sbsS'TPreprocessor_filter'
p5689
(i__main__
ClassDefinition
p5690
(dp5691
g4
I1
sg5
I01
sg6
g5689
sg7
S'TPreprocessor'
p5692
sg9
I00
sg10
(lp5693
sg12
(lp5694
(S'TFilter'
p5695
S'filter'
p5696
g5696
S'filter'
p5697
I0
I0
I00
Ntp5698
asg29
(dp5699
sbsS'TSOMNodeList'
p5700
(ipyprops
ClassDefinition
p5701
(dp5702
g136
I0
sg137
I01
sg138
g5700
sg139
g140
sg141
I0
sg142
(lp5703
sg144
(lp5704
sg146
(dp5705
sbsS'TExampleDistBySorting'
p5706
(i__main__
ClassDefinition
p5707
(dp5708
g4
I1
sg5
I01
sg6
g5706
sg7
S'TExampleDistConstructor'
p5709
sg9
I00
sg10
(lp5710
sg12
(lp5711
sg29
(dp5712
sbsS'TGraphAsMatrix'
p5713
(i__main__
ClassDefinition
p5714
(dp5715
g4
I1
sg5
I01
sg6
g5713
sg7
S'TGraph'
p5716
sg9
I00
sg10
(lp5717
sg12
(lp5718
g1484
ag1489
ag1493
asg29
(dp5719
sbsS'TValueFilter_discrete'
p5720
(i__main__
ClassDefinition
p5721
(dp5722
g4
I1
sg5
I01
sg6
g5720
sg7
S'TValueFilter'
p5723
sg9
I00
sg10
(lp5724
sg12
(lp5725
(S'TValueList'
p5726
S'values'
p5727
g5727
S'accepted values'
p5728
I0
I0
I00
Ntp5729
a(S'bool'
p5730
S'negate'
p5731
g5731
S'negate'
p5732
I0
I0
I01
Ntp5733
ag1062
ag1067
asg29
(dp5734
sbsS'TAssociationRulesInducer'
p5735
(i__main__
ClassDefinition
p5736
(dp5737
g4
I1
sg5
I01
sg6
g5735
sg7
S'TOrange'
p5738
sg9
I00
sg10
(lp5739
sg12
(lp5740
(S'int'
p5741
S'maxItemSets'
p5742
S'max_item_sets'
p5743
S'maximal number of itemsets (increase if you want)'
p5744
I0
I0
I01
Ntp5745
a(S'float'
p5746
S'confidence'
p5747
g5747
S'required confidence'
p5748
I0
I0
I01
Ntp5749
a(S'float'
p5750
S'support'
p5751
g5751
S'required support'
p5752
I0
I0
I01
Ntp5753
a(S'bool'
p5754
S'classificationRules'
p5755
S'classification_rules'
p5756
S'if true, rules will have the class and only the class attribute on the right-hand side'
p5757
I0
I0
I01
Ntp5758
a(S'bool'
p5759
S'storeExamples'
p5760
S'store_examples'
p5761
S'if true, each rule is going to have tables with references to examples which match its left side or both sides'
p5762
I0
I0
I01
Ntp5763
asg29
(dp5764
sbsS'TMakeRandomIndices2'
p5765
(i__main__
ClassDefinition
p5766
(dp5767
g4
I1
sg5
I01
sg6
g5765
sg7
S'TMakeRandomIndices'
p5768
sg9
I00
sg10
(lp5769
sg12
(lp5770
(S'float'
p5771
S'p0'
p5772
g5772
S"a proportion or a number of 0's"
p5773
I0
I0
I01
Ntp5774
ag719
ag723
ag728
asg29
(dp5775
sbsS'TTreeStopCriteria'
p5776
(i__main__
ClassDefinition
p5777
(dp5778
g4
I1
sg5
I01
sg6
g5776
sg7
S'TOrange'
p5779
sg9
I00
sg10
(lp5780
sg12
(lp5781
sg29
(dp5782
sbsS'TPreprocessor_addMissingClasses'
p5783
(i__main__
ClassDefinition
p5784
(dp5785
g4
I1
sg5
I01
sg6
g5783
sg7
S'TPreprocessor'
p5786
sg9
I00
sg10
(lp5787
sg12
(lp5788
(S'float'
p5789
S'proportion'
p5790
g5790
S'proportion of removed class values'
p5791
I0
I0
I01
Ntp5792
a(S'int'
p5793
S'specialType'
p5794
S'special_type'
p5795
S'special value type (1=DC, 2=DK)'
p5796
I0
I0
I01
Ntp5797
a(S'TRandomGenerator'
p5798
S'randomGenerator'
p5799
S'random_generator'
p5800
S'random number generator'
p5801
I0
I0
I00
Ntp5802
asg29
(dp5803
sbsS'TLookupLearner'
p5804
(i__main__
ClassDefinition
p5805
(dp5806
g4
I1
sg5
I01
sg6
g5804
sg7
S'TLearner'
p5807
sg9
I00
sg10
(lp5808
sg12
(lp5809
(S'TLearner'
p5810
S'learnerForUnknown'
p5811
S'learner_for_unknown'
p5812
S'a learner for classifying cases not found in the table'
p5813
I0
I0
I00
Ntp5814
a(S'bool'
p5815
S'allowFastLookups'
p5816
S'allow_fast_lookups'
p5817
S'if true, it constructs LookupClassifiers for <=3 attributes'
p5818
I0
I0
I01
Ntp5819
a(S'int'
p5820
S'unknownsHandling'
p5821
S'unknowns_handling'
p5822
S'0 omit examples with unknowns, 1 distribute them, 2 keep them in table'
p5823
I0
I0
I01
Ntp5824
ag110
asg29
(dp5825
sbsS'TBasketExampleGenerator'
p5826
(i__main__
ClassDefinition
p5827
(dp5828
g4
I1
sg5
I01
sg6
g5826
sg7
S'TFileExampleGenerator'
p5829
sg9
I00
sg10
(lp5830
sg12
(lp5831
g1649
ag1654
ag1659
ag307
ag311
asg29
(dp5832
sbsS'TRuleEvaluator_Entropy'
p5833
(i__main__
ClassDefinition
p5834
(dp5835
g4
I1
sg5
I01
sg6
g5833
sg7
S'TRuleEvaluator'
p5836
sg9
I00
sg10
(lp5837
sg12
(lp5838
sg29
(dp5839
sbsS'TMeasureAttribute_chiSquare'
p5840
(i__main__
ClassDefinition
p5841
(dp5842
g4
I1
sg5
I01
sg6
g5840
sg7
S'TMeasureAttributeFromProbabilities'
p5843
sg9
I00
sg10
(lp5844
sg12
(lp5845
(S'bool'
p5846
S'computeProbabilities'
p5847
S'compute_probabilities'
p5848
g574
I0
I0
I01
Ntp5849
ag911
ag916
ag922
ag927
ag932
ag937
ag942
asg29
(dp5850
sbsS'TDistribution'
p5851
(i__main__
ClassDefinition
p5852
(dp5853
g4
I1
sg5
I01
sg6
g5851
sg7
S'TSomeValue'
p5854
sg9
I01
sg10
(lp5855
sg12
(lp5856
g1133
ag1137
ag1141
ag1145
ag1149
ag1154
ag1159
ag1164
asg29
(dp5857
sbsS'TExamplesDistance_DTW'
p5858
(i__main__
ClassDefinition
p5859
(dp5860
g4
I1
sg5
I01
sg6
g5858
sg7
S'TExamplesDistance_Normalized'
p5861
sg9
I00
sg10
(lp5862
sg12
(lp5863
(S'int'
p5864
S'dtwDistance'
p5865
S'dtw_distance'
p5866
S' distance measure between individual attributes (default: square of difference)'
p5867
I0
I0
I01
S'ExamplesDistance_DTW_DistanceType'
p5868
tp5869
ag455
ag459
ag463
ag467
ag472
ag476
ag481
asg29
(dp5870
S'DistanceType'
p5871
(lp5872
(S'Euclidean'
p5873
I0
tp5874
a(S'Derivative'
p5875
I1
tp5876
assbsS'TTreeExampleSplitter_UnknownsToRandom'
p5877
(i__main__
ClassDefinition
p5878
(dp5879
g4
I1
sg5
I01
sg6
g5877
sg7
S'TTreeExampleSplitter'
p5880
sg9
I00
sg10
(lp5881
sg12
(lp5882
sg29
(dp5883
sbsS'TTreePruner_m'
p5884
(i__main__
ClassDefinition
p5885
(dp5886
g4
I1
sg5
I01
sg6
g5884
sg7
S'TTreePruner'
p5887
sg9
I00
sg10
(lp5888
sg12
(lp5889
(S'float'
p5890
g1213
g1213
S'm for m-estimate'
p5891
I0
I0
I01
Ntp5892
asg29
(dp5893
sbsS'TImputer'
p5894
(i__main__
ClassDefinition
p5895
(dp5896
g4
I1
sg5
I01
sg6
g5894
sg7
S'TOrange'
p5897
sg9
I01
sg10
(lp5898
sg12
(lp5899
sg29
(dp5900
sbsS'TExamplesDistanceConstructor_DTW'
p5901
(i__main__
ClassDefinition
p5902
(dp5903
g4
I1
sg5
I01
sg6
g5901
sg7
S'TExamplesDistanceConstructor_Normalized'
p5904
sg9
I00
sg10
(lp5905
sg12
(lp5906
(S'int'
p5907
S'dtwDistance'
p5908
S'dtw_distance'
p5909
S'distance measure between individual attributes (default: square of difference)'
p5910
I0
I0
I01
Ntp5911
ag2112
ag2117
ag1368
asg29
(dp5912
sbsS'TStopIMClusteringByAssessor_n'
p5913
(i__main__
ClassDefinition
p5914
(dp5915
g4
I1
sg5
I01
sg6
g5913
sg7
S'TStopIMClusteringByAssessor'
p5916
sg9
I00
sg10
(lp5917
sg12
(lp5918
(S'int'
p5919
g1019
g1019
S'number of clusters'
p5920
I0
I0
I01
Ntp5921
asg29
(dp5922
sbsS'TVarListList'
p5923
(ipyprops
ClassDefinition
p5924
(dp5925
g136
I0
sg137
I01
sg138
g5923
sg139
g140
sg141
I0
sg142
(lp5926
sg144
(lp5927
sg146
(dp5928
sbsS'TRandomGenerator'
p5929
(i__main__
ClassDefinition
p5930
(dp5931
g4
I1
sg5
I01
sg6
g5929
sg7
S'TOrange'
p5932
sg9
I00
sg10
(lp5933
sg12
(lp5934
(S'int'
p5935
S'initseed'
p5936
g5936
S'initial random seed'
p5937
I0
I0
I01
Ntp5938
a(S'int'
p5939
S'uses'
p5940
g5940
S'#times a number was returned'
p5941
I0
I0
I01
Ntp5942
asg29
(dp5943
sbsS'TThresholdCA'
p5944
(i__main__
ClassDefinition
p5945
(dp5946
g4
I1
sg5
I01
sg6
g5944
sg7
S'TOrange'
p5947
sg9
I00
sg10
(lp5948
sg12
(lp5949
sg29
(dp5950
sbsS'TFloatListList'
p5951
(ipyprops
ClassDefinition
p5952
(dp5953
g136
I0
sg137
I01
sg138
g5951
sg139
g140
sg141
I0
sg142
(lp5954
sg144
(lp5955
sg146
(dp5956
sbsS'TPreprocessor_imputeByLearner'
p5957
(i__main__
ClassDefinition
p5958
(dp5959
g4
I1
sg5
I01
sg6
g5957
sg7
S'TPreprocessor'
p5960
sg9
I00
sg10
(lp5961
sg12
(lp5962
(S'TLearner'
p5963
S'learner'
p5964
g5964
S'learner used for inducing a model for imputation'
p5965
I0
I0
I00
Ntp5966
asg29
(dp5967
sbsS'TRuleBeamRefiner_Python'
p5968
(i__main__
ClassDefinition
p5969
(dp5970
g4
I1
sg5
I01
sg6
g5968
sg7
S'TRuleBeamRefiner'
p5971
sg9
I00
sg10
(lp5972
sg12
(lp5973
sg29
(dp5974
sbsS'TClassifierFromVarFD'
p5975
(i__main__
ClassDefinition
p5976
(dp5977
g4
I1
sg5
I01
sg6
g5975
sg7
S'TClassifierFD'
p5978
sg9
I00
sg10
(lp5979
sg12
(lp5980
(S'int'
p5981
S'position'
p5982
g5982
S'position of the attribute in domain'
p5983
I0
I0
I01
Ntp5984
a(S'TTransformValue'
p5985
S'transformer'
p5986
g5986
S'transformer'
p5987
I0
I0
I00
Ntp5988
a(S'TDistribution'
p5989
S'distributionForUnknown'
p5990
S'distribution_for_unknown'
p5991
S'distribution for unknown value'
p5992
I0
I0
I00
Ntp5993
a(S'bool'
p5994
S'transformUnknowns'
p5995
S'transform_unknowns'
p5996
S'if false (default is true), unknowns stay unknown or are changed into distribution if given'
p5997
I0
I0
I01
Ntp5998
ag292
ag94
ag99
asg29
(dp5999
sbsS'TSimpleTreeLearner'
p6000
(i__main__
ClassDefinition
p6001
(dp6002
g4
I1
sg5
I01
sg6
g6000
sg7
S'TLearner'
p6003
sg9
I00
sg10
(lp6004
sg12
(lp6005
(S'float'
p6006
S'maxMajority'
p6007
S'max_majority'
p6008
g574
I0
I0
I01
Ntp6009
a(S'int'
p6010
S'minInstances'
p6011
S'min_instances'
p6012
g574
I0
I0
I01
Ntp6013
a(S'int'
p6014
S'maxDepth'
p6015
S'max_depth'
p6016
g574
I0
I0
I01
Ntp6017
a(S'float'
p6018
S'skipProb'
p6019
S'skip_prob'
p6020
g574
I0
I0
I01
Ntp6021
a(S'TRandomGenerator'
p6022
S'randomGenerator'
p6023
S'random_generator'
p6024
g574
I0
I0
I00
Ntp6025
ag110
asg29
(dp6026
sbsS'TImputer_model'
p6027
(i__main__
ClassDefinition
p6028
(dp6029
g4
I1
sg5
I01
sg6
g6027
sg7
S'TImputer'
p6030
sg9
I00
sg10
(lp6031
sg12
(lp6032
(S'TClassifierList'
p6033
S'models'
p6034
g6034
S'classifiers'
p6035
I0
I0
I00
Ntp6036
asg29
(dp6037
sbsS'TLogRegLearner'
p6038
(i__main__
ClassDefinition
p6039
(dp6040
g4
I1
sg5
I01
sg6
g6038
sg7
S'TLearner'
p6041
sg9
I00
sg10
(lp6042
sg12
(lp6043
(S'TLogRegFitter'
p6044
S'fitter'
p6045
g6045
S'fits beta coefficients and calculates beta errors.'
p6046
I0
I0
I00
Ntp6047
a(S'TImputerConstructor'
p6048
S'imputerConstructor'
p6049
S'imputer_constructor'
p6050
S'if present, it constructs an imputer for unknown values'
p6051
I0
I0
I00
Ntp6052
a(S'TDomainContinuizer'
p6053
S'domainContinuizer'
p6054
S'domain_continuizer'
p6055
S'if present, it constructs continuous domain if needed; if absent, default is used'
p6056
I0
I0
I00
Ntp6057
ag110
asg29
(dp6058
sbsS'TPreprocessor_takeMissing'
p6059
(i__main__
ClassDefinition
p6060
(dp6061
g4
I1
sg5
I01
sg6
g6059
sg7
S'TPreprocessor'
p6062
sg9
I00
sg10
(lp6063
sg12
(lp6064
sg29
(dp6065
sbsS'TMeasureAttribute_IM'
p6066
(i__main__
ClassDefinition
p6067
(dp6068
g4
I1
sg5
I01
sg6
g6066
sg7
S'TMeasureAttribute'
p6069
sg9
I00
sg10
(lp6070
sg12
(lp6071
(S'TIMConstructor'
p6072
S'IMconstructor'
p6073
g6073
S'incompatibility matrix constructor'
p6074
I0
I0
I00
Ntp6075
a(S'TColumnAssessor'
p6076
S'columnAssessor'
p6077
S'column_assessor'
p6078
S'column quality assessor'
p6079
I0
I0
I00
Ntp6080
ag927
ag932
ag937
ag942
asg29
(dp6081
sbsS'TFeatureByDistributions'
p6082
(i__main__
ClassDefinition
p6083
(dp6084
g4
I1
sg5
I01
sg6
g6082
sg7
S'TFeatureInducer'
p6085
sg9
I00
sg10
(lp6086
sg12
(lp6087
(S'TClustersFromDistributions'
p6088
S'clustersFromDistributions'
p6089
S'clusters_from_distributions'
p6090
S'clustering algorithm'
p6091
I0
I0
I00
Ntp6092
a(S'int'
p6093
S'completion'
p6094
g6094
S' decides how to determine the class for points not covered by any cluster'
p6095
I0
I0
I01
S'FeatureByDistributions_Completion'
p6096
tp6097
asg29
(dp6098
S'Completion'
p6099
(lp6100
(S'NoCompletion'
p6101
S'completion_no'
p6102
tp6103
a(S'CompletionByDefault'
p6104
S'completion_default'
p6105
tp6106
a(S'CompletionByBayes'
p6107
S'completion_bayes'
p6108
tp6109
assbsS'TCostMatrix'
p6110
(i__main__
ClassDefinition
p6111
(dp6112
g4
I1
sg5
I01
sg6
g6110
sg7
S'TOrange'
p6113
sg9
I00
sg10
(lp6114
sg12
(lp6115
(S'TVariable'
p6116
S'classVar'
p6117
S'class_var'
p6118
S'attribute to which the matrix applies'
p6119
I0
I0
I00
Ntp6120
a(S'int'
p6121
S'dimension'
p6122
g6122
S'dimension (should equal classVar.noOfValues())'
p6123
I01
I0
I01
Ntp6124
asg29
(dp6125
sbsS'TStopIMClusteringByAssessor_noProfit'
p6126
(i__main__
ClassDefinition
p6127
(dp6128
g4
I1
sg5
I01
sg6
g6126
sg7
S'TStopIMClusteringByAssessor'
p6129
sg9
I00
sg10
(lp6130
sg12
(lp6131
(S'float'
p6132
S'minProfitProportion'
p6133
S'min_profit_proportion'
p6134
S'minimal allowable profit proportion'
p6135
I0
I0
I01
Ntp6136
asg29
(dp6137
sbsS'TRemoveUnusedValues'
p6138
(i__main__
ClassDefinition
p6139
(dp6140
g4
I1
sg5
I01
sg6
g6138
sg7
S'TOrange'
p6141
sg9
I00
sg10
(lp6142
sg12
(lp6143
(S'bool'
p6144
S'removeOneValued'
p6145
S'remove_one_valued'
p6146
S'if true (default is false), one valued attributes are also removed'
p6147
I0
I0
I01
Ntp6148
asg29
(dp6149
sbsS'TExamplesDistance_Normalized'
p6150
(i__main__
ClassDefinition
p6151
(dp6152
g4
I1
sg5
I01
sg6
g6150
sg7
S'TExamplesDistance'
p6153
sg9
I01
sg10
(lp6154
sg12
(lp6155
g455
ag459
ag463
ag467
ag472
ag476
ag481
asg29
(dp6156
sbsS'TExamplesDistance_Euclidean'
p6157
(i__main__
ClassDefinition
p6158
(dp6159
g4
I1
sg5
I01
sg6
g6157
sg7
S'TExamplesDistance_Normalized'
p6160
sg9
I00
sg10
(lp6161
sg12
(lp6162
(S'TDomainDistributions'
p6163
S'distributions'
p6164
g6164
S'distributions (of discrete attributes only)'
p6165
I0
I0
I00
Ntp6166
a(S'TAttributedFloatList'
p6167
S'bothSpecialDist'
p6168
S'both_special_dist'
p6169
S'distances between discrete attributes if both values are unknown'
p6170
I0
I0
I00
Ntp6171
ag455
ag459
ag463
ag467
ag472
ag476
ag481
asg29
(dp6172
sbsS'TPreprocessor_take'
p6173
(i__main__
ClassDefinition
p6174
(dp6175
g4
I1
sg5
I01
sg6
g6173
sg7
S'TPreprocessor'
p6176
sg9
I00
sg10
(lp6177
sg12
(lp6178
(S'TVariableFilterMap'
p6179
S'values'
p6180
g6180
S'variable-filter pairs'
p6181
I0
I0
I00
Ntp6182
a(S'bool'
p6183
S'conjunction'
p6184
g6184
S'decides whether to take conjunction or disjunction of values'
p6185
I0
I0
I01
Ntp6186
asg29
(dp6187
sbsS'TIMConstructor'
p6188
(i__main__
ClassDefinition
p6189
(dp6190
g4
I1
sg5
I01
sg6
g6188
sg7
S'TOrange'
p6191
sg9
I01
sg10
(lp6192
sg12
(lp6193
g1250
asg29
(dp6194
sbsS'TRuleFinder_Python'
p6195
(i__main__
ClassDefinition
p6196
(dp6197
g4
I1
sg5
I01
sg6
g6195
sg7
S'TRuleFinder'
p6198
sg9
I00
sg10
(lp6199
sg12
(lp6200
g4049
ag4052
asg29
(dp6201
sbsS'TTabDelimExampleGenerator'
p6202
(i__main__
ClassDefinition
p6203
(dp6204
g4
I1
sg5
I01
sg6
g6202
sg7
S'TFileExampleGenerator'
p6205
sg9
I00
sg10
(lp6206
sg12
(lp6207
(S'TIntList'
p6208
S'attributeTypes'
p6209
S'attribute_types'
p6210
S'types of attributes (-1 normal, 0 skip, <-1 = meta ID)'
p6211
I0
I0
I00
Ntp6212
a(S'int'
p6213
S'classPos'
p6214
S'class_pos'
p6215
S'position of the class attribute'
p6216
I0
I0
I01
Ntp6217
a(S'TIntList'
p6218
S'classPoses'
p6219
S'class_poses'
p6220
S'positions of class attributes if there are multiple; otherwise None'
p6221
I0
I0
I00
Ntp6222
a(S'int'
p6223
S'basketPos'
p6224
S'basket_pos'
p6225
S'position of the (virtual) basket attribute'
p6226
I0
I0
I01
Ntp6227
a(S'int'
p6228
S'headerLines'
p6229
S'header_lines'
p6230
S'number of header lines (3 for .tab, 1 for .txt)'
p6231
I0
I0
I01
Ntp6232
a(S'bool'
p6233
S'csv'
p6234
g6234
S"also allow ',' as a separator"
p6235
I0
I0
I01
Ntp6236
a(S'TBasketFeeder'
p6237
S'basketFeeder'
p6238
S'basket_feeder'
p6239
S'takes care of inserting the meta attributes from the basket if need be'
p6240
I0
I0
I00
Ntp6241
ag1649
ag1654
ag1659
ag307
ag311
asg29
(dp6242
sbsS'TRandomClassifier'
p6243
(i__main__
ClassDefinition
p6244
(dp6245
g4
I1
sg5
I01
sg6
g6243
sg7
S'TClassifier'
p6246
sg9
I00
sg10
(lp6247
sg12
(lp6248
(S'TDistribution'
p6249
S'probabilities'
p6250
g6250
S'probabilities of predictions'
p6251
I0
I0
I00
Ntp6252
ag94
ag99
asg29
(dp6253
sbsS'TkNNLearner'
p6254
(i__main__
ClassDefinition
p6255
(dp6256
g4
I1
sg5
I01
sg6
g6254
sg7
S'TLearner'
p6257
sg9
I00
sg10
(lp6258
sg12
(lp6259
(S'float'
p6260
g1209
g1209
S'number of neighbours (0 for sqrt of #examples)'
p6261
I0
I0
I01
Ntp6262
a(S'bool'
p6263
S'rankWeight'
p6264
S'rank_weight'
p6265
S'enable weighting by ranks'
p6266
I0
I0
I01
Ntp6267
a(S'TExamplesDistanceConstructor'
p6268
S'distanceConstructor'
p6269
S'distance_constructor'
p6270
S'metrics'
p6271
I0
I0
I00
Ntp6272
ag110
asg29
(dp6273
sbsS'TTreeDescender_UnknownToNode'
p6274
(i__main__
ClassDefinition
p6275
(dp6276
g4
I1
sg5
I01
sg6
g6274
sg7
g1593
sg9
I0
sg10
(lp6277
sg12
(lp6278
sg29
(dp6279
sbsS'TIntFloatList'
p6280
(ipyprops
ClassDefinition
p6281
(dp6282
g136
I0
sg137
I01
sg138
g6280
sg139
g140
sg141
I0
sg142
(lp6283
sg144
(lp6284
sg146
(dp6285
sbsS'TDistributionAssessor_mf'
p6286
(i__main__
ClassDefinition
p6287
(dp6288
g4
I1
sg5
I01
sg6
g6286
sg7
S'TDistributionAssessor'
p6289
sg9
I00
sg10
(lp6290
sg12
(lp6291
(S'float'
p6292
g1213
g1213
S'm for m-estimate'
p6293
I0
I0
I01
Ntp6294
asg29
(dp6295
sbsS'TExampleClusters'
p6296
(i__main__
ClassDefinition
p6297
(dp6298
g4
I1
sg5
I01
sg6
g6296
sg7
S'TGeneralExampleClustering'
p6299
sg9
I00
sg10
(lp6300
sg12
(lp6301
(S'TExampleCluster'
p6302
S'root'
p6303
g6303
S'root of cluster hierarchy'
p6304
I0
I0
I00
Ntp6305
a(S'float'
p6306
S'quality'
p6307
g6307
S"'quality' of clustering"
p6308
I0
I0
I01
Ntp6309
asg29
(dp6310
sbsS'TExamplesDistance_Python'
p6311
(i__main__
ClassDefinition
p6312
(dp6313
g4
I1
sg5
I01
sg6
g6311
sg7
S'TExamplesDistance'
p6314
sg9
I00
sg10
(lp6315
sg12
(lp6316
sg29
(dp6317
sbsS'TCostLearner'
p6318
(i__main__
ClassDefinition
p6319
(dp6320
g4
I1
sg5
I01
sg6
g6318
sg7
S'TMajorityLearner'
p6321
sg9
I00
sg10
(lp6322
sg12
(lp6323
(S'TCostMatrix'
p6324
S'cost'
p6325
g6325
S'cost matrix'
p6326
I0
I0
I00
Ntp6327
ag851
ag856
ag110
asg29
(dp6328
sbsS'TEFMDataDescription'
p6329
(i__main__
ClassDefinition
p6330
(dp6331
g4
I1
sg5
I01
sg6
g6329
sg7
S'TOrange'
p6332
sg9
I00
sg10
(lp6333
S'domainDistributions'
p6334
asg12
(lp6335
(S'TDomain'
p6336
S'domain'
p6337
g6337
S'domain'
p6338
I01
I0
I00
Ntp6339
asg29
(dp6340
sbsS'TClassifierFD'
p6341
(i__main__
ClassDefinition
p6342
(dp6343
g4
I1
sg5
I01
sg6
g6341
sg7
S'TClassifier'
p6344
sg9
I00
sg10
(lp6345
sg12
(lp6346
g292
ag94
ag99
asg29
(dp6347
sbsS'TPreprocessor_drop'
p6348
(i__main__
ClassDefinition
p6349
(dp6350
g4
I1
sg5
I01
sg6
g6348
sg7
S'TPreprocessor'
p6351
sg9
I00
sg10
(lp6352
sg12
(lp6353
(S'TVariableFilterMap'
p6354
S'values'
p6355
g6355
S'variable-filter pairs'
p6356
I0
I0
I00
Ntp6357
a(S'bool'
p6358
S'conjunction'
p6359
g6359
S'decides whether to take conjunction or disjunction of values'
p6360
I0
I0
I01
Ntp6361
asg29
(dp6362
sbsS'TTreeDescender_UnknownToCommonBranch'
p6363
(i__main__
ClassDefinition
p6364
(dp6365
g4
I1
sg5
I01
sg6
g6363
sg7
g1593
sg9
I0
sg10
(lp6366
sg12
(lp6367
sg29
(dp6368
sbsS'TPreprocessor_addNoise'
p6369
(i__main__
ClassDefinition
p6370
(dp6371
g4
I1
sg5
I01
sg6
g6369
sg7
S'TPreprocessor'
p6372
sg9
I00
sg10
(lp6373
sg12
(lp6374
(S'TVariableFloatMap'
p6375
S'proportions'
p6376
g6376
S'proportion of changed values for individual attributes'
p6377
I0
I0
I00
Ntp6378
a(S'float'
p6379
S'defaultProportion'
p6380
S'default_proportion'
p6381
S'default proportion of changed values (for attributes not specified above)'
p6382
I0
I0
I01
Ntp6383
a(S'TRandomGenerator'
p6384
S'randomGenerator'
p6385
S'random_generator'
p6386
S'random number generator'
p6387
I0
I0
I00
Ntp6388
asg29
(dp6389
sbsS'TStopIMClusteringByAssessor_binary'
p6390
(i__main__
ClassDefinition
p6391
(dp6392
g4
I1
sg5
I01
sg6
g6390
sg7
S'TStopIMClusteringByAssessor'
p6393
sg9
I00
sg10
(lp6394
sg12
(lp6395
sg29
(dp6396
sbsS'TColumnAssessor_mf'
p6397
(i__main__
ClassDefinition
p6398
(dp6399
g4
I1
sg5
I01
sg6
g6397
sg7
S'TColumnAssessor'
p6400
sg9
I00
sg10
(lp6401
sg12
(lp6402
(S'float'
p6403
g1213
g1213
S'm for m-estimate'
p6404
I0
I0
I01
Ntp6405
asg29
(dp6406
sbsS'TExamplesDistanceConstructor'
p6407
(i__main__
ClassDefinition
p6408
(dp6409
g4
I1
sg5
I01
sg6
g6407
sg7
S'TOrange'
p6410
sg9
I01
sg10
(lp6411
sg12
(lp6412
g1368
asg29
(dp6413
sbsS'TSubsetsGenerator'
p6414
(i__main__
ClassDefinition
p6415
(dp6416
g4
I1
sg5
I01
sg6
g6414
sg7
S'TOrange'
p6417
sg9
I01
sg10
(lp6418
sg12
(lp6419
g208
asg29
(dp6420
sbsS'TPreprocessor_addCensorWeight'
p6421
(i__main__
ClassDefinition
p6422
(dp6423
g4
I1
sg5
I01
sg6
g6421
sg7
S'TPreprocessor'
p6424
sg9
I00
sg10
(lp6425
sg12
(lp6426
(S'TVariable'
p6427
S'outcomeVar'
p6428
S'outcome_var'
p6429
S'outcome variable'
p6430
I0
I0
I00
Ntp6431
a(S'TVariable'
p6432
S'timeVar'
p6433
S'time_var'
p6434
S'time variable'
p6435
I0
I0
I00
Ntp6436
a(S'TValue'
p6437
S'eventValue'
p6438
S'event_value'
p6439
S'event (fail) value'
p6440
I0
I0
I01
Ntp6441
a(S'int'
p6442
S'method'
p6443
g6443
S' weighting method'
p6444
I0
I0
I01
S'Preprocessor_addCensorWeight_Method'
p6445
tp6446
a(S'float'
p6447
S'maxTime'
p6448
S'max_time'
p6449
S'maximal time'
p6450
I0
I0
I01
Ntp6451
a(S'bool'
p6452
S'addComplementary'
p6453
S'add_complementary'
p6454
S'if true (default is false), complementary examples are added for censored examples'
p6455
I0
I0
I01
Ntp6456
asg29
(dp6457
S'Method'
p6458
(lp6459
(S'Linear'
p6460
S'TPreprocessor_addCensorWeight::linear'
p6461
tp6462
a(S'KM'
p6463
S'TPreprocessor_addCensorWeight::km'
p6464
tp6465
a(S'Bayes'
p6466
S'TPreprocessor_addCensorWeight::bayes'
p6467
tp6468
assbsS'TRuleBeamCandidateSelector_Python'
p6469
(i__main__
ClassDefinition
p6470
(dp6471
g4
I1
sg5
I01
sg6
g6469
sg7
S'TRuleBeamCandidateSelector'
p6472
sg9
I00
sg10
(lp6473
sg12
(lp6474
sg29
(dp6475
sbsS'TIntList'
p6476
(ipyprops
ClassDefinition
p6477
(dp6478
g136
I0
sg137
I01
sg138
g6476
sg139
g140
sg141
I0
sg142
(lp6479
sg144
(lp6480
sg146
(dp6481
sbsS'TEntropyDiscretization'
p6482
(i__main__
ClassDefinition
p6483
(dp6484
g4
I1
sg5
I01
sg6
g6482
sg7
S'TDiscretization'
p6485
sg9
I00
sg10
(lp6486
sg12
(lp6487
(S'int'
p6488
S'maxNumberOfIntervals'
p6489
(g6489
g1019
tp6490
S' maximal number of intervals; default = 0 (no limits)'
p6491
I0
I0
I01
Ntp6492
a(S'bool'
p6493
S'forceAttribute'
p6494
(g6494
S'forced'
p6495
tp6496
S' minimal number of intervals; default = 0 (no limits)'
p6497
I0
I0
I01
Ntp6498
asg29
(dp6499
sbsS'TIMBySorting'
p6500
(i__main__
ClassDefinition
p6501
(dp6502
g4
I1
sg5
I01
sg6
g6500
sg7
S'TIMConstructor'
p6503
sg9
I00
sg10
(lp6504
sg12
(lp6505
g1250
asg29
(dp6506
sbsS'TImputerConstructor_asValue'
p6507
(i__main__
ClassDefinition
p6508
(dp6509
g4
I1
sg5
I01
sg6
g6507
sg7
S'TImputerConstructor'
p6510
sg9
I00
sg10
(lp6511
sg12
(lp6512
g165
asg29
(dp6513
sbsS'TGaussianDistribution'
p6514
(i__main__
ClassDefinition
p6515
(dp6516
g4
I1
sg5
I01
sg6
g6514
sg7
S'TDistribution'
p6517
sg9
I00
sg10
(lp6518
sg12
(lp6519
(S'float'
p6520
S'mean'
p6521
g6521
S'mu'
p6522
I0
I0
I01
Ntp6523
a(S'float'
p6524
S'sigma'
p6525
g6525
S'sigma'
p6526
I0
I0
I01
Ntp6527
ag1133
ag1137
ag1141
ag1145
ag1149
ag1154
ag1159
ag1164
asg29
(dp6528
sbsS'TExampleDistVector'
p6529
(i__main__
ClassDefinition
p6530
(dp6531
g4
I1
sg5
I01
sg6
g6529
sg7
S'TOrange'
p6532
sg9
I00
sg10
(lp6533
sg12
(lp6534
sg29
(dp6535
sbsS'TConditionalProbabilityEstimatorList'
p6536
(ipyprops
ClassDefinition
p6537
(dp6538
g136
I0
sg137
I01
sg138
g6536
sg139
g140
sg141
I0
sg142
(lp6539
sg144
(lp6540
sg146
(dp6541
sbsS'TRuleBeamFilter_Width'
p6542
(i__main__
ClassDefinition
p6543
(dp6544
g4
I1
sg5
I01
sg6
g6542
sg7
S'TRuleBeamFilter'
p6545
sg9
I00
sg10
(lp6546
sg12
(lp6547
(S'int'
p6548
S'width'
p6549
g6549
g574
I0
I0
I01
Ntp6550
asg29
(dp6551
sbsS'TProbabilityEstimator'
p6552
(i__main__
ClassDefinition
p6553
(dp6554
g4
I1
sg5
I01
sg6
g6552
sg7
S'TOrange'
p6555
sg9
I01
sg10
(lp6556
sg12
(lp6557
g1516
ag1521
asg29
(dp6558
sbsS'TIMClustering'
p6559
(i__main__
ClassDefinition
p6560
(dp6561
g4
I1
sg5
I01
sg6
g6559
sg7
S'TOrange'
p6562
sg9
I00
sg10
(lp6563
sg12
(lp6564
(S'TIM'
p6565
S'im'
p6566
g6566
S'incompatibilty matrix'
p6567
I0
I0
I00
Ntp6568
a(S'TIntList'
p6569
S'clusters'
p6570
g6570
S'cluster index for each matrix column'
p6571
I0
I0
I00
Ntp6572
a(S'int'
p6573
S'maxCluster'
p6574
S'max_cluster'
p6575
S'the highest cluster index'
p6576
I0
I0
I01
Ntp6577
a(S'float'
p6578
S'quality'
p6579
g6579
S'cluster quality'
p6580
I0
I0
I01
Ntp6581
asg29
(dp6582
sbsS'TRuleStoppingCriteria'
p6583
(i__main__
ClassDefinition
p6584
(dp6585
g4
I1
sg5
I01
sg6
g6583
sg7
S'TOrange'
p6586
sg9
I01
sg10
(lp6587
sg12
(lp6588
sg29
(dp6589
sbsS'TImputerConstructor_model'
p6590
(i__main__
ClassDefinition
p6591
(dp6592
g4
I1
sg5
I01
sg6
g6590
sg7
S'TImputerConstructor'
p6593
sg9
I00
sg10
(lp6594
sg12
(lp6595
(S'TLearner'
p6596
S'learnerDiscrete'
p6597
S'learner_discrete'
p6598
S'learner for discrete attributes'
p6599
I0
I0
I00
Ntp6600
a(S'TLearner'
p6601
S'learnerContinuous'
p6602
S'learner_continuous'
p6603
S'learner for continuous attributes'
p6604
I0
I0
I00
Ntp6605
a(S'bool'
p6606
S'useClass'
p6607
S'use_class'
p6608
S'tells whether to use class value in imputation (default: false)'
p6609
I0
I0
I01
Ntp6610
ag165
asg29
(dp6611
sbsS'TFindNearestConstructor_BruteForce'
p6612
(i__main__
ClassDefinition
p6613
(dp6614
g4
I1
sg5
I01
sg6
g6612
sg7
S'TFindNearestConstructor'
p6615
sg9
I00
sg10
(lp6616
sg12
(lp6617
g1881
ag1886
asg29
(dp6618
sbsS'TImputerConstructor'
p6619
(i__main__
ClassDefinition
p6620
(dp6621
g4
I1
sg5
I01
sg6
g6619
sg7
S'TOrange'
p6622
sg9
I01
sg10
(lp6623
sg12
(lp6624
g165
asg29
(dp6625
sbsS'TPreprocessor'
p6626
(i__main__
ClassDefinition
p6627
(dp6628
g4
I1
sg5
I01
sg6
g6626
sg7
S'TOrange'
p6629
sg9
I01
sg10
(lp6630
sg12
(lp6631
sg29
(dp6632
sbsS'TDiscretizer'
p6633
(i__main__
ClassDefinition
p6634
(dp6635
g4
I1
sg5
I01
sg6
g6633
sg7
S'TTransformValue'
p6636
sg9
I01
sg10
(lp6637
sg12
(lp6638
g825
asg29
(dp6639
sbsS'TIMByRowsPreprocessor'
p6640
(i__main__
ClassDefinition
p6641
(dp6642
g4
I1
sg5
I01
sg6
g6640
sg7
S'TOrange'
p6643
sg9
I01
sg10
(lp6644
sg12
(lp6645
sg29
(dp6646
sbsS'TTreeStopCriteria_common'
p6647
(i__main__
ClassDefinition
p6648
(dp6649
g4
I1
sg5
I01
sg6
g6647
sg7
S'TTreeStopCriteria'
p6650
sg9
I00
sg10
(lp6651
sg12
(lp6652
(S'float'
p6653
S'maxMajority'
p6654
S'max_majority'
p6655
S'a maximal proportion of majority class for division to continue'
p6656
I0
I0
I01
Ntp6657
a(S'float'
p6658
S'minInstances'
p6659
S'min_instances'
p6660
S'a minimal number of examples for division to continue'
p6661
I0
I0
I01
Ntp6662
asg29
(dp6663
sbsS'TTreeStopCriteria_Python'
p6664
(i__main__
ClassDefinition
p6665
(dp6666
g4
I1
sg5
I01
sg6
g6664
sg7
S'TTreeStopCriteria'
p6667
sg9
I00
sg10
(lp6668
sg12
(lp6669
sg29
(dp6670
sbsS'TExamplesDistanceConstructor_Maximal'
p6671
(i__main__
ClassDefinition
p6672
(dp6673
g4
I1
sg5
I01
sg6
g6671
sg7
S'TExamplesDistanceConstructor_Normalized'
p6674
sg9
I00
sg10
(lp6675
sg12
(lp6676
g2112
ag2117
ag1368
asg29
(dp6677
sbsS'TIGByIM'
p6678
(i__main__
ClassDefinition
p6679
(dp6680
g4
I1
sg5
I01
sg6
g6678
sg7
S'TIGConstructor'
p6681
sg9
I00
sg10
(lp6682
sg12
(lp6683
(S'TIMConstructor'
p6684
S'IMconstructor'
p6685
g6685
S'IM constructor'
p6686
I0
I0
I00
Ntp6687
asg29
(dp6688
sbsS'TRuleEvaluator_LRS'
p6689
(i__main__
ClassDefinition
p6690
(dp6691
g4
I1
sg5
I01
sg6
g6689
sg7
S'TRuleEvaluator'
p6692
sg9
I00
sg10
(lp6693
sg12
(lp6694
(S'TRuleList'
p6695
S'rules'
p6696
g6696
g574
I0
I0
I00
Ntp6697
a(S'bool'
p6698
S'storeRules'
p6699
S'store_rules'
p6700
g574
I0
I0
I01
Ntp6701
asg29
(dp6702
sbs.